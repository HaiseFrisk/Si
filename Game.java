package age.of.civilizations2.jakowski.lukasz;

import age.of.civilizations2.jakowski.lukasz.CFG;
import age.of.civilizations2.jakowski.lukasz.Game_Action;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.GdxRuntimeException;
import com.badlogic.gdx.utils.Json;
import com.badlogic.gdx.utils.JsonWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

public class Game {
    public static final int ACTIVE_CITIES_ANIMATION_TIME = 525;
    public static final int BASE_PROVINCE_VALUE = 1;
    public static final int BASE_PROVINCE_VALUE_CAPITAL = 2;
    public static final int CAN_MIGRATE_EVERY_X_TURNS = 10;
    public static final int CREATE_VASSAL_STARTING_RELATION = 65;
    public static final int DECLARE_WAR_REACTIONS = 35;
    public static final int DECLARE_WAR_VASSALS_REACTIONS = 45;
    public static final float HIGHLIGHTED_PROVINCES_ANIMATION_TIME = 750.0f;
    public static final float HIGHLIGHTED_PROVINCES_ANIMATION_TIME_BACK = 350.0f;
    public static final float LEADER_MAX_VALUE = 0.25f;
    public static final float LEADER_MIN_VALUE = -0.25f;
    public static int MAX_BELOW_ZERO_POINT_X = 0;
    public static final int REGION_STYLE_CLASSIC = 0;
    public static final float RELEASE_VASSAL_PERC_OF_TECH = 0.72f;
    public static final int RELEASE_VASSAL_PERC_OF_TECH_RAND = 22;
    public static final int WAR_CANT_BE_DECLARED_IN_FIRST_XTURNS = 4;
    private static CustomBuildingsManager customBuildingsManager;
    public static int iBuildingsWidth = 0;
    public static List<Integer> lBuildingsImages = new ArrayList();
    public boolean HIGHLIGHTED_CITIES_DISABLE_ANIMATION;
    public ArrayList<Integer> TroopDistributionInProvinces;
    public ActiveProvinceBorderStyle activeProvinceBorder_LandByLand_Style;
    public ActiveProvinceBorderStyle activeProvinceBorder_LandBySea_Style;
    public boolean activeProvinceBorder_LastUpdateInCreateScenario;
    public ActiveProvinceBorderStyle activeProvinceBorder_SeaBySea_Style;
    public Province_Animation2 activeProvince_Animation_Data;
    public boolean breakWasteland;
    public ArrayList<Integer> buildInProvinces;
    public MoveUnits_Line currentMoveUnitsLine;
    public RegroupArmy_Data currentRegroupArmy;
    private Game_CustomBuildings customBuildings;
    public DrawMoveUnitsArmy drawMoveUnitsArmy;
    public boolean drawMoveUnitsArmy_UpdateAnimation;
    public List<DrawProvinceBorder_LandBySeaIDs> drawProvinceBorder_LandBySeaIDs;
    public float fDashedLine_Percentage_HighlitedProvinceBorder;
    public Game_Cities gameCities;
    public Game_Mountains gameMountains;
    public Game_Scenarios gameScenarios;
    public Game_Wonders gameWonders;
    public boolean highlightedProvinceBorder_BackAnimation;
    public boolean highlightedProvinceBorder_Update;
    public Province_Animation_MoveUnits2 highlightedProvince_AnimationData;
    public HighlightedProvince_Animation_UpdateOffset highlightedProvince_Animation_UpdateOffset;
    public int iActiveProvince;
    public int iAlliancesSize;
    public int iAvailableCivilizations;
    public int iCivsSize;
    public int iHighlightedProvincesSize;
    public int iMoveUnits_JustDraw_AnotherArmiesSize;
    public int iPlayersSize;
    public int iProvincesSize;
    public int iRegionsSize;
    public int iWarsSize;
    public List<Civilization_Region_Active> lActive_CivRegion;
    public List<Alliance> lAlliances;
    public List<City> lCities;
    public List<Civilization_Region_Style> lCivRegion_Styles;
    public List<Civilization> lCivs;
    public List<Integer> lCivsSortedAZ;
    public List<MoveUnits_Line> lCurrentRegroupArmyLine;
    public long lDashedLineTime_Percentage_HighlitedProvinceBorder;
    public List<Integer> lHighlightedProvinces;
    public List<MoveUnits_Line> lHighlightedProvinces_MoveUnits_Lines;
    public List<Mountain> lMountains;
    public long lMoveUnitsLineTime;
    public List<Move_Units_JustDraw> lMoveUnits_JustDraw_AnotherArmies;
    public List<PeaceTreaty_GameData_MessageData> lPeaceTreaties;
    public List<Player> lPlayers;
    public List<Province> lProvinces;
    public List<Integer> lProvincesInView;
    public List<Region> lRegions;
    public List<Integer> lSeaProvincesInView;
    public long lTIME_ACTIVE_CITIES;
    public long lTIME_HIGHLIGHTED_CITIES;
    public List<War_GameData> lWars;
    public List<Integer> lWastelandProvincesInView;
    public List<Integer> loadArmiesWidth_ErrorIDs;
    public RandomTurnOrder oRTO;
    public ArrayList<Integer> recruitInProvinces;
    public String sRespondToPeaceTreatyID;
    public int scenarioID;
    public Selected_Provinces selectedProvinces;
    public SetActiveProvince_ExtraAction setActiveProvince_ExtraAction;
    public boolean updateProvincesInView;
    public Wonders_Manager wondersManager;

    interface ActiveProvinceBorderStyle {
        void update(int i, int i2);
    }

    public interface DrawMoveUnitsArmy {
        void drawMoveUnitsArmy(SpriteBatch spriteBatch, float f);
    }

    interface HighlightedProvince_Animation_UpdateOffset {
        void updateOffset();
    }

    public interface SetActiveProvince_ExtraAction {
        void extraAction(int i);
    }

    public Game_CustomBuildings getGame_CustomBuildings() {
        return this.customBuildings;
    }

    public CustomBuildingsManager getGame_CustomBuildingsManager() {
        return customBuildingsManager;
    }

    public final void initGameCustomBuildings() {
        this.customBuildings = new Game_CustomBuildings();
        customBuildingsManager = new CustomBuildingsManager();
    }

    public final void updateActiveProvinceBorderStyle() {
        if ((!CFG.menuManager.getInGameView() || CFG.viewsManager.getActiveViewID() != ViewsManager.VIEW_DIPLOMACY_MODE) && !CFG.menuManager.getInCreateScenario_Assign() && !CFG.menuManager.getInCreateScenario_Assign_Select() && !CFG.menuManager.getInCreateScenario_Available_Provinces() && !CFG.menuManager.getInCreateScenario_Civilizations() && !CFG.menuManager.getInCreateScenario_Civilizations_Select() && !CFG.menuManager.getInCreateScenario_SetUpArmy() && !CFG.menuManager.getInCreateScenario_WastelandMap() && !CFG.menuManager.getInCreateScenario_TechnologyLevels() && !CFG.menuManager.getInCreateScenario_StartingMoney() && !CFG.menuManager.getInMapEditor_FormableCivs_Edit() && !CFG.menuManager.getInCreateScenario_HolyRomanEmpire() && !CFG.menuManager.getInGame_CreateAVassal() && !CFG.menuManager.getInGame_SelectProvinces() && !CFG.menuManager.getInGame_ShowProvinces() && !CFG.menuManager.getInGame_TradeSelectCiv() && !CFG.menuManager.getInMapEditor_FormableCivs_SelectFormable() && !CFG.menuManager.getInManageDiplomacy() && !CFG.menuManager.getInSelectAvailableCivilizations() && !CFG.menuManager.getInCreateCivilization() && !CFG.menuManager.getInCreateCity() && !CFG.menuManager.getInMapEditor_Terrain() && !CFG.menuManager.getInPalletOfCivsColorsEdit() && !CFG.menuManager.getInMapEditor_TradeZones_Edit() && !CFG.menuManager.getInMapEditor_Continents() && !CFG.menuManager.getInMapEditor_WastelandMaps_Edit() && !CFG.menuManager.getInCreateNewGame()) {
            if (this.activeProvinceBorder_LastUpdateInCreateScenario) {
                this.activeProvinceBorder_LandByLand_Style = new ActiveProvinceBorderStyle() {
                    public void update(int nProvinceID, int withProvinceID) {
                        Game.this.getProvince(nProvinceID).getProvinceBordersLandByLand(withProvinceID).updateDrawProvinceBorder_Active();
                    }
                };
                this.activeProvinceBorder_LandBySea_Style = new ActiveProvinceBorderStyle() {
                    public void update(int nProvinceID, int withProvinceID) {
                        Game.this.getProvince(nProvinceID).getProvinceBordersLandBySea(withProvinceID).updateDrawProvinceBorder_ActiveSea();
                    }
                };
                this.activeProvinceBorder_SeaBySea_Style = new ActiveProvinceBorderStyle() {
                    public void update(int nProvinceID, int withProvinceID) {
                        Game.this.getProvince(nProvinceID).getProvinceBordersSeaBySea(withProvinceID).updateDrawProvinceBorder_ActiveSea();
                    }
                };
                this.highlightedProvince_Animation_UpdateOffset = new HighlightedProvince_Animation_UpdateOffset() {
                    public void updateOffset() {
                        if (Game.this.iHighlightedProvincesSize > 0 || ((Game.this.getActiveProvinceID() >= 0 && Game.this.getProvince(Game.this.getActiveProvinceID()).getSeaProvince()) || Game.this.lCurrentRegroupArmyLine.size() > 0)) {
                            Game.this.highlightedProvince_AnimationData.update();
                        }
                    }
                };
                this.highlightedProvince_AnimationData.setLineOffsetInterval(75);
                this.activeProvinceBorder_LastUpdateInCreateScenario = false;
            } else {
                return;
            }
        } else if (!this.activeProvinceBorder_LastUpdateInCreateScenario) {
            this.activeProvinceBorder_LandByLand_Style = new ActiveProvinceBorderStyle() {
                public void update(int nProvinceID, int withProvinceID) {
                    Game.this.getProvince(nProvinceID).getProvinceBordersLandByLand(withProvinceID).updateDrawProvinceBorder_ActiveDashed();
                }
            };
            this.activeProvinceBorder_LandBySea_Style = new ActiveProvinceBorderStyle() {
                public void update(int nProvinceID, int withProvinceID) {
                    Game.this.getProvince(nProvinceID).getProvinceBordersLandBySea(withProvinceID).updateDrawProvinceBorder_ActiveSea_Dashed();
                }
            };
            this.activeProvinceBorder_SeaBySea_Style = new ActiveProvinceBorderStyle() {
                public void update(int nProvinceID, int withProvinceID) {
                    Game.this.getProvince(nProvinceID).getProvinceBordersSeaBySea(withProvinceID).updateDrawProvinceBorder_ActiveSea_Dashed();
                }
            };
            this.highlightedProvince_Animation_UpdateOffset = new HighlightedProvince_Animation_UpdateOffset() {
                public void updateOffset() {
                    Game.this.highlightedProvince_AnimationData.update();
                }
            };
            this.highlightedProvince_AnimationData.setLineOffsetInterval(90);
            this.activeProvinceBorder_LastUpdateInCreateScenario = true;
        } else {
            return;
        }
        if (getActiveProvinceID() >= 0) {
            setActiveProvinceID(getActiveProvinceID());
        }
    }

    public final void addDrawProvinceBorder_LandBySea(int nProvinceID, int nWithProvinceID) {
        int i = this.drawProvinceBorder_LandBySeaIDs.size() - 1;
        while (i >= 0) {
            if (this.drawProvinceBorder_LandBySeaIDs.get(i).iProvinceID != nProvinceID || this.drawProvinceBorder_LandBySeaIDs.get(i).withProvinceID != nWithProvinceID) {
                i--;
            } else {
                return;
            }
        }
        this.drawProvinceBorder_LandBySeaIDs.add(new DrawProvinceBorder_LandBySeaIDs(nProvinceID, nWithProvinceID));
    }

    public final void removeDrawProvinceBorder_LandBySea(int nProvinceID, int nWithProvinceID) {
        for (int i = this.drawProvinceBorder_LandBySeaIDs.size() - 1; i >= 0; i--) {
            if (this.drawProvinceBorder_LandBySeaIDs.get(i).iProvinceID == nProvinceID && this.drawProvinceBorder_LandBySeaIDs.get(i).withProvinceID == nWithProvinceID) {
                this.drawProvinceBorder_LandBySeaIDs.remove(i);
                return;
            }
        }
    }

    public Game() {
        this.buildInProvinces = new ArrayList<>();
        this.recruitInProvinces = new ArrayList<>();
        this.TroopDistributionInProvinces = new ArrayList<>();
        this.scenarioID = -1;
        this.lProvinces = null;
        this.iProvincesSize = 0;
        this.lRegions = new ArrayList();
        this.iRegionsSize = 0;
        this.updateProvincesInView = true;
        this.lProvincesInView = new ArrayList();
        this.lSeaProvincesInView = new ArrayList();
        this.lWastelandProvincesInView = new ArrayList();
        this.lCivs = null;
        this.iCivsSize = 0;
        this.lCivsSortedAZ = new ArrayList();
        this.iPlayersSize = 0;
        this.lCities = null;
        this.lMountains = null;
        this.lAlliances = null;
        this.iAlliancesSize = 0;
        this.lWars = null;
        this.iWarsSize = 0;
        this.lPeaceTreaties = null;
        this.sRespondToPeaceTreatyID = "";
        this.wondersManager = new Wonders_Manager();
        this.iActiveProvince = -1;
        this.lActive_CivRegion = new ArrayList();
        this.lHighlightedProvinces = new ArrayList();
        this.iHighlightedProvincesSize = 0;
        this.lHighlightedProvinces_MoveUnits_Lines = new ArrayList();
        this.currentMoveUnitsLine = null;
        this.selectedProvinces = new Selected_Provinces();
        this.drawMoveUnitsArmy = null;
        this.lTIME_ACTIVE_CITIES = 0;
        this.lTIME_HIGHLIGHTED_CITIES = 0;
        this.HIGHLIGHTED_CITIES_DISABLE_ANIMATION = false;
        this.currentRegroupArmy = null;
        this.lCurrentRegroupArmyLine = new ArrayList();
        this.activeProvinceBorder_LastUpdateInCreateScenario = true;
        this.drawProvinceBorder_LandBySeaIDs = new ArrayList();
        this.fDashedLine_Percentage_HighlitedProvinceBorder = CFG.DEFAULT_RESEARACH_LEVEL;
        this.highlightedProvinceBorder_BackAnimation = false;
        this.highlightedProvinceBorder_Update = false;
        this.lMoveUnitsLineTime = 0;
        this.drawMoveUnitsArmy_UpdateAnimation = false;
        this.lMoveUnits_JustDraw_AnotherArmies = new ArrayList();
        this.breakWasteland = false;
        this.loadArmiesWidth_ErrorIDs = new ArrayList();
        this.activeProvince_Animation_Data = new Province_Animation2();
        this.highlightedProvince_AnimationData = new Province_Animation_MoveUnits2();
        this.lProvinces = new ArrayList();
        this.lCivRegion_Styles = new ArrayList();
        this.lCivRegion_Styles.add(new Civilization_Region_Style());
        this.lCivRegion_Styles.add(new Civilization_Region_Style() {
            public void updatePB(int nProvinceID, int withProvinceID) {
                CFG.game.getProvince(nProvinceID).getProvinceBordersLandByLand(withProvinceID).updateDrawProvinceBorder_CivilizationRegion2();
            }
        });
        this.oRTO = new RandomTurnOrder();
    }

    public static boolean checkUncivilizedMenu(int nProvinceID) {
        return CFG.ideologiesManager.getIdeology(CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getIdeologyID()).CAN_BECOME_CIVILIZED >= 0 && CFG.game.getProvince(nProvinceID).getCivID() == 0 && uncivilizedProvinceBordersWithCiv(nProvinceID, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID());
    }

    public static boolean uncivilizedProvinceBordersWithCiv(int nProvinceID, int nCivID) {
        if (nProvinceID >= 0) {
            for (int i = 0; i < CFG.game.getProvince(nProvinceID).getNeighboringProvincesSize(); i++) {
                if (CFG.game.getProvince(CFG.game.getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() == nCivID) {
                    return true;
                }
            }
        }
        return false;
    }

    public int uncivilizedCanMigrate_FromProvince_NumOfTurns(int nProvinceID, int nCivID) {
        try {
            return Math.max(1, 10 - CFG.game.getProvince(CFG.game.getActiveProvinceID()).getCore().getNumOfOwnership(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
        } catch (IndexOutOfBoundsException e) {
            return 1;
        }
    }

    /* access modifiers changed from: protected */
    public final int getCivsSizeREAL() {
        return this.lCivs.size();
    }

    public static boolean uncivilizedCanMigrate_FromProvince(int nProvinceID, int nCivID) {
        if (nProvinceID < 0 || CFG.game.getProvince(nProvinceID).isOccupied() || CFG.game.getProvince(nProvinceID).getCivID() != nCivID) {
            return false;
        }
        boolean bordersWithNeutralProvince = false;
        int i = 0;
        while (true) {
            if (i < CFG.game.getProvince(nProvinceID).getNeighboringProvincesSize()) {
                if (CFG.game.getProvince(CFG.game.getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() == 0 && CFG.game.getProvince(CFG.game.getProvince(nProvinceID).getNeighboringProvinces(i)).getWasteland() < 0) {
                    bordersWithNeutralProvince = true;
                    break;
                }
                i++;
            } else {
                break;
            }
        }
        if (bordersWithNeutralProvince && CFG.game.getProvince(nProvinceID).getCore().getNumOfOwnership(nCivID) >= 10) {
            return true;
        }
        return false;
    }

    public static boolean uncivilizedCanMigrate(int nProvinceID, int nCivID) {
        if (nProvinceID < 0 || CFG.game.getProvince(nProvinceID).getSeaProvince() || CFG.game.getProvince(nProvinceID).getWasteland() >= 0 || CFG.game.getProvince(nProvinceID).getCivID() > 0) {
            return false;
        }
        for (int i = 0; i < CFG.game.getProvince(nProvinceID).getNeighboringProvincesSize(); i++) {
            if (CFG.game.getProvince(CFG.game.getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() == nCivID) {
                return true;
            }
        }
        return false;
    }

    public static boolean uncivilizedCanFishing(int nProvinceID) {
        if (nProvinceID >= 0) {
            return CFG.game.getProvince(nProvinceID).getSeaProvince();
        }
        return false;
    }

    public static boolean provinceBordersWithProvince_LandByLand(int iA, int iB_bordersWithA) {
        for (int i = 0; i < CFG.game.getProvince(iA).getNeighboringProvincesSize(); i++) {
            if (CFG.game.getProvince(iA).getNeighboringProvinces(i) == iB_bordersWithA) {
                return true;
            }
        }
        return false;
    }

    public final void updateSetActiveProvinceID_ExtraAction() {
        SetActiveProvince_ExtraAction r1;
        try {
            if (CFG.menuManager.getInGameView()) {
                this.setActiveProvince_ExtraAction = new SetActiveProvince_ExtraAction() {
                    public void extraAction(int newActiveProvinceID) {
                        CFG.chooseProvinceMode_BEFORE = CFG.chooseProvinceMode;
                        CFG.activeProvince_BEFORE = Game.this.getActiveProvinceID();
                        if (newActiveProvinceID >= 0) {
                            if (CFG.chooseProvinceMode) {
                                Game.this.resetChooseProvinceData();
                            } else if (CFG.game.getProvince(newActiveProvinceID).getCivID() != CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                                CFG.menuManager.setVisible_InGame_ProvinceAction_ThrowNuclearWarhead(CFG.SANDBOX_MODE || CFG.FREEPLAY_MODE || CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getNuclearWeapons() > 0);
                                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                                CFG.menuManager.setVisible_InGame_ProvinceRecruit(false);
                                CFG.menuManager.setVisible_InGame_ProvinceRecruitInstantly(false);
                                CFG.menuManager.setVisible_InGame_ProvinceRegroupArmy(false);
                                CFG.menuManager.setVisible_InGame_ProvinceDisband(false);
                            } else if (CFG.menuManager.getInGame_ProvinceRecruit_Visible()) {
                                if (newActiveProvinceID != Game.this.iActiveProvince) {
                                    CFG.menuManager.setVisible_InGame_ProvinceRecruit(false);
                                    Game.this.checkProvinceActionMenu();
                                }
                            } else if (CFG.menuManager.getInGame_ProvinceRecruitInstantly_Visible()) {
                                if (newActiveProvinceID != Game.this.iActiveProvince) {
                                    CFG.menuManager.setVisible_InGame_ProvinceRecruitInstantly(false);
                                    Game.this.checkProvinceActionMenu();
                                }
                            } else if (CFG.menuManager.getInGame_ProvinceDisband_Visible()) {
                                if (newActiveProvinceID != Game.this.iActiveProvince) {
                                    CFG.menuManager.setVisible_InGame_ProvinceDisband(false);
                                    Game.this.checkProvinceActionMenu();
                                }
                            } else if (!CFG.menuManager.getInGame_ProvinceRegroupArmy_Visible()) {
                                Game.this.checkProvinceActionMenu();
                            } else if (newActiveProvinceID != Game.this.iActiveProvince) {
                                CFG.menuManager.setVisible_InGame_ProvinceRegroupArmy(false);
                                Game.this.checkProvinceActionMenu();
                            }
                        }
                        Game.this.updateProvinceNameWidth(newActiveProvinceID);
                    }
                };
                updateProvinceNameWidth(getActiveProvinceID());
                return;
            }
            if (CFG.menuManager.getInCreateScenario_Civilizations()) {
                r1 = new SetActiveProvince_ExtraAction() {
                    public void extraAction(int newActiveProvinceID) {
                        if (Game.this.getActiveProvinceID() != newActiveProvinceID) {
                            if (Game.this.getActiveProvinceID() >= 0 && Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID() > 0) {
                                Game.this.disableDrawCivilizationRegions(Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID());
                            }
                            if (newActiveProvinceID >= 0 && Game.this.getProvince(newActiveProvinceID).getCivID() > 0) {
                                Game.this.enableDrawCivilizationRegions(Game.this.getProvince(newActiveProvinceID).getCivID(), 0);
                            }
                        }
                    }
                };
            } else {
                r1 = CFG.menuManager.getInSelectAvailableCivilizations() ? new SetActiveProvince_ExtraAction() {
                    public void extraAction(int newActiveProvinceID) {
                        if (Game.this.getActiveProvinceID() != newActiveProvinceID) {
                            if (Game.this.getActiveProvinceID() >= 0 && Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID() > 0) {
                                Game.this.disableDrawCivilizationRegions(Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID());
                            }
                            if (newActiveProvinceID >= 0 && Game.this.getProvince(newActiveProvinceID).getCivID() > 0 && Game.this.getCiv(Game.this.getProvince(newActiveProvinceID).getCivID()).getIsAvailable()) {
                                Game.this.enableDrawCivilizationRegions(Game.this.getProvince(newActiveProvinceID).getCivID(), 0);
                            }
                        }
                    }
                } : CFG.menuManager.getInManageDiplomacy() ? new SetActiveProvince_ExtraAction() {
                    public void extraAction(int newActiveProvinceID) {
                        if (Game.this.getActiveProvinceID() != newActiveProvinceID) {
                            if (Game.this.getActiveProvinceID() >= 0 && Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID() > 0) {
                                Game.this.disableDrawCivilizationRegions(Game.this.getProvince(Game.this.getActiveProvinceID()).getCivID());
                            }
                            if (newActiveProvinceID >= 0 && Game.this.getProvince(newActiveProvinceID).getCivID() > 0 && Game.this.getCiv(Game.this.getProvince(newActiveProvinceID).getCivID()).getIsAvailable()) {
                                Game.this.enableDrawCivilizationRegions(Game.this.getProvince(newActiveProvinceID).getCivID(), 0);
                            }
                        }
                    }
                } : new SetActiveProvince_ExtraAction() {
                    public void extraAction(int newActiveProvinceID) {
                    }
                };
            }
            this.setActiveProvince_ExtraAction = r1;
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (NullPointerException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
        }
    }

    public final void randomPlayerCivilizations(int nPlayerID) {
        Random oR = new Random();
        while (true) {
            int nPlayerCivID = oR.nextInt(this.gameScenarios.getNumOfCivs(this.scenarioID)) + 1;
            if (getCiv(nPlayerCivID).getNumOfProvinces() != 0 && !getCiv(nPlayerCivID).getControlledByPlayer()) {
                getPlayer(nPlayerID).setCivID(nPlayerCivID);
                getCiv(getPlayer(nPlayerID).getCivID()).setControlledByPlayer(true);
                return;
            }
        }
    }

    public final void loadProvinces() {
        for (int i = 0; i < CFG.map.getMapNumOfProvinces(CFG.map.getActiveMapID()); i++) {
            loadProvince(i);
        }
        updateProvincesSize();
    }

    public final void loadProvince(int i) {
        try {
            this.lProvinces.add(new Province(i, (Province_GameData2) CFG.deserialize(Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).readBytes())));
        } catch (ClassNotFoundException e) {
            if (CFG.LOGS) {
                CFG.exceptionStack(e);
            }
        } catch (IOException e2) {
            build_LoadProvince(i);
            if (CFG.LOGS) {
                CFG.exceptionStack(e2);
            }
        } catch (GdxRuntimeException e3) {
            build_LoadProvince(i);
            if (CFG.LOGS) {
                CFG.exceptionStack(e3);
            }
        }
    }

    public final void build_LoadProvince(int i) {
        String[] tempSplit = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_UPDATE_PATH + i).readString().split(";");
        String[] tempX = tempSplit[0].split(",");
        String[] tempY = tempSplit[1].split(",");
        ArrayList<Short> tempPointsX = new ArrayList<>();
        ArrayList<Short> tempPointsY = new ArrayList<>();
        for (int j = 0; j < tempX.length; j++) {
            tempPointsX.add(Short.valueOf((short) Integer.parseInt(tempX[j])));
            tempPointsY.add(Short.valueOf((short) Integer.parseInt(tempY[j])));
        }
        this.lProvinces.add(new Province(i, new Province_GameData2(-1, tempPointsX, tempPointsY, (List<Province_Border_GameData>) null, new ArrayList(), new ArrayList())));
        saveProvince_Info_GameData(i);
        buildGameProvinceData(i);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v27, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v0, resolved type: age.of.civilizations2.jakowski.lukasz.Province_GameData2} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void saveProvince_Info_GameData(int r12) {
        /*
            r11 = this;
            age.of.civilizations2.jakowski.lukasz.Province_GameData2 r7 = new age.of.civilizations2.jakowski.lukasz.Province_GameData2
            r7.<init>()
            com.badlogic.gdx.Files r8 = com.badlogic.gdx.Gdx.files     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            r9.<init>()     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.String r10 = "map/"
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            age.of.civilizations2.jakowski.lukasz.Map r10 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.String r10 = r10.getFile_ActiveMap_Path()     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.String r10 = "data/provinces/"
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.StringBuilder r9 = r9.append(r12)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.String r9 = r9.toString()     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            com.badlogic.gdx.files.FileHandle r3 = r8.internal(r9)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            byte[] r8 = r3.readBytes()     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            java.lang.Object r8 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r8)     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            r0 = r8
            age.of.civilizations2.jakowski.lukasz.Province_GameData2 r0 = (age.of.civilizations2.jakowski.lukasz.Province_GameData2) r0     // Catch:{ ClassNotFoundException -> 0x00b6, IOException -> 0x00c0, GdxRuntimeException -> 0x00ca }
            r7 = r0
        L_0x003a:
            age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3 r6 = new age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3
            r6.<init>()
            age.of.civilizations2.jakowski.lukasz.Province r8 = r11.getProvince(r12)
            float r8 = r8.getGrowthRate_Population()
            r6.fGrowthRate = r8
            age.of.civilizations2.jakowski.lukasz.TerrainTypesManager r8 = age.of.civilizations2.jakowski.lukasz.CFG.terrainTypesManager
            age.of.civilizations2.jakowski.lukasz.Province r9 = r11.getProvince(r12)
            int r9 = r9.getTerrainTypeID()
            java.lang.String r8 = r8.getTag(r9)
            r6.sTerrainTAG = r8
            age.of.civilizations2.jakowski.lukasz.Province r8 = r11.getProvince(r12)
            int r8 = r8.getContinent()
            r6.iContinentID = r8
            age.of.civilizations2.jakowski.lukasz.Province r8 = r11.getProvince(r12)
            int r8 = r8.getRegion()
            r6.iRegionID = r8
            if (r7 == 0) goto L_0x00d4
            age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3 r8 = r7.provinceInfo
            int r8 = r8.iShiftX
            r6.iShiftX = r8
            age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3 r8 = r7.provinceInfo
            int r8 = r8.iShiftY
            r6.iShiftY = r8
        L_0x007b:
            r7.provinceInfo = r6
            r5 = 0
            com.badlogic.gdx.Files r8 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x00f2 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x00f2 }
            r9.<init>()     // Catch:{ IOException -> 0x00f2 }
            java.lang.String r10 = "map/"
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ IOException -> 0x00f2 }
            age.of.civilizations2.jakowski.lukasz.Map r10 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x00f2 }
            java.lang.String r10 = r10.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x00f2 }
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ IOException -> 0x00f2 }
            java.lang.String r10 = "data/provinces/"
            java.lang.StringBuilder r9 = r9.append(r10)     // Catch:{ IOException -> 0x00f2 }
            java.lang.StringBuilder r9 = r9.append(r12)     // Catch:{ IOException -> 0x00f2 }
            java.lang.String r9 = r9.toString()     // Catch:{ IOException -> 0x00f2 }
            com.badlogic.gdx.files.FileHandle r4 = r8.local(r9)     // Catch:{ IOException -> 0x00f2 }
            byte[] r8 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r7)     // Catch:{ IOException -> 0x00f2 }
            r9 = 0
            r4.writeBytes(r8, r9)     // Catch:{ IOException -> 0x00f2 }
            if (r5 == 0) goto L_0x00b4
            r5.close()     // Catch:{ Exception -> 0x00e9 }
        L_0x00b4:
            r6 = 0
            return
        L_0x00b6:
            r1 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r8 == 0) goto L_0x003a
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x003a
        L_0x00c0:
            r1 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r8 == 0) goto L_0x003a
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x003a
        L_0x00ca:
            r2 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r8 == 0) goto L_0x003a
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)
            goto L_0x003a
        L_0x00d4:
            age.of.civilizations2.jakowski.lukasz.Province r8 = r11.getProvince(r12)
            int r8 = r8.getShiftX()
            r6.iShiftX = r8
            age.of.civilizations2.jakowski.lukasz.Province r8 = r11.getProvince(r12)
            int r8 = r8.getShiftY()
            r6.iShiftY = r8
            goto L_0x007b
        L_0x00e9:
            r2 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r8 == 0) goto L_0x00b4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)
            goto L_0x00b4
        L_0x00f2:
            r2 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0109 }
            if (r8 == 0) goto L_0x00fa
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)     // Catch:{ all -> 0x0109 }
        L_0x00fa:
            if (r5 == 0) goto L_0x00b4
            r5.close()     // Catch:{ Exception -> 0x0100 }
            goto L_0x00b4
        L_0x0100:
            r2 = move-exception
            boolean r8 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r8 == 0) goto L_0x00b4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)
            goto L_0x00b4
        L_0x0109:
            r8 = move-exception
            if (r5 == 0) goto L_0x010f
            r5.close()     // Catch:{ Exception -> 0x0110 }
        L_0x010f:
            throw r8
        L_0x0110:
            r2 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x010f
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)
            goto L_0x010f
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.saveProvince_Info_GameData(int):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v28, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: age.of.civilizations2.jakowski.lukasz.Province_GameData2} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void saveProvince_Info_GameData_SHIFTXY(int r16) {
        /*
            r15 = this;
            age.of.civilizations2.jakowski.lukasz.Province_GameData2 r11 = new age.of.civilizations2.jakowski.lukasz.Province_GameData2
            r11.<init>()
            com.badlogic.gdx.Files r12 = com.badlogic.gdx.Gdx.files     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            r13.<init>()     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.String r14 = "map/"
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.String r14 = r14.getFile_ActiveMap_Path()     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.String r14 = "data/provinces/"
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            r0 = r16
            java.lang.StringBuilder r13 = r13.append(r0)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.String r13 = r13.toString()     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            com.badlogic.gdx.files.FileHandle r7 = r12.internal(r13)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            byte[] r12 = r7.readBytes()     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            java.lang.Object r12 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r12)     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            r0 = r12
            age.of.civilizations2.jakowski.lukasz.Province_GameData2 r0 = (age.of.civilizations2.jakowski.lukasz.Province_GameData2) r0     // Catch:{ ClassNotFoundException -> 0x00f4, IOException -> 0x00fe, GdxRuntimeException -> 0x0108 }
            r11 = r0
        L_0x003c:
            age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3 r10 = new age.of.civilizations2.jakowski.lukasz.Province_Info_GameData3
            r10.<init>()
            age.of.civilizations2.jakowski.lukasz.Province r12 = r15.getProvince(r16)
            float r12 = r12.getGrowthRate_Population()
            r10.fGrowthRate = r12
            age.of.civilizations2.jakowski.lukasz.TerrainTypesManager r12 = age.of.civilizations2.jakowski.lukasz.CFG.terrainTypesManager
            age.of.civilizations2.jakowski.lukasz.Province r13 = r15.getProvince(r16)
            int r13 = r13.getTerrainTypeID()
            java.lang.String r12 = r12.getTag(r13)
            r10.sTerrainTAG = r12
            age.of.civilizations2.jakowski.lukasz.Province r12 = r15.getProvince(r16)
            int r12 = r12.getContinent()
            r10.iContinentID = r12
            age.of.civilizations2.jakowski.lukasz.Province r12 = r15.getProvince(r16)
            int r12 = r12.getRegion()
            r10.iRegionID = r12
            age.of.civilizations2.jakowski.lukasz.Province r12 = r15.getProvince(r16)
            int r12 = r12.getShiftX()
            age.of.civilizations2.jakowski.lukasz.Map r13 = age.of.civilizations2.jakowski.lukasz.CFG.map
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map
            int r14 = r14.getActiveMapID()
            int r13 = r13.getMapDefaultScale(r14)
            int r12 = r12 * r13
            age.of.civilizations2.jakowski.lukasz.Map r13 = age.of.civilizations2.jakowski.lukasz.CFG.map
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map
            int r14 = r14.getActiveMapID()
            int r13 = r13.getMapScale(r14)
            int r12 = r12 / r13
            r10.iShiftX = r12
            age.of.civilizations2.jakowski.lukasz.Province r12 = r15.getProvince(r16)
            int r12 = r12.getShiftY()
            age.of.civilizations2.jakowski.lukasz.Map r13 = age.of.civilizations2.jakowski.lukasz.CFG.map
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map
            int r14 = r14.getActiveMapID()
            int r13 = r13.getMapDefaultScale(r14)
            int r12 = r12 * r13
            age.of.civilizations2.jakowski.lukasz.Map r13 = age.of.civilizations2.jakowski.lukasz.CFG.map
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map
            int r14 = r14.getActiveMapID()
            int r13 = r13.getMapScale(r14)
            int r12 = r12 / r13
            r10.iShiftY = r12
            r11.provinceInfo = r10
            r9 = 0
            com.badlogic.gdx.Files r12 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x011b }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x011b }
            r13.<init>()     // Catch:{ IOException -> 0x011b }
            java.lang.String r14 = "map/"
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ IOException -> 0x011b }
            age.of.civilizations2.jakowski.lukasz.Map r14 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x011b }
            java.lang.String r14 = r14.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x011b }
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ IOException -> 0x011b }
            java.lang.String r14 = "data/provinces/"
            java.lang.StringBuilder r13 = r13.append(r14)     // Catch:{ IOException -> 0x011b }
            r0 = r16
            java.lang.StringBuilder r13 = r13.append(r0)     // Catch:{ IOException -> 0x011b }
            java.lang.String r13 = r13.toString()     // Catch:{ IOException -> 0x011b }
            com.badlogic.gdx.files.FileHandle r8 = r12.local(r13)     // Catch:{ IOException -> 0x011b }
            byte[] r12 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r10)     // Catch:{ IOException -> 0x011b }
            r13 = 0
            r8.writeBytes(r12, r13)     // Catch:{ IOException -> 0x011b }
            if (r9 == 0) goto L_0x00f2
            r9.close()     // Catch:{ Exception -> 0x0112 }
        L_0x00f2:
            r10 = 0
            return
        L_0x00f4:
            r1 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r12 == 0) goto L_0x003c
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x003c
        L_0x00fe:
            r2 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r12 == 0) goto L_0x003c
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)
            goto L_0x003c
        L_0x0108:
            r3 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r12 == 0) goto L_0x003c
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x003c
        L_0x0112:
            r6 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r12 == 0) goto L_0x00f2
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r6)
            goto L_0x00f2
        L_0x011b:
            r4 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0140 }
            if (r12 == 0) goto L_0x0123
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4)     // Catch:{ all -> 0x0140 }
        L_0x0123:
            if (r9 == 0) goto L_0x0128
            r9.close()     // Catch:{ Exception -> 0x0137 }
        L_0x0128:
            if (r9 == 0) goto L_0x00f2
            r9.close()     // Catch:{ Exception -> 0x012e }
            goto L_0x00f2
        L_0x012e:
            r6 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r12 == 0) goto L_0x00f2
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r6)
            goto L_0x00f2
        L_0x0137:
            r5 = move-exception
            boolean r12 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0140 }
            if (r12 == 0) goto L_0x0128
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r5)     // Catch:{ all -> 0x0140 }
            goto L_0x0128
        L_0x0140:
            r12 = move-exception
            if (r9 == 0) goto L_0x0146
            r9.close()     // Catch:{ Exception -> 0x0147 }
        L_0x0146:
            throw r12
        L_0x0147:
            r6 = move-exception
            boolean r13 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r13 == 0) goto L_0x0146
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r6)
            goto L_0x0146
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.saveProvince_Info_GameData_SHIFTXY(int):void");
    }

    public final void checkLandBySeaProvincesBorders() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (!getProvince(i).getSeaProvince()) {
                getProvince(i).checkLandBySeaProvinceBorders();
            }
        }
    }

    public final void checkSeaBySeaProvincesBorders() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            getProvince(i).checkSeaBySeaProvinceBorders();
        }
    }

    public final void buildProvinceBorder() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (getProvince(i).getSeaProvince()) {
                for (int j = 0; j < getProvince(i).getProvinceBordersSeaBySeaSize(); j++) {
                    getProvince(i).getProvinceBordersSeaBySea().get(j).updateDrawProvinceBorderSeaBySea();
                }
            } else {
                for (int j2 = 0; j2 < getProvince(i).getProvinceBordersLandByLandSize(); j2++) {
                    getProvince(i).getProvinceBordersLandByLand().get(j2).updateDrawProvinceBorder_Inner(i);
                }
            }
        }
    }

    public final void buildDrawArmy() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            getProvince(i).updateDrawArmy();
        }
    }

    public final void buildDrawArmy_ShowIDs() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            getProvince(i).updateDrawArmy_ShowsIDs();
            getProvince(i).getArmy_Obj(0).updateArmyWidth("" + i);
        }
    }

    public final void updateProvincesSize() {
        this.iProvincesSize = this.lProvinces.size();
    }

    public final void disposeMapData() {
        setActiveProvinceID(-1);
        clearProvincesInView();
        for (int i = 0; i < getProvincesSize(); i++) {
            getProvince(i).disposeProvinceBG();
            for (int j = 0; j < getProvince(i).getWonderSize(); j++) {
                getProvince(i).getWonder(j).dispose();
            }
        }
        this.lRegions.clear();
        this.iRegionsSize = 0;
        this.lProvinces = null;
        this.lProvinces = new ArrayList();
        this.iProvincesSize = 0;
        this.scenarioID = -1;
        this.gameScenarios.disposeScenarios();
        disposeCivilizations();
    }

    public final void loadProvinceTextures() {
        for (int i = 0; i < this.iProvincesSize; i++) {
            getProvince(i).loadProvinceBG();
        }
    }

    public final void loadProvinceTexture(int i) {
        try {
            getProvince(i).loadProvinceBG();
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void loadProvinceNames_ALL() {
        try {
            String[] sNames = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "province_names/names").readString().split("\n");
            int iSize = sNames.length;
            for (int i = 0; i < iSize; i++) {
                if (sNames[i].length() < 2) {
                    getProvince(i).setName("");
                } else {
                    getProvince(i).setName(sNames[i]);
                }
            }
            for (int i2 = sNames.length; i2 < this.iProvincesSize; i2++) {
                getProvince(i2).setName("");
            }
        } catch (GdxRuntimeException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void generateProvincesNames() {
        String[] sNames = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "province_names/prov_names").readString().split("\n");
        int iSize = sNames.length;
        for (int i = 0; i < iSize; i++) {
            if (sNames[i].length() > 1) {
                Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_PROVINCE_NAMES + i).writeString(sNames[i], false);
            }
        }
    }

    public final void buildBasinsOfSeaProvinces() {
        for (int i = 0; i < getProvincesSize(); i++) {
            getProvince(i).setBasin(-1);
        }
        CFG.map.iNumOfBasins = 0;
        int currBasin = 0;
        ArrayList<Integer> recentlyAdded = new ArrayList<>();
        ArrayList currProvinces = new ArrayList();
        for (int p = 0; p < getProvincesSize(); p++) {
            if (getProvince(p).getSeaProvince() && getProvince(p).getBasinID() < 0) {
                getProvince(p).setBasin(currBasin);
                recentlyAdded.add(Integer.valueOf(p));
                while (recentlyAdded.size() > 0) {
                    currProvinces.clear();
                    for (int a = recentlyAdded.size() - 1; a >= 0; a--) {
                        boolean wasntAdded = true;
                        int j = currProvinces.size() - 1;
                        while (true) {
                            if (j >= 0) {
                                if (currProvinces.get(j) == recentlyAdded.get(a)) {
                                    wasntAdded = false;
                                    break;
                                }
                                j--;
                            } else {
                                break;
                            }
                        }
                        if (wasntAdded) {
                            currProvinces.add(recentlyAdded.get(a));
                        }
                    }
                    recentlyAdded.clear();
                    for (int a2 = currProvinces.size() - 1; a2 >= 0; a2--) {
                        for (int i2 = 0; i2 < CFG.game.getProvince(((Integer) currProvinces.get(a2)).intValue()).getNeighboringProvincesSize(); i2++) {
                            if (CFG.game.getProvince(CFG.game.getProvince(((Integer) currProvinces.get(a2)).intValue()).getNeighboringProvinces(i2)).getSeaProvince() && CFG.game.getProvince(CFG.game.getProvince(((Integer) currProvinces.get(a2)).intValue()).getNeighboringProvinces(i2)).getBasinID() < 0) {
                                CFG.game.getProvince(CFG.game.getProvince(((Integer) currProvinces.get(a2)).intValue()).getNeighboringProvinces(i2)).setBasin(currBasin);
                                recentlyAdded.add(Integer.valueOf(CFG.game.getProvince(((Integer) currProvinces.get(a2)).intValue()).getNeighboringProvinces(i2)));
                            }
                        }
                    }
                }
                currBasin++;
                recentlyAdded.clear();
                currProvinces.clear();
            }
        }
        CFG.map.iNumOfBasins = currBasin;
    }

    public final void loadRegions() {
        this.lRegions.clear();
        this.iRegionsSize = 0;
        String[] sAllRegions = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/regions").readString().split("\n");
        ArrayList<Boolean> tempAdded = new ArrayList<>();
        for (int i = 0; i < CFG.game.getProvincesSize(); i++) {
            tempAdded.add(false);
        }
        for (int i2 = 0; i2 < sAllRegions.length; i2++) {
            String[] sRegion = sAllRegions[i2].split(";");
            Region newRegion = new Region();
            for (String parseInt : sRegion) {
                newRegion.addProvince(Integer.parseInt(parseInt));
            }
            for (int j = 0; j < sRegion.length; j++) {
                tempAdded.set(newRegion.getProvince(j), true);
            }
            this.lRegions.add(newRegion);
            this.lRegions.get(i2).buildRegionBounds();
        }
        Region tempRegionOfProvincesWithoutIDs = new Region();
        for (int i22 = 0; i22 < CFG.game.getProvincesSize(); i22++) {
            if (!tempAdded.get(i22).booleanValue()) {
                tempRegionOfProvincesWithoutIDs.addProvince(i22);
            }
        }
        if (tempRegionOfProvincesWithoutIDs.getProvincesSize2() > 0) {
            this.lRegions.add(tempRegionOfProvincesWithoutIDs);
            this.lRegions.get(this.lRegions.size() - 1).buildRegionBounds();
        }
        this.iRegionsSize = this.lRegions.size();
    }

    public final void initGameScenarios() {
        this.gameScenarios = new Game_Scenarios();
        this.gameScenarios.loadGame_Scenarios(true);
    }

    public final void initGameCities() {
        this.gameCities = new Game_Cities();
    }

    public final void initGameMountains() {
        this.gameMountains = new Game_Mountains();
        this.gameWonders = new Game_Wonders();
    }

    public final void initPlayers() {
        if (this.lPlayers != null) {
            this.lPlayers.clear();
            this.iPlayersSize = 0;
        }
        this.lPlayers = new ArrayList();
        addPlayer();
        CFG.menuManager.rebuildCivilizations_Info_Players();
    }

    public final void initPlayers(List<Save_Player_GameData> savedPlayers) {
        if (this.lPlayers != null) {
            this.lPlayers.clear();
            this.iPlayersSize = 0;
        }
        this.lPlayers = new ArrayList();
        for (int i = 0; i < savedPlayers.size(); i++) {
            this.lPlayers.add(new Player(savedPlayers.get(i)));
        }
        this.iPlayersSize = this.lPlayers.size();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:109:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00f4, code lost:
        r8 = new age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_GameData();
        r8.addData(build_PreDefinedCivsBorders_CivData(r13));
        r6 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:?, code lost:
        com.badlogic.gdx.Gdx.files.local(age.of.civilizations2.jakowski.lukasz.CFG.FILE_MAP_PATH + age.of.civilizations2.jakowski.lukasz.CFG.map.getFile_ActiveMap_Path() + "data/predefined_borders/" + getCiv(r13).getCivTag()).writeBytes(age.of.civilizations2.jakowski.lukasz.CFG.serialize(r8), false);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x013a, code lost:
        if (r6 == null) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:?, code lost:
        r6.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x0141, code lost:
        r1 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x0144, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x0146;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x0146, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x0187, code lost:
        r1 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x018a, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x018c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x018c, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x018f, code lost:
        if (r6 != null) goto L_0x0191;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:?, code lost:
        r6.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x0196, code lost:
        r1 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x0199, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x019b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x019b, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x01a0, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x01a1, code lost:
        if (r6 != null) goto L_0x01a3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:?, code lost:
        r6.close();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x01a6, code lost:
        throw r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01a7, code lost:
        r1 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x01aa, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x01ac;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01ac, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void build_PreDefinedCivsBorders(int r13) {
        /*
            r12 = this;
            java.lang.String r9 = "ran"
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r13)
            java.lang.String r10 = r10.getCivTag()
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x001d
            age.of.civilizations2.jakowski.lukasz.Civilization r9 = r12.getCiv(r13)
            int r9 = r9.getNumOfProvinces()
            r10 = 2
            if (r9 >= r10) goto L_0x001e
        L_0x001d:
            return
        L_0x001e:
            com.badlogic.gdx.Files r9 = com.badlogic.gdx.Gdx.files     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            r10.<init>()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.String r11 = "map/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            age.of.civilizations2.jakowski.lukasz.Map r11 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.String r11 = r11.getFile_ActiveMap_Path()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.String r11 = "data/predefined_borders/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r12.getCiv(r13)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.String r11 = r11.getCivTag()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.String r10 = r10.toString()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            com.badlogic.gdx.files.FileHandle r2 = r9.internal(r10)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            byte[] r9 = r2.readBytes()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            java.lang.Object r8 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r9)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_GameData r8 = (age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_GameData) r8     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            r4 = 0
        L_0x005a:
            int r9 = r8.getDataSize()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r4 >= r9) goto L_0x009a
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_Data_GameData r9 = r8.getData(r4)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            int r9 = r9.getProvincesSize()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r12.getCiv(r13)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            int r10 = r10.getNumOfProvinces()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r9 == r10) goto L_0x0075
        L_0x0072:
            int r4 = r4 + 1
            goto L_0x005a
        L_0x0075:
            r7 = 1
            r5 = 0
        L_0x0077:
            age.of.civilizations2.jakowski.lukasz.Civilization r9 = r12.getCiv(r13)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            int r9 = r9.getNumOfUnits()     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r5 >= r9) goto L_0x0097
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_Data_GameData r9 = r8.getData(r4)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r12.getCiv(r13)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            int r10 = r10.getProvinceID(r5)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            boolean r9 = r9.hasProvinceID(r10)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r9 == 0) goto L_0x0096
            int r5 = r5 + 1
            goto L_0x0077
        L_0x0096:
            r7 = 0
        L_0x0097:
            if (r7 != 0) goto L_0x001d
            goto L_0x0072
        L_0x009a:
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_Data_GameData r9 = r12.build_PreDefinedCivsBorders_CivData(r13)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            r8.addData(r9)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            r6 = 0
            com.badlogic.gdx.Files r9 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x014b }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x014b }
            r10.<init>()     // Catch:{ IOException -> 0x014b }
            java.lang.String r11 = "map/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x014b }
            age.of.civilizations2.jakowski.lukasz.Map r11 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x014b }
            java.lang.String r11 = r11.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x014b }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x014b }
            java.lang.String r11 = "data/predefined_borders/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x014b }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r12.getCiv(r13)     // Catch:{ IOException -> 0x014b }
            java.lang.String r11 = r11.getCivTag()     // Catch:{ IOException -> 0x014b }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x014b }
            java.lang.String r10 = r10.toString()     // Catch:{ IOException -> 0x014b }
            com.badlogic.gdx.files.FileHandle r3 = r9.local(r10)     // Catch:{ IOException -> 0x014b }
            byte[] r9 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r8)     // Catch:{ IOException -> 0x014b }
            r10 = 0
            r3.writeBytes(r9, r10)     // Catch:{ IOException -> 0x014b }
            if (r6 == 0) goto L_0x001d
            r6.close()     // Catch:{ Exception -> 0x00e2 }
            goto L_0x001d
        L_0x00e2:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r9 == 0) goto L_0x001d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            goto L_0x001d
        L_0x00ec:
            r0 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x00f4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r0)
        L_0x00f4:
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_GameData r8 = new age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_GameData
            r8.<init>()
            age.of.civilizations2.jakowski.lukasz.PreDefined_Borders_Data_GameData r9 = r12.build_PreDefinedCivsBorders_CivData(r13)
            r8.addData(r9)
            r6 = 0
            com.badlogic.gdx.Files r9 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x0187 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x0187 }
            r10.<init>()     // Catch:{ IOException -> 0x0187 }
            java.lang.String r11 = "map/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x0187 }
            age.of.civilizations2.jakowski.lukasz.Map r11 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x0187 }
            java.lang.String r11 = r11.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x0187 }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x0187 }
            java.lang.String r11 = "data/predefined_borders/"
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x0187 }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r12.getCiv(r13)     // Catch:{ IOException -> 0x0187 }
            java.lang.String r11 = r11.getCivTag()     // Catch:{ IOException -> 0x0187 }
            java.lang.StringBuilder r10 = r10.append(r11)     // Catch:{ IOException -> 0x0187 }
            java.lang.String r10 = r10.toString()     // Catch:{ IOException -> 0x0187 }
            com.badlogic.gdx.files.FileHandle r3 = r9.local(r10)     // Catch:{ IOException -> 0x0187 }
            byte[] r9 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r8)     // Catch:{ IOException -> 0x0187 }
            r10 = 0
            r3.writeBytes(r9, r10)     // Catch:{ IOException -> 0x0187 }
            if (r6 == 0) goto L_0x001d
            r6.close()     // Catch:{ Exception -> 0x0141 }
            goto L_0x001d
        L_0x0141:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x001d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x001d
        L_0x014b:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x016d }
            if (r9 == 0) goto L_0x0153
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)     // Catch:{ all -> 0x016d }
        L_0x0153:
            if (r6 == 0) goto L_0x001d
            r6.close()     // Catch:{ Exception -> 0x015a }
            goto L_0x001d
        L_0x015a:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r9 == 0) goto L_0x001d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            goto L_0x001d
        L_0x0164:
            r0 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x00f4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r0)
            goto L_0x00f4
        L_0x016d:
            r9 = move-exception
            if (r6 == 0) goto L_0x0173
            r6.close()     // Catch:{ Exception -> 0x017e }
        L_0x0173:
            throw r9     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
        L_0x0174:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x00f4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x00f4
        L_0x017e:
            r1 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            if (r10 == 0) goto L_0x0173
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)     // Catch:{ ClassNotFoundException -> 0x00ec, IOException -> 0x0164, GdxRuntimeException -> 0x0174 }
            goto L_0x0173
        L_0x0187:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x01a0 }
            if (r9 == 0) goto L_0x018f
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)     // Catch:{ all -> 0x01a0 }
        L_0x018f:
            if (r6 == 0) goto L_0x001d
            r6.close()     // Catch:{ Exception -> 0x0196 }
            goto L_0x001d
        L_0x0196:
            r1 = move-exception
            boolean r9 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r9 == 0) goto L_0x001d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x001d
        L_0x01a0:
            r9 = move-exception
            if (r6 == 0) goto L_0x01a6
            r6.close()     // Catch:{ Exception -> 0x01a7 }
        L_0x01a6:
            throw r9
        L_0x01a7:
            r1 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r10 == 0) goto L_0x01a6
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x01a6
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.build_PreDefinedCivsBorders(int):void");
    }

    public final PreDefined_Borders_Data_GameData build_PreDefinedCivsBorders_CivData(int nCivID) {
        PreDefined_Borders_Data_GameData tempBorders = new PreDefined_Borders_Data_GameData();
        tempBorders.setCapitalProvinceID(getCiv(nCivID).getCapitalProvinceID());
        for (int i = 0; i < getCiv(nCivID).getNumOfProvinces(); i++) {
            tempBorders.addProvinceID(getCiv(nCivID).getProvinceID(i));
        }
        return tempBorders;
    }

    public final void deleteSuggestedOwners() {
        List<String> tempL = CFG.getFileNames(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH);
        for (int i = 0; i < tempL.size(); i++) {
            Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH + tempL.get(i)).delete();
        }
    }

    public final void build_SuggestedOwners() {
        for (int u = 0; u < Game_Scenarios.SCENARIOS_SIZE; u++) {
            build_SuggestedOwners(u);
        }
        CFG.toast.setInView(CFG.langManager.get("Done") + " [" + Game_Scenarios.SCENARIOS_SIZE + "/" + Game_Scenarios.SCENARIOS_SIZE + "]");
    }

    public final void build_SuggestedOwners(int nScenarioID) {
        CFG.game.setScenarioID(nScenarioID);
        CFG.game.loadScenario(true);
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && !getCiv(i).getCivTag().equals(CFG.RANDOM_CIV_TAG) && CFG.ideologiesManager.REBELS_ID != CFG.ideologiesManager.getIdeologyID(getCiv(i).getCivTag())) {
                try {
                    String[] sRes = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH + getCiv(i).getCapitalProvinceID()).readString().split(";");
                    boolean bAdd = true;
                    boolean updateDate = false;
                    int j = 0;
                    while (true) {
                        if (j >= sRes.length) {
                            break;
                        } else if (!sRes[j].equals(getCiv(i).getCivTag())) {
                            j += 2;
                        } else {
                            bAdd = false;
                            if (Game_Calendar.currentYear < Integer.parseInt(sRes[j + 1])) {
                                updateDate = true;
                                sRes[j + 1] = "" + Game_Calendar.currentYear;
                            }
                        }
                    }
                    if (bAdd) {
                        FileHandle fileSaveSuggestedOwners = Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH + getCiv(i).getCapitalProvinceID());
                        fileSaveSuggestedOwners.writeString(sRes[0] + ";", false);
                        for (int k = 1; k < sRes.length; k++) {
                            fileSaveSuggestedOwners.writeString(sRes[k] + ";", true);
                        }
                        fileSaveSuggestedOwners.writeString(getCiv(i).getCivTag() + ";" + Game_Calendar.currentYear + ";", true);
                    } else if (updateDate) {
                        FileHandle fileSaveSuggestedOwners2 = Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH + getCiv(i).getCapitalProvinceID());
                        fileSaveSuggestedOwners2.writeString(sRes[0] + ";", false);
                        for (int k2 = 1; k2 < sRes.length; k2++) {
                            fileSaveSuggestedOwners2.writeString(sRes[k2] + ";", true);
                        }
                    }
                } catch (GdxRuntimeException e) {
                    Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_MAP_SUGGESTED_OWNERS_PATH + getCiv(i).getCapitalProvinceID()).writeString(getCiv(i).getCivTag() + ";" + Game_Calendar.currentYear + ";", false);
                }
            }
        }
        CFG.toast.setInView(CFG.langManager.get("Done") + " #" + CFG.langManager.get(CFG.game.getGameScenarios().getScenarioName(nScenarioID)), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE);
    }

    public final void loadScenario_RandomGame() {
        boolean z;
        disposeCivilizations_WithoutWasteland();
        this.lCivs = this.gameScenarios.loadCivilizations_RandomGame();
        this.iCivsSize = this.lCivs.size();
        this.iAvailableCivilizations = this.iCivsSize - 1;
        CFG.holyRomanEmpire_Manager.initHolyRomanEmpire();
        Random oR = new Random();
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() < 0) {
                CFG.gameNewGame.findRandomCapital(i, oR);
            }
        }
        for (int i2 = 0; i2 < getProvincesSize(); i2++) {
            if (!getProvince(i2).getSeaProvince()) {
                for (int j = 0; j < getProvince(i2).getProvinceBordersLandByLandSize(); j++) {
                    Province_Border province_Border = getProvince(i2).getProvinceBordersLandByLand().get(j);
                    if (getProvince(i2).getCivID() != getProvince(getProvince(i2).getProvinceBordersLandByLand().get(j).getWithProvinceID()).getCivID()) {
                        z = true;
                    } else {
                        z = false;
                    }
                    province_Border.setIsCivilizationBorder(z, i2);
                }
                if (getProvince(i2).getCivID() > 0) {
                    getCiv(getProvince(i2).getCivID()).addProvince_Just(i2);
                }
            }
        }
        initPlayers();
        getPlayer(0).setCivID(1);
        for (int i3 = 1; i3 < CFG.randomGameManager.getPlayersSize(); i3++) {
            addPlayer(i3 + 1);
        }
        CFG.province_Cores_GameData = new Province_Cores_GameData();
        getGameScenarios().buildProvincePopulationAndEconomy(false, false);
        getGameScenarios().buildDiplomacy();
        build_Leaders();
        buildCivilizationsRegions();
        buildCivilizationsRegions_TextOver();
        CFG.gameAction.buildRank_Score();
        CFG.menuManager.updateCreateNewGame_Top();
        CFG.disposeActiveCivFlag();
    }

    public final void loadSavedGame(int iLoadID) {
        FileHandle fileReadData;
        FileHandle fileReadData8;
        try {
            String[] tSplted = (CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_GAME_LIST) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_GAME_LIST)).readString().split(";");
            if (Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_1").exists() || Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_1").exists()) {
                loadSavedGame_NEW(iLoadID);
                return;
            }
            if (CFG.readLocalFiles()) {
                fileReadData = Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID]);
            } else {
                fileReadData = Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID]);
            }
            Save_GameData tempSavedGame = (Save_GameData) CFG.deserialize(fileReadData.readBytes());
            disposeCivilizations();
            CFG.FOG_OF_WAR = tempSavedGame.FOG_OF_WAR;
            CFG.SPECTATOR_MODE = tempSavedGame.SPECTATOR_MODE;
            CFG.DIFFICULTY = tempSavedGame.DIFFICULTY;
            CFG.SANDBOX_MODE = tempSavedGame.SANDBOX_MODE;
            CFG.FREEPLAY_MODE = tempSavedGame.FREEPLAY_MODE;
            Game_Calendar.LOSSESINWAR = tempSavedGame.LOSSESINWAR;
            Game_Calendar.SURRENDERLIMIT = tempSavedGame.SURRENDERLIMIT;
            Game_Calendar.POWERREBELS = tempSavedGame.POWERREBELS;
            CFG.MANPOWER_SYSTEM = tempSavedGame.MANPOWER;
            CFG.DISEASES = tempSavedGame.DISEASES;
            Game_Action.fTroopBreakthroughChance = tempSavedGame.fTroopBreakthroughChance;
            CFG.NO_LIBERITY = tempSavedGame.NO_LIBERITY;
            CFG.AI_CREATING_VASSALS = tempSavedGame.AI_CREATING_VASSALS;
            CFG.AI_CREATING_ALLIANCE = tempSavedGame.AI_CREATING_ALLIANCE;
            Game_Calendar.TURN_ID = tempSavedGame.iTurnID;
            Game_Calendar.TURNS_SINCE_LAST_WAR = tempSavedGame.TURNS_SINCE_LAST_WAR;
            Game_Calendar.currentDay = tempSavedGame.iDay;
            Game_Calendar.currentMonth = tempSavedGame.iMonth;
            Game_Calendar.currentYear = tempSavedGame.iYear;
            Game_Calendar.CURRENT_AGEID = CFG.gameAges.getAgeOfYear(Game_Calendar.currentYear);
            Game_Calendar.ENABLE_COLONIZATION = tempSavedGame.ENABLE_COLONIZATION;
            Game_Calendar.ENABLE_COLONIZATION_NEUTRAL_PROVINCES = tempSavedGame.ENABLE_COLONIZATION_NEUTRAL_PROVINCES;
            Game_Calendar.COLONIZATION_TECH_LEVEL = tempSavedGame.COLONIZATION_TECH_LEVEL;
            Game_Calendar.GAME_SPEED = tempSavedGame.GAME_SPEED;
            CFG.game.getGameScenarios().setScenario_StartingPopulation(tempSavedGame.STARTING_POPULATION);
            CFG.game.getGameScenarios().setScenario_StartingEconomy(tempSavedGame.STARTING_ECONOMY);
            CFG.game.getGameScenarios().setScenario_PopulationGrowthRate_Modifier(tempSavedGame.POPULATION_GROWTH_RATE_MODIFIER);
            CFG.game.getGameScenarios().setScenario_EconomyGrowthRate_Modifier(tempSavedGame.ECONOMY_GROWTH_RATE_MODIFIER);
            CFG.game.getGameScenarios().setScenario_DiseasesDeathRate_Modifier(tempSavedGame.DISEASES_DEATH_REATE_MODIFIER);
            VicotryManager.VICTORY_CONTROL_PROVINCES_PERC = tempSavedGame.VICTORY_CONTROL_PROVINCES_PERC;
            VicotryManager.VICTORY_LIMIT_OF_TURNS = tempSavedGame.VICTORY_LIMIT_OF_TURNS;
            VicotryManager.VICTORY_TECHNOLOGY = tempSavedGame.VICTORY_TECHNOLOGY;
            CFG.game.getGameScenarios().sActiveScenarioTag = tempSavedGame.sActiveScenarioTag;
            this.lCivs = this.gameScenarios.loadCivilizationsLoadGame(tempSavedGame.lCivsData);
            this.iCivsSize = this.lCivs.size();
            for (int i = 0; i < getCivsSize(); i++) {
                getCiv(i).buildRegroupLines_AfterLoading();
            }
            for (int i2 = 1; i2 < CFG.game.getCivsSize(); i2++) {
                CFG.game.getCiv(i2).buildDiplomacy(false);
            }
            for (int i3 = 0; i3 < tempSavedGame.lCivsDiploData.size(); i3++) {
                for (int j = 0; j < tempSavedGame.lCivsDiploData.get(i3).lNonAggressionPacts.size(); j++) {
                    CFG.game.getCiv(i3 + 1).setNonAggressionPact(tempSavedGame.lCivsDiploData.get(i3).lNonAggressionPacts.get(j).id, tempSavedGame.lCivsDiploData.get(i3).lNonAggressionPacts.get(j).iValue);
                }
                for (int j2 = 0; j2 < tempSavedGame.lCivsDiploData.get(i3).lDefensivePact.size(); j2++) {
                    CFG.game.getCiv(i3 + 1).setDefensivePact(tempSavedGame.lCivsDiploData.get(i3).lDefensivePact.get(j2).id, tempSavedGame.lCivsDiploData.get(i3).lDefensivePact.get(j2).iValue);
                }
                for (int j3 = 0; j3 < tempSavedGame.lCivsDiploData.get(i3).lGuarantee.size(); j3++) {
                    CFG.game.getCiv(i3 + 1).setGuarantee(tempSavedGame.lCivsDiploData.get(i3).lGuarantee.get(j3).id, tempSavedGame.lCivsDiploData.get(i3).lGuarantee.get(j3).iValue);
                }
                for (int j4 = 0; j4 < tempSavedGame.lCivsDiploData.get(i3).lMilitirayAccess.size(); j4++) {
                    CFG.game.getCiv(i3 + 1).setMilitaryAccess(tempSavedGame.lCivsDiploData.get(i3).lMilitirayAccess.get(j4).id, tempSavedGame.lCivsDiploData.get(i3).lMilitirayAccess.get(j4).iValue);
                }
                for (int j5 = 0; j5 < tempSavedGame.lCivsDiploData.get(i3).lTruce.size(); j5++) {
                    CFG.game.getCiv(i3 + 1).setTruce(tempSavedGame.lCivsDiploData.get(i3).lTruce.get(j5).id, tempSavedGame.lCivsDiploData.get(i3).lTruce.get(j5).iValue);
                }
            }
            for (int i4 = 0; i4 < tempSavedGame.lProvincesData.size(); i4++) {
                CFG.game.getProvince(i4).saveProvinceData = tempSavedGame.lProvincesData.get(i4);
            }
            for (int i5 = 0; i5 < CFG.game.getProvincesSize(); i5++) {
                if (CFG.game.getProvince(i5).getCivID() > 0) {
                    if (CFG.game.getProvince(i5).getSeaProvince()) {
                        CFG.game.getProvince(i5).setCivID(0, false);
                    } else {
                        CFG.game.getCiv(CFG.game.getProvince(i5).getCivID()).addProvince_Just(i5);
                    }
                }
            }
            CFG.eventsManager.eventsGD = tempSavedGame.eventsGameData;
            CFG.holyRomanEmpire_Manager.holyRomanEmpire = tempSavedGame.holyRomanEmpire_GameData;
            CFG.game.buildAlliances(tempSavedGame.lAlliances);
            CFG.game.initPlayers(tempSavedGame.lPlayers);
            CFG.game.buildCivilizationsRegions();
            CFG.game.buildWastelandLevels();
            for (int i6 = 0; i6 < CFG.game.getProvincesSize(); i6++) {
                CFG.game.getProvince(i6).updateProvinceBorder();
            }
            for (int i7 = 0; i7 < CFG.game.getPlayersSize(); i7++) {
                CFG.game.getPlayer(i7).loadPlayersFlag();
            }
            this.lWars = new ArrayList();
            for (int i8 = 0; i8 < tempSavedGame.lWars.size(); i8++) {
                this.lWars.add(tempSavedGame.lWars.get(i8));
            }
            this.iWarsSize = this.lWars.size();
            this.lPeaceTreaties = new ArrayList();
            for (int i9 = 0; i9 < tempSavedGame.lPeaceTreaties.size(); i9++) {
                this.lPeaceTreaties.add(tempSavedGame.lPeaceTreaties.get(i9));
            }
            CFG.plagueManager.lPlagues_INGAME.clear();
            CFG.plagueManager.lPlagues_INGAME = new ArrayList();
            for (int i10 = 0; i10 < tempSavedGame.lPlagues_INGAME.size(); i10++) {
                CFG.plagueManager.lPlagues_INGAME.add(tempSavedGame.lPlagues_INGAME.get(i10));
            }
            CFG.game_NextTurnUpdate.buildLevelsOfCities();
            CFG.gameAction.buildRank_Score();
            SaveManager.saveTag = tSplted[iLoadID];
            CFG.timelapseManager.timelapseOwnersGameData = (Timelapse_Owners_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_OWNERS) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_OWNERS)).readBytes());
            CFG.timelapseManager.timelapseGameData = (Timelapse_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE)).readBytes());
            CFG.timelapseManager.timelapseStatsGD = (Timelapse_Stats_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_STATS) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_STATS)).readBytes());
            CFG.timelapseManager.timelapseTurnChanges = new Timelapse_TurnChanges_GameData();
            CFG.timelapseManager.timelapseTurnChanges.lTurnChanges.add(new ArrayList());
            try {
                if (CFG.readLocalFiles()) {
                    fileReadData8 = Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2");
                } else {
                    fileReadData8 = Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2");
                }
                Game_Calendar.AI_AGGRESSIVNESS = ((Save_GameData2) CFG.deserialize(fileReadData8.readBytes())).AI_AGGRESSIVNESS;
            } catch (GdxRuntimeException | IOException | ClassNotFoundException | IndexOutOfBoundsException e) {
            }
        } catch (GdxRuntimeException e2) {
            CFG.exceptionStack(e2);
        } catch (ClassNotFoundException e3) {
            CFG.exceptionStack(e3);
        } catch (IOException e4) {
            CFG.exceptionStack(e4);
        } catch (IndexOutOfBoundsException e5) {
            CFG.exceptionStack(e5);
        }
    }

    public final void loadSavedGame_NEW(int iLoadID) {
        FileHandle fileReadData_1;
        FileHandle fileReadData8;
        try {
            String[] tSplted = (CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_GAME_LIST) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_GAME_LIST)).readString().split(";");
            if (CFG.readLocalFiles()) {
                fileReadData_1 = Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_1");
            } else {
                fileReadData_1 = Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_1");
            }
            Save_GameData_1 tempSavedGame = (Save_GameData_1) CFG.deserialize(fileReadData_1.readBytes());
            disposeCivilizations();
            CFG.FOG_OF_WAR = tempSavedGame.FOG_OF_WAR;
            CFG.SPECTATOR_MODE = tempSavedGame.SPECTATOR_MODE;
            CFG.DIFFICULTY = tempSavedGame.DIFFICULTY;
            CFG.SANDBOX_MODE = tempSavedGame.SANDBOX_MODE;
            CFG.FREEPLAY_MODE = tempSavedGame.FREEPLAY_MODE;
            Game_Calendar.TURN_ID = tempSavedGame.iTurnID;
            Game_Calendar.TURNS_SINCE_LAST_WAR = tempSavedGame.TURNS_SINCE_LAST_WAR;
            Game_Calendar.currentDay = tempSavedGame.iDay;
            Game_Calendar.currentMonth = tempSavedGame.iMonth;
            Game_Calendar.currentYear = tempSavedGame.iYear;
            Game_Calendar.CURRENT_AGEID = CFG.gameAges.getAgeOfYear(Game_Calendar.currentYear);
            Game_Calendar.ENABLE_COLONIZATION = tempSavedGame.ENABLE_COLONIZATION;
            Game_Calendar.ENABLE_COLONIZATION_NEUTRAL_PROVINCES = tempSavedGame.ENABLE_COLONIZATION_NEUTRAL_PROVINCES;
            Game_Calendar.COLONIZATION_TECH_LEVEL = tempSavedGame.COLONIZATION_TECH_LEVEL;
            Game_Calendar.GAME_SPEED = tempSavedGame.GAME_SPEED;
            Game_Calendar.LOSSESINWAR = tempSavedGame.LOSSESINWAR;
            Game_Calendar.SURRENDERLIMIT = tempSavedGame.SURRENDERLIMIT;
            Game_Calendar.POWERREBELS = tempSavedGame.POWERREBELS;
            CFG.MANPOWER_SYSTEM = tempSavedGame.MANPOWER;
            CFG.DISEASES = tempSavedGame.DISEASES;
            Game_Action.fTroopBreakthroughChance = tempSavedGame.fTroopBreakthroughChance;
            CFG.NO_LIBERITY = tempSavedGame.NO_LIBERITY;
            CFG.AI_CREATING_VASSALS = tempSavedGame.AI_CREATING_VASSALS;
            CFG.AI_CREATING_ALLIANCE = tempSavedGame.AI_CREATING_ALLIANCE;
            CFG.game.getGameScenarios().setScenario_StartingPopulation(tempSavedGame.STARTING_POPULATION);
            CFG.game.getGameScenarios().setScenario_StartingEconomy(tempSavedGame.STARTING_ECONOMY);
            CFG.game.getGameScenarios().setScenario_PopulationGrowthRate_Modifier(tempSavedGame.POPULATION_GROWTH_RATE_MODIFIER);
            CFG.game.getGameScenarios().setScenario_EconomyGrowthRate_Modifier(tempSavedGame.ECONOMY_GROWTH_RATE_MODIFIER);
            CFG.game.getGameScenarios().setScenario_DiseasesDeathRate_Modifier(tempSavedGame.DISEASES_DEATH_REATE_MODIFIER);
            VicotryManager.VICTORY_CONTROL_PROVINCES_PERC = tempSavedGame.VICTORY_CONTROL_PROVINCES_PERC;
            VicotryManager.VICTORY_LIMIT_OF_TURNS = tempSavedGame.VICTORY_LIMIT_OF_TURNS;
            VicotryManager.VICTORY_TECHNOLOGY = tempSavedGame.VICTORY_TECHNOLOGY;
            CFG.game.getGameScenarios().sActiveScenarioTag = tempSavedGame.sActiveScenarioTag;
            this.lCivs = this.gameScenarios.loadCivilizationsLoadGame(((Save_GameData_2) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2X") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2X")).readBytes())).lCivsData);
            this.iCivsSize = this.lCivs.size();
            for (int i3 = 0; i3 < getCivsSize(); i3++) {
                getCiv(i3).buildRegroupLines_AfterLoading();
            }
            for (int i32 = 1; i32 < CFG.game.getCivsSize(); i32++) {
                CFG.game.getCiv(i32).buildDiplomacy(false);
            }
            Save_GameData_3 tempSavedGame_3 = (Save_GameData_3) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_3") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_3")).readBytes());
            for (int i4 = 0; i4 < tempSavedGame_3.lCivsDiploData.size(); i4++) {
                for (int j = 0; j < tempSavedGame_3.lCivsDiploData.get(i4).lNonAggressionPacts.size(); j++) {
                    CFG.game.getCiv(i4 + 1).setNonAggressionPact(tempSavedGame_3.lCivsDiploData.get(i4).lNonAggressionPacts.get(j).id, tempSavedGame_3.lCivsDiploData.get(i4).lNonAggressionPacts.get(j).iValue);
                }
                for (int j2 = 0; j2 < tempSavedGame_3.lCivsDiploData.get(i4).lDefensivePact.size(); j2++) {
                    CFG.game.getCiv(i4 + 1).setDefensivePact(tempSavedGame_3.lCivsDiploData.get(i4).lDefensivePact.get(j2).id, tempSavedGame_3.lCivsDiploData.get(i4).lDefensivePact.get(j2).iValue);
                }
                for (int j3 = 0; j3 < tempSavedGame_3.lCivsDiploData.get(i4).lGuarantee.size(); j3++) {
                    CFG.game.getCiv(i4 + 1).setGuarantee(tempSavedGame_3.lCivsDiploData.get(i4).lGuarantee.get(j3).id, tempSavedGame_3.lCivsDiploData.get(i4).lGuarantee.get(j3).iValue);
                }
                for (int j4 = 0; j4 < tempSavedGame_3.lCivsDiploData.get(i4).lMilitirayAccess.size(); j4++) {
                    CFG.game.getCiv(i4 + 1).setMilitaryAccess(tempSavedGame_3.lCivsDiploData.get(i4).lMilitirayAccess.get(j4).id, tempSavedGame_3.lCivsDiploData.get(i4).lMilitirayAccess.get(j4).iValue);
                }
                for (int j5 = 0; j5 < tempSavedGame_3.lCivsDiploData.get(i4).lTruce.size(); j5++) {
                    CFG.game.getCiv(i4 + 1).setTruce(tempSavedGame_3.lCivsDiploData.get(i4).lTruce.get(j5).id, tempSavedGame_3.lCivsDiploData.get(i4).lTruce.get(j5).iValue);
                }
            }
            Save_GameData_4 tempSavedGame_4 = (Save_GameData_4) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_4") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_4")).readBytes());
            for (int i2 = 0; i2 < tempSavedGame_4.lProvincesData.size(); i2++) {
                CFG.game.getProvince(i2).saveProvinceData = tempSavedGame_4.lProvincesData.get(i2);
            }
            for (int i22 = 0; i22 < CFG.game.getProvincesSize(); i22++) {
                if (CFG.game.getProvince(i22).getCivID() > 0) {
                    if (CFG.game.getProvince(i22).getSeaProvince()) {
                        CFG.game.getProvince(i22).setCivID(0, false);
                    } else {
                        CFG.game.getCiv(CFG.game.getProvince(i22).getCivID()).addProvince_Just(i22);
                    }
                }
            }
            CFG.eventsManager.eventsGD = ((Save_GameData_11) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_11") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_11")).readBytes())).eventsGameData;
            CFG.holyRomanEmpire_Manager.holyRomanEmpire = ((Save_GameData_10) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_10") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_10")).readBytes())).holyRomanEmpire_GameData;
            CFG.game.buildAlliances(((Save_GameData_6) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_6") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_6")).readBytes())).lAlliances);
            CFG.game.initPlayers(((Save_GameData_5) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_5") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_5")).readBytes())).lPlayers);
            CFG.game.buildCivilizationsRegions();
            CFG.game.buildWastelandLevels();
            for (int i = 0; i < CFG.game.getProvincesSize(); i++) {
                CFG.game.getProvince(i).updateProvinceBorder();
            }
            for (int i5 = 0; i5 < CFG.game.getPlayersSize(); i5++) {
                CFG.game.getPlayer(i5).loadPlayersFlag();
            }
            Save_GameData_7 tempSavedGame_7 = (Save_GameData_7) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_7") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_7")).readBytes());
            this.lWars = new ArrayList();
            for (int i52 = 0; i52 < tempSavedGame_7.lWars.size(); i52++) {
                this.lWars.add(tempSavedGame_7.lWars.get(i52));
            }
            this.iWarsSize = this.lWars.size();
            Save_GameData_8 tempSavedGame_8 = (Save_GameData_8) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_8") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_8")).readBytes());
            this.lPeaceTreaties = new ArrayList();
            for (int i6 = 0; i6 < tempSavedGame_8.lPeaceTreaties.size(); i6++) {
                this.lPeaceTreaties.add(tempSavedGame_8.lPeaceTreaties.get(i6));
            }
            Save_GameData_9 tempSavedGame_9 = (Save_GameData_9) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_9") : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_9")).readBytes());
            CFG.plagueManager.lPlagues_INGAME.clear();
            CFG.plagueManager.lPlagues_INGAME = new ArrayList();
            for (int i7 = 0; i7 < tempSavedGame_9.lPlagues_INGAME.size(); i7++) {
                CFG.plagueManager.lPlagues_INGAME.add(tempSavedGame_9.lPlagues_INGAME.get(i7));
            }
            CFG.game_NextTurnUpdate.buildLevelsOfCities();
            CFG.gameAction.buildRank_Score();
            SaveManager.saveTag = tSplted[iLoadID];
            CFG.timelapseManager.timelapseOwnersGameData = (Timelapse_Owners_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_OWNERS) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_OWNERS)).readBytes());
            CFG.timelapseManager.timelapseGameData = (Timelapse_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE)).readBytes());
            CFG.timelapseManager.timelapseStatsGD = (Timelapse_Stats_GameData) CFG.deserialize((CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_STATS) : Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/TS/" + tSplted[iLoadID] + CFG.FILE_GAME_SAVE_TIMELINE_STATS)).readBytes());
            CFG.timelapseManager.timelapseTurnChanges = new Timelapse_TurnChanges_GameData();
            CFG.timelapseManager.timelapseTurnChanges.lTurnChanges.add(new ArrayList());
            try {
                if (CFG.readLocalFiles()) {
                    fileReadData8 = Gdx.files.local(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2");
                } else {
                    fileReadData8 = Gdx.files.internal(CFG.FILE_SAVES_PATH + CFG.map.getFile_ActiveMap_Path() + tSplted[iLoadID] + "/" + tSplted[iLoadID] + "_2");
                }
                Game_Calendar.AI_AGGRESSIVNESS = ((Save_GameData2) CFG.deserialize(fileReadData8.readBytes())).AI_AGGRESSIVNESS;
            } catch (GdxRuntimeException | IOException | ClassNotFoundException | IndexOutOfBoundsException e) {
            }
        } catch (GdxRuntimeException e2) {
            CFG.exceptionStack(e2);
        } catch (ClassNotFoundException e3) {
            CFG.exceptionStack(e3);
        } catch (IOException e4) {
            CFG.exceptionStack(e4);
        } catch (IndexOutOfBoundsException e5) {
            CFG.exceptionStack(e5);
        }
    }

    public final void build_Leaders() {
        String[] tagsSPLITED;
        String[] tagsSPLITED2;
        ArrayList<String> tempTags = new ArrayList<>();
        try {
            if (CFG.readLocalFiles()) {
                try {
                    if (CFG.isDesktop()) {
                        List<String> tempFiles = CFG.getFileNames("game/leaders/");
                        int iSize = tempFiles.size();
                        int i2 = 0;
                        while (true) {
                            if (i2 < iSize) {
                                if (tempFiles.get(i2).equals(CFG.FILE_GAME_LIST)) {
                                    tempFiles.remove(i2);
                                    break;
                                }
                                i2++;
                            } else {
                                break;
                            }
                        }
                        tagsSPLITED2 = new String[tempFiles.size()];
                        int iSize2 = tempFiles.size();
                        for (int i22 = 0; i22 < iSize2; i22++) {
                            tagsSPLITED2[i22] = tempFiles.get(i22);
                        }
                    } else {
                        tagsSPLITED2 = Gdx.files.internal("game/leaders/Age_of_Civilizations").readString().split(";");
                    }
                    for (String add : tagsSPLITED2) {
                        tempTags.add(add);
                    }
                } catch (GdxRuntimeException e) {
                }
                try {
                    String[] tagsSPLITED3 = Gdx.files.local("game/leaders/Age_of_Civilizations").readString().split(";");
                    int iSize3 = tagsSPLITED3.length;
                    for (int i4 = 0; i4 < iSize3; i4++) {
                        boolean add2 = true;
                        for (int j = 0; j < tempTags.size(); j++) {
                            if (tagsSPLITED3[i4].equals(tempTags.get(j))) {
                                add2 = false;
                            }
                        }
                        if (add2) {
                            tempTags.add(tagsSPLITED3[i4]);
                        }
                    }
                } catch (GdxRuntimeException e2) {
                }
            } else {
                if (CFG.isDesktop()) {
                    List<String> tempFiles2 = CFG.getFileNames("game/leaders/");
                    int iSize4 = tempFiles2.size();
                    int i5 = 0;
                    while (true) {
                        if (i5 < iSize4) {
                            if (tempFiles2.get(i5).equals(CFG.FILE_GAME_LIST)) {
                                tempFiles2.remove(i5);
                                break;
                            }
                            i5++;
                        } else {
                            break;
                        }
                    }
                    tagsSPLITED = new String[tempFiles2.size()];
                    int iSize5 = tempFiles2.size();
                    for (int i52 = 0; i52 < iSize5; i52++) {
                        tagsSPLITED[i52] = tempFiles2.get(i52);
                    }
                } else {
                    tagsSPLITED = Gdx.files.internal("game/leaders/Age_of_Civilizations").readString().split(";");
                }
                for (String add3 : tagsSPLITED) {
                    tempTags.add(add3);
                }
            }
        } catch (GdxRuntimeException e3) {
        }
        ArrayList<String> tRealTags = new ArrayList<>();
        ArrayList<Integer> tRandLeaders = new ArrayList<>();
        for (int i = 1; i < CFG.game.getCivsSize(); i++) {
            tRealTags.add(CFG.ideologiesManager.getRealTag(CFG.game.getCiv(i).getCivTag()));
            tRandLeaders.add(1);
        }
        int iSize6 = tempTags.size();
        for (int i3 = 0; i3 < iSize6; i3++) {
            try {
                CFG.leader_GameData = (Leader_GameData) CFG.deserialize(Gdx.files.local("game/leaders/" + tempTags.get(i3)).readBytes());
            } catch (GdxRuntimeException e4) {
                CFG.leader_GameData = (Leader_GameData) CFG.deserialize(Gdx.files.internal("game/leaders/" + tempTags.get(i3)).readBytes());
            } catch (GdxRuntimeException | IOException | ClassNotFoundException e5) {
            }
            if (CFG.leader_GameData != null) {
                int j2 = CFG.leader_GameData.getCivsSize() - 1;
                while (j2 >= 0) {
                    int k = 1;
                    while (true) {
                        if (k >= CFG.game.getCivsSize()) {
                            break;
                        }
                        if (CFG.game.getCiv(k).getCivTag().equals(CFG.leader_GameData.getCiv(j2)) || tRealTags.get(k - 1).equals(CFG.leader_GameData.getCiv(j2))) {
                            try {
                                if (CFG.game.getCiv(k).civGameData.leaderData != null) {
                                    if (Game_Calendar.currentYear <= 1699 && CFG.settingsManager.randomLeaders) {
                                        if (CFG.leader_GameData.getLeaderOfCiv().getYear() > 1699) {
                                            break;
                                        }
                                        tRandLeaders.set(k - 1, Integer.valueOf(tRandLeaders.get(k - 1).intValue() + 1));
                                        if (((float) CFG.oR.nextInt(100)) < 100.0f / ((float) tRandLeaders.get(k - 1).intValue()) || (Game_Calendar.currentYear < 1700 && CFG.game.getCiv(k).civGameData.leaderData.getYear() > 1699)) {
                                            CFG.game.getCiv(k).civGameData.setLeader(CFG.leader_GameData.getLeaderOfCiv());
                                        }
                                    } else {
                                        if (Math.abs((CFG.leader_GameData.getLeaderOfCiv().getYear() + 30) - Game_Calendar.currentYear) < Math.abs((CFG.game.getCiv(k).civGameData.leaderData.getYear() + 40) - Game_Calendar.currentYear)) {
                                            CFG.game.getCiv(k).civGameData.setLeader(CFG.leader_GameData.getLeaderOfCiv());
                                            j2 = -1;
                                            break;
                                        }
                                    }
                                } else {
                                    CFG.game.getCiv(k).civGameData.setLeader(CFG.leader_GameData.getLeaderOfCiv());
                                    j2 = -1;
                                    break;
                                }
                            } catch (GdxRuntimeException | IOException | ClassNotFoundException e52) {
                            }
                        }
                        k++;
                    }
                    CFG.game.getCiv(k).civGameData.setLeader(CFG.leader_GameData.getLeaderOfCiv());
                    j2 = -1;
                    j2--;
                }
            }
            CFG.leader_GameData = null;
        }
        tRealTags.clear();
        tRandLeaders.clear();
    }

    public final void loadScenario(boolean nEditor) {
        boolean z;
        disposeCivilizations();
        this.lCivs = this.gameScenarios.loadCivilizations(nEditor);
        this.iCivsSize = this.lCivs.size();
        this.iAvailableCivilizations = this.iCivsSize - 1;
        Game_Calendar.TURN_ID = 1;
        CFG.PLAYER_TURNID = 0;
        Game_Calendar.currentDay = getGameScenarios().getScenarioDay(getScenarioID());
        Game_Calendar.currentMonth = getGameScenarios().getScenarioMonth(getScenarioID());
        Game_Calendar.currentYear = getGameScenarios().getScenarioYear(getScenarioID());
        Game_Calendar.CURRENT_AGEID = CFG.gameAges.getAgeOfYear(Game_Calendar.currentYear);
        VicotryManager.VICTORY_CONTROL_PROVINCES_PERC = 100;
        VicotryManager.VICTORY_LIMIT_OF_TURNS = 0;
        VicotryManager.VICTORY_TECHNOLOGY = VicotryManager.getDefault_VcitoryTechnology();
        for (int i = 0; i < getProvincesSize(); i++) {
            for (int j = 0; j < getProvince(i).getProvinceBordersLandByLandSize(); j++) {
                Province_Border province_Border = getProvince(i).getProvinceBordersLandByLand().get(j);
                if (getProvince(i).getCivID() != getProvince(getProvince(i).getProvinceBordersLandByLand().get(j).getWithProvinceID()).getCivID()) {
                    z = true;
                } else {
                    z = false;
                }
                province_Border.setIsCivilizationBorder(z, i);
            }
            if (getProvince(i).getCivID() > 0) {
                getCiv(getProvince(i).getCivID()).addProvince_Just(i);
            }
        }
        if (nEditor) {
            int numOfRandomCivs = 1;
            for (int i2 = 1; i2 < getCivsSize(); i2++) {
                if (getCiv(i2).getCivTag().equals(CFG.RANDOM_CIV_TAG)) {
                    randomCivilizationColor(i2);
                    getCiv(i2).setCivName(getCiv(i2).getCivName() + " " + numOfRandomCivs);
                    numOfRandomCivs++;
                }
            }
        }
        getGameScenarios().loadProvincesData(nEditor);
        getGameScenarios().loadEventsData();
        buildWastelandLevels();
        getGameScenarios().loadDiplomacyData(nEditor);
        CFG.holyRomanEmpire_Manager.loadHolyRomanEmpire_ScenarioData();
        build_Leaders();
        buildCivilizationsRegions();
        buildCivilizationsRegions_TextOver();
        if (getGameScenarios().getScenario_ActivePallet_TAG() != null) {
            int i3 = 0;
            while (true) {
                if (i3 < CFG.palletManager.getNumOfPallets()) {
                    if (CFG.palletManager.getPalletTag(i3).equals(getGameScenarios().getScenario_ActivePallet_TAG())) {
                        CFG.palletManager.setActivePalletID(i3 + 1);
                        CFG.palletManager.loadCivilizationsPaletteOfColors(CFG.palletManager.getActivePalletID());
                        break;
                    }
                    i3++;
                } else {
                    break;
                }
            }
        }
        CFG.game_NextTurnUpdate.buildLevelsOfCities();
        CFG.gameAction.buildRank_Score();
        this.gameScenarios.loadCivilizationsManPower();
        this.gameScenarios.loadCivilizationsFood();
        CFG.menuManager.updateCreateNewGame_Top();
        CFG.disposeActiveCivFlag();
    }

    public final void disposeCivilizations() {
        if (this.lCivs != null) {
            int i = 0;
            while (i < this.iCivsSize) {
                try {
                    try {
                        getCiv(i).getFlag().getTexture().dispose();
                    } catch (GdxRuntimeException ex) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(ex);
                        }
                    } catch (NullPointerException ex2) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(ex2);
                        }
                    }
                    i++;
                } catch (IndexOutOfBoundsException ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
            for (int i2 = 0; i2 < getProvincesSize(); i2++) {
                getProvince(i2).setCivID_LoadScenario(0);
                getProvince(i2).setWasteland(-1);
                getProvince(i2).setIsCapital(false);
                getProvince(i2).setRevolutionaryRisk(CFG.DEFAULT_RESEARACH_LEVEL);
                getProvince(i2).setLevelOfFarm(0);
                getProvince(i2).setLevelOfFort(0);
                getProvince(i2).setLevelOfWatchTower(0);
                getProvince(i2).setLevelOfSupply(0);
                getProvince(i2).setLevelOfWorkshop(0);
                getProvince(i2).setLevelOfLibrary(0);
                getProvince(i2).setLevelOfArmoury(0);
                if (getProvince(i2).getLevelOfPort() > 0) {
                    getProvince(i2).setLevelOfPort(0);
                }
            }
            this.lAlliances.clear();
            this.iAlliancesSize = 0;
            this.lWars.clear();
            this.iWarsSize = 0;
            this.lPeaceTreaties.clear();
            CFG.plagueManager.lPlagues_INGAME.clear();
            this.lActive_CivRegion.clear();
            setActiveProvinceID(-1);
        }
    }

    public final void disposeCivilizations_WithoutWasteland() {
        if (this.lCivs != null) {
            for (int i = 0; i < this.iCivsSize; i++) {
                getCiv(i).getFlag().getTexture().dispose();
            }
            for (int i2 = 0; i2 < getProvincesSize(); i2++) {
                getProvince(i2).setCivID_LoadScenario(0);
                getProvince(i2).resetArmies(0);
                getProvince(i2).setIsCapital(false);
                getProvince(i2).setLevelOfFarm(0);
                getProvince(i2).setLevelOfFort(0);
                getProvince(i2).setLevelOfWatchTower(0);
                getProvince(i2).setLevelOfSupply(0);
                getProvince(i2).setLevelOfWorkshop(0);
                getProvince(i2).setLevelOfLibrary(0);
                getProvince(i2).setLevelOfArmoury(0);
                if (getProvince(i2).getLevelOfPort() > 0) {
                    getProvince(i2).setLevelOfPort(0);
                }
            }
            this.lAlliances.clear();
            this.iAlliancesSize = 0;
            this.lWars.clear();
            this.iWarsSize = 0;
            this.lPeaceTreaties.clear();
            CFG.plagueManager.lPlagues_INGAME.clear();
            this.lActive_CivRegion.clear();
            setActiveProvinceID(-1);
        }
    }

    public final void buildWastelandLevels() {
        ArrayList<Integer> tWasteland = new ArrayList<>();
        for (int i = 0; i < getProvincesSize(); i++) {
            if (getProvince(i).getWasteland() >= 0 && !getProvince(i).getSeaProvince()) {
                tWasteland.add(Integer.valueOf(i));
                getProvince(i).setWasteland(0);
            }
        }
        buildWastelandLevels(tWasteland, 0, tWasteland.size());
    }

    public final void buildWastelandLevels(List<Integer> tWasteland, int nLevel, int nWastelandSize) {
        boolean rec = false;
        int i = 0;
        while (i < nWastelandSize) {
            try {
                if (getProvince(tWasteland.get(i).intValue()).getWasteland() != nLevel || getProvince(tWasteland.get(i).intValue()).getNeighboringSeaProvincesSize() > 0) {
                    tWasteland.remove(i);
                    i--;
                    nWastelandSize = tWasteland.size();
                } else {
                    boolean incLevel = true;
                    int j = 0;
                    while (true) {
                        if (j < getProvince(tWasteland.get(i).intValue()).getNeighboringProvincesSize()) {
                            if (getProvince(getProvince(tWasteland.get(i).intValue()).getNeighboringProvinces(j)).getWasteland() < nLevel) {
                                incLevel = false;
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                    if (incLevel) {
                        getProvince(tWasteland.get(i).intValue()).setWasteland(nLevel + 1);
                        rec = true;
                    } else {
                        tWasteland.remove(i);
                        i--;
                        nWastelandSize = tWasteland.size();
                    }
                }
                i++;
            } catch (StackOverflowError ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                    return;
                }
                return;
            }
        }
        if (rec) {
            buildWastelandLevels(tWasteland, nLevel + 1, nWastelandSize);
        }
    }

    public final void buildCivilizationsRegions() {
        for (int i = 1; i < getCivsSize(); i++) {
            getCiv(i).clearCivRegions();
        }
        for (int i2 = 0; i2 < this.iProvincesSize; i2++) {
            if (getProvince(i2).getCivID() != 0 && !getCiv(getProvince(i2).getCivID()).civRegionsContainsProvince(i2)) {
                getCiv(getProvince(i2).getCivID()).createCivilizationRegion(i2);
            }
        }
        buildCivilizationsRegions_TextOver();
    }

    public final void buildCivilizationRegions(int nCivID) {
        getCiv(nCivID).clearCivRegions();
        for (int i = 0; i < getCiv(nCivID).getNumOfProvinces(); i++) {
            if (CFG.game.getProvince(getCiv(nCivID).getProvinceID(i)).getCivRegionID() < 0) {
                getCiv(nCivID).createCivilizationRegion(getCiv(nCivID).getProvinceID(i));
            }
        }
        for (int j = 0; j < getCiv(nCivID).getCivRegionsSize(); j++) {
            getCiv(nCivID).getCivRegion(j).buildRegionPath();
        }
    }

    public final void buildCivilizationsRegions_TextOver() {
        for (int i = 1; i < getCivsSize(); i++) {
            buildCivilizationsRegions_TextOver(i);
        }
    }

    public final void buildCivilizationsRegions_TextOver(int i) {
        for (int j = 0; j < getCiv(i).getCivRegionsSize(); j++) {
            getCiv(i).getCivRegion(j).buildRegionPath();
        }
    }

    public final void disableNonPlayableCivilizations() {
        for (int i = 1; i < getCivsSize(); i++) {
            if (!getCiv(i).getIsAvailable()) {
                getProvince(getCiv(i).getCapitalProvinceID()).setIsCapital(false);
                getProvince(getCiv(i).getCapitalProvinceID()).updateDrawArmy();
                while (0 < getCiv(i).getNumOfProvinces()) {
                    for (int k = 1; k < getProvince(getCiv(i).getProvinceID(0)).getCivsSize(); k++) {
                        getProvince(getCiv(i).getProvinceID(0)).removeArmy(k);
                    }
                    getProvince(getCiv(i).getProvinceID(0)).setCivID(0, false);
                }
            }
        }
    }

    public final void updateNumOfAvailableCivilizations() {
        this.iAvailableCivilizations = 0;
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getIsAvailable()) {
                this.iAvailableCivilizations++;
            }
        }
    }

    public final void shuffleCivilizations() {
        int nID;
        CFG.game.disableDrawCivlizationsRegions_Players();
        ArrayList<Boolean> lTaken = new ArrayList<>();
        ArrayList<Integer> lTakeProvinceOfCivID = new ArrayList<>();
        for (int i2 = 1; i2 < getCivsSize(); i2++) {
            lTaken.add(false);
        }
        Random oR = new Random();
        while (lTakeProvinceOfCivID.size() != getCivsSize() - 1) {
            do {
                nID = oR.nextInt(getCivsSize() - 1) + 1;
            } while (lTaken.get(nID - 1).booleanValue());
            lTaken.set(nID - 1, true);
            lTakeProvinceOfCivID.add(Integer.valueOf(nID));
        }
        Gdx.app.log("AoC", "lTakeProvinceOfCivID().size(): " + lTakeProvinceOfCivID.size());
        Gdx.app.log("AoC", "getCivsSize(): " + getCivsSize());
        ArrayList tempOwners = new ArrayList();
        ArrayList<Integer> tempCapitals = new ArrayList<>();
        for (int i = 1; i < getCivsSize(); i++) {
            tempOwners.add(new ArrayList());
            for (int j = 0; j < getCiv(i).getNumOfProvinces(); j++) {
                ((List) tempOwners.get(i - 1)).add(Integer.valueOf(getCiv(i).getProvinceID(j)));
            }
            tempCapitals.add(Integer.valueOf(getCiv(i).getCapitalProvinceID()));
        }
        for (int i3 = 1; i3 < getCivsSize(); i3++) {
            for (int j2 = 0; j2 < ((List) tempOwners.get(lTakeProvinceOfCivID.get(i3 - 1).intValue() - 1)).size(); j2++) {
                getProvince(((Integer) ((List) tempOwners.get(lTakeProvinceOfCivID.get(i3 - 1).intValue() - 1)).get(j2)).intValue()).setCivID(i3, false);
            }
        }
        for (int i4 = 1; i4 < getCivsSize(); i4++) {
            getCiv(i4).setCapitalProvinceID(tempCapitals.get(lTakeProvinceOfCivID.get(i4 - 1).intValue() - 1).intValue());
        }
        tempOwners.clear();
        while (1 < getPlayersSize()) {
            removePlayer(1);
        }
        if (getPlayer(0).getCivID() < 0) {
            setActiveProvinceID(getActiveProvinceID());
        } else {
            setActiveProvinceID(getCiv(getPlayer(0).getCivID()).getCapitalProvinceID());
        }
        CFG.game.buildCivilizationsRegions();
        CFG.game.enableDrawCivlizationsRegions_Players();
        CFG.map.getMapCoordinates().centerToProvinceID(getActiveProvinceID());
        CFG.setActiveCivInfo(getProvince(getActiveProvinceID()).getCivID());
        CFG.updateActiveCivInfo_CreateNewGame();
    }

    public final void randomCivilizationColor(int nCivID) {
        Random oR = new Random();
        CFG.game.getCiv(nCivID).setR(oR.nextInt(256));
        CFG.game.getCiv(nCivID).setG(oR.nextInt(256));
        CFG.game.getCiv(nCivID).setB(oR.nextInt(256));
    }

    public final void disableDrawCivlizationsRegions_Players() {
        for (int i = 0; i < CFG.game.getPlayersSize(); i++) {
            CFG.game.disableDrawCivilizationRegions(CFG.game.getPlayer(i).getCivID());
        }
        CFG.game.disableDrawCivilizationRegions(CFG.getActiveCivInfo());
    }

    public final void enableDrawCivlizationsRegions_Players() {
        for (int i = 0; i < CFG.game.getPlayersSize(); i++) {
            CFG.game.enableDrawCivilizationRegions(CFG.game.getPlayer(i).getCivID(), 0);
        }
    }

    public final void enableDrawCivlizationsRegions_Player(int nID) {
        CFG.game.enableDrawCivilizationRegions(CFG.game.getPlayer(nID).getCivID(), 0);
    }

    public final void enableDrawCivilizationRegions_ActiveProvince() {
        if (getActiveProvinceID() >= 0) {
            enableDrawCivilizationRegions(getProvince(getActiveProvinceID()).getCivID(), 0);
        }
    }

    public final void enableDrawCivilizationRegions(int nCivID, int nRegionStyleID) {
        if (nCivID > 0) {
            addActiveCivRegion_CivID(nCivID, nRegionStyleID);
            for (int i = 0; i < getCiv(nCivID).getCivRegionsSize(); i++) {
                for (int j = 0; j < getCiv(nCivID).getCivRegion(i).getProvincesSize(); j++) {
                    for (int k = 0; k < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvincesSize(); k++) {
                        if (getCiv(nCivID).getCivRegion(i).getProvince(j) < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)) {
                            if (getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getProvinceBordersLandByLand(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getIsCivilizationBorder()) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getCiv(nCivID).getCivRegion(i).getProvince(j), getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k));
                            }
                        } else if (getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getProvinceBordersLandByLand(getCiv(nCivID).getCivRegion(i).getProvince(j)).getIsCivilizationBorder()) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k), getCiv(nCivID).getCivRegion(i).getProvince(j));
                        }
                    }
                }
            }
        }
    }

    public final void enableDrawCivilizationRegions_FogOfWar(int nCivID, int nRegionStyleID) {
        if (nCivID > 0) {
            addActiveCivRegion_CivID(nCivID, nRegionStyleID);
            for (int i = 0; i < getCiv(nCivID).getCivRegionsSize(); i++) {
                for (int j = 0; j < getCiv(nCivID).getCivRegion(i).getProvincesSize(); j++) {
                    for (int k = 0; k < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvincesSize(); k++) {
                        if (!CFG.getMetProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)) || !CFG.getMetProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k))) {
                            if ((CFG.getMetProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)) && getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getCivID() == nCivID) || (CFG.getMetProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)) && getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivID() == nCivID)) {
                                if (getCiv(nCivID).getCivRegion(i).getProvince(j) < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)) {
                                    if (getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getProvinceBordersLandByLand(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getIsCivilizationBorder()) {
                                        this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getCiv(nCivID).getCivRegion(i).getProvince(j), getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k));
                                    }
                                } else if (getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getProvinceBordersLandByLand(getCiv(nCivID).getCivRegion(i).getProvince(j)).getIsCivilizationBorder()) {
                                    this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k), getCiv(nCivID).getCivRegion(i).getProvince(j));
                                }
                            }
                        } else if (getCiv(nCivID).getCivRegion(i).getProvince(j) < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)) {
                            if (getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getProvinceBordersLandByLand(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getIsCivilizationBorder()) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getCiv(nCivID).getCivRegion(i).getProvince(j), getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k));
                            }
                        } else if (getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getProvinceBordersLandByLand(getCiv(nCivID).getCivRegion(i).getProvince(j)).getIsCivilizationBorder()) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(nCivID)).getRegionStyleID(i)).updatePB(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k), getCiv(nCivID).getCivRegion(i).getProvince(j));
                        }
                    }
                }
            }
        }
    }

    public final void disableDrawCivilizationRegions_ActiveProvince() {
        if (getActiveProvinceID() >= 0) {
            disableDrawCivilizationRegions(getProvince(getActiveProvinceID()).getCivID());
        }
    }

    public final void disableDrawCivilizationRegions_Active() {
        while (this.lActive_CivRegion.size() > 0) {
            try {
                disableDrawCivilizationRegions(this.lActive_CivRegion.get(0).getCivID());
            } catch (StackOverflowError e) {
                this.lActive_CivRegion.clear();
                if (CFG.LOGS) {
                    CFG.exceptionStack(e);
                    return;
                }
                return;
            }
        }
    }

    public final void disableDrawCivilizationRegions(int nCivID) {
        if (nCivID > 0) {
            try {
                removeActiveCivRegion_CivID(nCivID);
                for (int i = 0; i < getCiv(nCivID).getCivRegionsSize(); i++) {
                    for (int j = 0; j < getCiv(nCivID).getCivRegion(i).getProvincesSize(); j++) {
                        for (int k = 0; k < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvincesSize(); k++) {
                            if (getCiv(nCivID).getCivRegion(i).getProvince(j) < getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)) {
                                if (getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getProvinceBordersLandByLand(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getIsCivilizationBorder()) {
                                    if (!isActiveCivRegion_CivID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivID(), getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivRegionID())) {
                                        getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getProvinceBordersLandByLand(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).updateDrawProvinceBorder(getCiv(nCivID).getCivRegion(i).getProvince(j));
                                    } else {
                                        this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivID())).getRegionStyleID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivRegionID())).updatePB(getCiv(nCivID).getCivRegion(i).getProvince(j), getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k));
                                    }
                                }
                            } else if (getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getProvinceBordersLandByLand(getCiv(nCivID).getCivRegion(i).getProvince(j)).getIsCivilizationBorder()) {
                                if (!isActiveCivRegion_CivID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivID(), getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivRegionID())) {
                                    getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getProvinceBordersLandByLand(getCiv(nCivID).getCivRegion(i).getProvince(j)).updateDrawProvinceBorder(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k));
                                } else {
                                    this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivID())).getRegionStyleID(getProvince(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k)).getCivRegionID())).updatePB(getProvince(getCiv(nCivID).getCivRegion(i).getProvince(j)).getNeighboringProvinces(k), getCiv(nCivID).getCivRegion(i).getProvince(j));
                                }
                            }
                        }
                    }
                }
            } catch (IndexOutOfBoundsException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                }
            }
        }
    }

    public final void addActiveCivRegion_CivID(int nCivID, int nCivRegionStyle) {
        int i = this.lActive_CivRegion.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            } else if (nCivID != this.lActive_CivRegion.get(i).getCivID()) {
                i--;
            } else if (this.lActive_CivRegion.get(i).getActiveRegionsSize() != getCiv(nCivID).getCivRegionsSize()) {
                this.lActive_CivRegion.remove(i);
            } else {
                return;
            }
        }
        for (int i2 = 0; i2 < getCiv(nCivID).getCivRegionsSize(); i2++) {
            addActiveCivRegion_RegionID(nCivID, i2, nCivRegionStyle);
        }
    }

    public final void addActiveCivRegion_RegionID(int nCivID, int nRegionID, int nCivRegionStyle) {
        int i = this.lActive_CivRegion.size() - 1;
        while (i >= 0) {
            if (nCivID != this.lActive_CivRegion.get(i).getCivID()) {
                i--;
            } else if (!this.lActive_CivRegion.get(i).isActive_RegionID(nRegionID)) {
                this.lActive_CivRegion.get(i).addRegion(nRegionID, nCivRegionStyle);
                return;
            } else {
                return;
            }
        }
        this.lActive_CivRegion.add(new Civilization_Region_Active(nCivID, nRegionID, nCivRegionStyle));
    }

    public final void removeActiveCivRegion_CivID(int nCivID) {
        int i = this.lActive_CivRegion.size() - 1;
        while (i >= 0) {
            if (nCivID != this.lActive_CivRegion.get(i).getCivID()) {
                i--;
            } else {
                this.lActive_CivRegion.remove(i);
                return;
            }
        }
    }

    public final void removeActiveCivRegion_RegionID(int nCivID, int nRegionID) {
        int i = this.lActive_CivRegion.size() - 1;
        while (i >= 0) {
            if (nCivID != this.lActive_CivRegion.get(i).getCivID()) {
                i--;
            } else {
                if (this.lActive_CivRegion.get(i).getActiveRegionsSize() == 1) {
                    this.lActive_CivRegion.remove(i);
                }
                this.lActive_CivRegion.get(i).removeRegion(nRegionID);
                return;
            }
        }
    }

    public final boolean isActiveCivRegion_CivID(int nCivID, int nRegionID) {
        for (int i = this.lActive_CivRegion.size() - 1; i >= 0; i--) {
            if (nCivID == this.lActive_CivRegion.get(i).getCivID()) {
                return this.lActive_CivRegion.get(i).isActive_RegionID(nRegionID);
            }
        }
        return false;
    }

    public final int getCivRegionID(int nCivID) {
        for (int i = this.lActive_CivRegion.size() - 1; i >= 0; i--) {
            if (nCivID == this.lActive_CivRegion.get(i).getCivID()) {
                return i;
            }
        }
        return -1;
    }

    public final void createScenarioClearCivilizations() {
        disposeCivilizations();
        this.lCivs.clear();
        this.lCivs.add(getNeutralCivilization());
        getCiv(0).setCivID(0);
        for (int i = 0; i < this.iProvincesSize; i++) {
            getProvince(i).setCivID_LoadScenario(0);
            getProvince(i).setFromCivID(-1);
            getProvince(i).setIsCapital(false);
            getProvince(i).setWasteland(-1);
            for (int j = getProvince(i).getCivsSize() - 1; j > 0; j--) {
                getProvince(i).removeCiv(j);
            }
            CFG.holyRomanEmpire_Manager.initHolyRomanEmpire();
            getProvince(i).updateArmy(0);
            getProvince(i).setLevelOfFort(0);
            getProvince(i).setLevelOfWatchTower(0);
            getProvince(i).setLevelOfFarm(0);
            getProvince(i).setLevelOfWorkshop(0);
            getProvince(i).setLevelOfSupply(0);
            getProvince(i).setLevelOfLibrary(0);
            getProvince(i).setLevelOfArmoury(0);
            if (getProvince(i).getLevelOfPort() > 0) {
                getProvince(i).setLevelOfPort(0);
            }
            for (int j2 = 0; j2 < getProvince(i).getProvinceBordersLandByLandSize(); j2++) {
                if (getProvince(i).getProvinceBordersLandByLand().get(j2).getIsCivilizationBorder()) {
                    getProvince(i).getProvinceBordersLandByLand().get(j2).setIsCivilizationBorder(false, i);
                    getProvince(i).getProvinceBordersLandByLand().get(j2).updateDrawProvinceBorder(i);
                }
            }
        }
        this.iCivsSize = this.lCivs.size();
    }

    public final boolean isCivTagAvailable(String nCivTag) {
        for (int i = 0; i < getCivsSize(); i++) {
            if (getCiv(i).getCivTag().equals(nCivTag)) {
                return false;
            }
        }
        return true;
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v17, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v35, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v14, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void updateCivilizationIdeology(int r17, java.lang.String r18) {
        /*
            r16 = this;
            java.lang.String r10 = "ran"
            r0 = r18
            boolean r10 = r0.equals(r10)
            if (r10 != 0) goto L_0x0099
            r5 = 0
        L_0x000b:
            int r10 = r16.getCivsSize()
            if (r5 >= r10) goto L_0x0026
            r0 = r16
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r0.getCiv(r5)
            java.lang.String r10 = r10.getCivTag()
            r0 = r18
            boolean r10 = r10.equals(r0)
            if (r10 != 0) goto L_0x0099
            int r5 = r5 + 1
            goto L_0x000b
        L_0x0026:
            com.badlogic.gdx.Application r10 = com.badlogic.gdx.Gdx.app     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            java.lang.String r11 = "AoC"
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            r12.<init>()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            java.lang.String r13 = "updateCivilizationIdeology: "
            java.lang.StringBuilder r12 = r12.append(r13)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            r0 = r18
            java.lang.StringBuilder r12 = r12.append(r0)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            java.lang.String r12 = r12.toString()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            r10.log(r11, r12)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            r4 = 0
            r7 = 0
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x009a }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x009a }
            r11.<init>()     // Catch:{ GdxRuntimeException -> 0x009a }
            java.lang.String r12 = "game/civilizations/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x009a }
            r0 = r18
            java.lang.StringBuilder r11 = r11.append(r0)     // Catch:{ GdxRuntimeException -> 0x009a }
            java.lang.String r11 = r11.toString()     // Catch:{ GdxRuntimeException -> 0x009a }
            com.badlogic.gdx.files.FileHandle r4 = r10.internal(r11)     // Catch:{ GdxRuntimeException -> 0x009a }
            byte[] r10 = r4.readBytes()     // Catch:{ GdxRuntimeException -> 0x009a }
            java.lang.Object r10 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ GdxRuntimeException -> 0x009a }
            r0 = r10
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x009a }
            r7 = r0
        L_0x006b:
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r16.getCiv(r17)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r11 = r7.getR()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r12 = r7.getG()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r13 = r7.getB()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            r0 = r18
            r10.updateCivilizationIdeology(r0, r11, r12, r13)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r10 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r10 = r10.getActivePalletID()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            if (r10 <= 0) goto L_0x0099
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r10 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r11 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r11 = r11.getActivePalletID()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r12 = r16.getCivsSize()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            int r12 = r12 + -1
            r10.loadCivilizationPalletColor(r11, r12)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
        L_0x0099:
            return
        L_0x009a:
            r1 = move-exception
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x013d }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x013d }
            r11.<init>()     // Catch:{ GdxRuntimeException -> 0x013d }
            java.lang.String r12 = "game/civilizations/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x013d }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x013d }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x013d }
            java.lang.String r11 = r11.toString()     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.files.FileHandle r4 = r10.internal(r11)     // Catch:{ GdxRuntimeException -> 0x013d }
            byte[] r10 = r4.readBytes()     // Catch:{ GdxRuntimeException -> 0x013d }
            java.lang.Object r10 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ GdxRuntimeException -> 0x013d }
            r0 = r10
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x013d }
            r7 = r0
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r10 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x013d }
            r0 = r18
            int r9 = r10.getIdeologyID(r0)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ GdxRuntimeException -> 0x013d }
            int r11 = r7.getR()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r11 = (float) r11     // Catch:{ GdxRuntimeException -> 0x013d }
            r12 = 1132396544(0x437f0000, float:255.0)
            float r11 = r11 / r12
            int r12 = r7.getG()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r12 = (float) r12     // Catch:{ GdxRuntimeException -> 0x013d }
            r13 = 1132396544(0x437f0000, float:255.0)
            float r12 = r12 / r13
            int r13 = r7.getB()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r13 = (float) r13     // Catch:{ GdxRuntimeException -> 0x013d }
            r14 = 1132396544(0x437f0000, float:255.0)
            float r13 = r13 / r14
            r14 = 1061578342(0x3f466666, float:0.775)
            r10.<init>(r11, r12, r13, r14)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r11 = new com.badlogic.gdx.graphics.Color     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideology r12 = r12.getIdeology(r9)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r12 = r12.getColor()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r12 = r12.r     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r13 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideology r13 = r13.getIdeology(r9)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r13 = r13.getColor()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r13 = r13.g     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r14 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x013d }
            age.of.civilizations2.jakowski.lukasz.Ideology r14 = r14.getIdeology(r9)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r14 = r14.getColor()     // Catch:{ GdxRuntimeException -> 0x013d }
            float r14 = r14.b     // Catch:{ GdxRuntimeException -> 0x013d }
            r15 = 1046898278(0x3e666666, float:0.225)
            r11.<init>(r12, r13, r14, r15)     // Catch:{ GdxRuntimeException -> 0x013d }
            com.badlogic.gdx.graphics.Color r8 = age.of.civilizations2.jakowski.lukasz.CFG.getColorMixed(r10, r11)     // Catch:{ GdxRuntimeException -> 0x013d }
            float r10 = r8.r     // Catch:{ GdxRuntimeException -> 0x013d }
            r11 = 1132396544(0x437f0000, float:255.0)
            float r10 = r10 * r11
            int r10 = (int) r10     // Catch:{ GdxRuntimeException -> 0x013d }
            r7.setR(r10)     // Catch:{ GdxRuntimeException -> 0x013d }
            float r10 = r8.g     // Catch:{ GdxRuntimeException -> 0x013d }
            r11 = 1132396544(0x437f0000, float:255.0)
            float r10 = r10 * r11
            int r10 = (int) r10     // Catch:{ GdxRuntimeException -> 0x013d }
            r7.setG(r10)     // Catch:{ GdxRuntimeException -> 0x013d }
            float r10 = r8.b     // Catch:{ GdxRuntimeException -> 0x013d }
            r11 = 1132396544(0x437f0000, float:255.0)
            float r10 = r10 * r11
            int r10 = (int) r10     // Catch:{ GdxRuntimeException -> 0x013d }
            r7.setB(r10)     // Catch:{ GdxRuntimeException -> 0x013d }
            goto L_0x006b
        L_0x013d:
            r3 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.isAndroid()     // Catch:{ GdxRuntimeException -> 0x0202 }
            if (r10 == 0) goto L_0x01c3
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0183 }
            r11.<init>()     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.String r12 = "game/civilizations_editor/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0183 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0183 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.String r12 = "/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0183 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0183 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.String r11 = r11.toString()     // Catch:{ GdxRuntimeException -> 0x0183 }
            com.badlogic.gdx.files.FileHandle r4 = r10.local(r11)     // Catch:{ GdxRuntimeException -> 0x0183 }
            byte[] r10 = r4.readBytes()     // Catch:{ GdxRuntimeException -> 0x0183 }
            java.lang.Object r7 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ GdxRuntimeException -> 0x0183 }
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r7 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r7     // Catch:{ GdxRuntimeException -> 0x0183 }
            goto L_0x006b
        L_0x0183:
            r2 = move-exception
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0202 }
            r11.<init>()     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r12 = "game/civilizations_editor/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0202 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r12 = "/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0202 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r11 = r11.toString()     // Catch:{ GdxRuntimeException -> 0x0202 }
            com.badlogic.gdx.files.FileHandle r4 = r10.internal(r11)     // Catch:{ GdxRuntimeException -> 0x0202 }
            byte[] r10 = r4.readBytes()     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.Object r7 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r7 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r7     // Catch:{ GdxRuntimeException -> 0x0202 }
            goto L_0x006b
        L_0x01c3:
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0202 }
            r11.<init>()     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r12 = "game/civilizations_editor/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0202 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r12 = "/"
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r12 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0202 }
            r0 = r18
            java.lang.String r12 = r12.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.StringBuilder r11 = r11.append(r12)     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.String r11 = r11.toString()     // Catch:{ GdxRuntimeException -> 0x0202 }
            com.badlogic.gdx.files.FileHandle r4 = r10.internal(r11)     // Catch:{ GdxRuntimeException -> 0x0202 }
            byte[] r10 = r4.readBytes()     // Catch:{ GdxRuntimeException -> 0x0202 }
            java.lang.Object r7 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ GdxRuntimeException -> 0x0202 }
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r7 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r7     // Catch:{ GdxRuntimeException -> 0x0202 }
            goto L_0x006b
        L_0x0202:
            r6 = move-exception
            com.badlogic.gdx.Files r10 = com.badlogic.gdx.Gdx.files     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            java.lang.String r11 = "game/civilizations/ran"
            com.badlogic.gdx.files.FileHandle r4 = r10.internal(r11)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            byte[] r10 = r4.readBytes()     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            java.lang.Object r7 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r10)     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r7 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r7     // Catch:{ ClassNotFoundException -> 0x0217, IOException -> 0x0221 }
            goto L_0x006b
        L_0x0217:
            r1 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r10 == 0) goto L_0x0099
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x0099
        L_0x0221:
            r1 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r10 == 0) goto L_0x0099
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r1)
            goto L_0x0099
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.updateCivilizationIdeology(int, java.lang.String):void");
    }

    public final int releaseAVasssal(String nTag, List<Integer> nVassalProvinces, int nCapitalProvinceID, int nVassalOfCivID, boolean canChangeTypeOfGoverment_AI) {
        int randPop;
        try {
            for (int i3 = nVassalProvinces.size() - 1; i3 >= 0; i3--) {
                if (CFG.game.getProvince(nVassalProvinces.get(i3).intValue()).getIsCapital()) {
                    nVassalProvinces.remove(i3);
                }
            }
            for (int i32 = nVassalProvinces.size() - 1; i32 >= 0; i32--) {
                if (CFG.game.getProvince(nVassalProvinces.get(i32).intValue()).getCivID() != nVassalOfCivID) {
                    nVassalProvinces.remove(i32);
                }
            }
            if (nVassalProvinces.size() == 0) {
                return -1;
            }
            int tempArmy0 = 0;
            int nCivID = -1;
            int nCivID_TRUE_Ideology_CivID = -1;
            int i2 = 1;
            while (true) {
                if (i2 < getCivsSize()) {
                    if (getCiv(i2).getCivTag().equals(nTag)) {
                        nCivID_TRUE_Ideology_CivID = i2;
                        break;
                    }
                    i2++;
                } else {
                    break;
                }
            }
            if (canChangeTypeOfGoverment_AI) {
                String newTagOfCiv = CFG.ideologiesManager.getRealTag(nTag) + CFG.ideologiesManager.getIdeology(CFG.game.getCiv(nVassalOfCivID).getIdeologyID()).getExtraTag();
                if (CFG.game.isCivTagAvailable(newTagOfCiv)) {
                    nTag = newTagOfCiv;
                }
            }
            if (!CFG.game.getCiv(nVassalOfCivID).getControlledByPlayer() && CFG.ideologiesManager.getIdeology(CFG.game.getCiv(nVassalOfCivID).getIdeologyID()).CAN_BECOME_CIVILIZED >= 0) {
                if (CFG.ideologiesManager.getIdeology(CFG.ideologiesManager.getIdeologyID(nTag)).CAN_BECOME_CIVILIZED < 0) {
                    return -1;
                }
            }
            if (nCapitalProvinceID >= 0) {
                tempArmy0 = CFG.game.getProvince(nCapitalProvinceID).getArmy(0);
            } else {
                int i22 = 1;
                while (true) {
                    if (i22 < getCivsSize()) {
                        if (getCiv(i22).getCivTag().equals(nTag)) {
                            nCivID = i22;
                            break;
                        }
                        i22++;
                    } else {
                        break;
                    }
                }
                if (nCivID >= 0 && CFG.game.getCiv(nCivID).getCapitalProvinceID() >= 0) {
                    int i23 = nVassalProvinces.size() - 1;
                    while (true) {
                        if (i23 >= 0) {
                            if (nVassalProvinces.get(i23).intValue() == CFG.game.getCiv(nCivID).getCapitalProvinceID()) {
                                nCapitalProvinceID = CFG.game.getCiv(nCivID).getCapitalProvinceID();
                                break;
                            }
                            i23--;
                        } else {
                            break;
                        }
                    }
                }
                if (nCapitalProvinceID < 0) {
                    if (nCivID_TRUE_Ideology_CivID >= 0 && CFG.game.getCiv(nCivID_TRUE_Ideology_CivID).getCapitalProvinceID() >= 0) {
                        int i24 = nVassalProvinces.size() - 1;
                        while (true) {
                            if (i24 >= 0) {
                                if (nVassalProvinces.get(i24).intValue() == CFG.game.getCiv(nCivID_TRUE_Ideology_CivID).getCapitalProvinceID()) {
                                    nCapitalProvinceID = CFG.game.getCiv(nCivID_TRUE_Ideology_CivID).getCapitalProvinceID();
                                    break;
                                }
                                i24--;
                            } else {
                                break;
                            }
                        }
                    }
                    if (nCapitalProvinceID < 0) {
                        for (int i25 = nVassalProvinces.size() - 1; i25 >= 0; i25--) {
                            if (CFG.game.getProvince(nVassalProvinces.get(i25).intValue()).getCore().getHaveACore(nCivID_TRUE_Ideology_CivID)) {
                                if (nCapitalProvinceID < 0) {
                                    nCapitalProvinceID = nVassalProvinces.get(i25).intValue();
                                } else if (CFG.oR.nextInt(100) < 33) {
                                    nCapitalProvinceID = nVassalProvinces.get(i25).intValue();
                                }
                            }
                        }
                    }
                    if (nCapitalProvinceID < 0) {
                        int tBest = 0;
                        for (int i = nVassalProvinces.size() - 1; i >= 0; i--) {
                            if (CFG.game.getProvince(nVassalProvinces.get(i).intValue()).getPopulationData().getPopulation() > CFG.game.getProvince(nVassalProvinces.get(tBest).intValue()).getPopulationData().getPopulation()) {
                                tBest = i;
                            }
                        }
                        nCapitalProvinceID = nVassalProvinces.get(tBest).intValue();
                    }
                }
            }
            if (createScenarioAddCivilization(nTag, nCapitalProvinceID, false, true, true)) {
                for (int i26 = 0; i26 < CFG.game.getPlayersSize(); i26++) {
                    CFG.game.getPlayer(i26).addMetCivilization(true);
                }
            }
            if (nCivID < 0) {
                nCivID = getCivsSize() - 1;
                int i27 = 1;
                while (true) {
                    if (i27 < getCivsSize()) {
                        if (getCiv(i27).getCivTag().equals(nTag)) {
                            nCivID = i27;
                            break;
                        }
                        i27++;
                    } else {
                        break;
                    }
                }
            }
            CFG.game.getCiv(nCivID).setPuppetOfCivID(nVassalOfCivID);
            CFG.game.getCiv(nCivID).setVassalLiberityDesire(CFG.DEFAULT_RESEARACH_LEVEL);
            int r = CFG.game.getCiv(nVassalOfCivID).getR();
            int g = CFG.game.getCiv(nVassalOfCivID).getG();
            int b = CFG.game.getCiv(nVassalOfCivID).getB();
            int r2 = Math.max(0, (int) (((double) r) * 0.8d));
            int g2 = Math.max(0, (int) (((double) g) * 0.8d));
            int b2 = Math.max(0, (int) (((double) b) * 0.8d));
            CFG.game.getCiv(nCivID).setR(r2);
            CFG.game.getCiv(nCivID).setG(g2);
            CFG.game.getCiv(nCivID).setB(b2);
            CFG.game.getCiv(nCivID).setMoney((long) (((float) CFG.game.getCiv(nVassalOfCivID).getMoney()) * (0.75f + (((float) CFG.oR.nextInt(22)) / 100.0f))));
            String tempRealTag = CFG.ideologiesManager.getRealTag(nTag);
            for (int i4 = 0; i4 < nVassalProvinces.size(); i4++) {
                int tArmyCivID = getProvince(nVassalProvinces.get(i4).intValue()).getCivID();
                int tArmy = getProvince(nVassalProvinces.get(i4).intValue()).getArmy(0);
                int tArmyOwner = getProvince(nVassalProvinces.get(i4).intValue()).getArmyCivID(nVassalOfCivID);
                getProvince(nVassalProvinces.get(i4).intValue()).updateArmy(300);
                getProvince(nVassalProvinces.get(i4).intValue()).setTrueOwnerOfProvince(nCivID);
                getProvince(nVassalProvinces.get(i4).intValue()).setCivID(nCivID, false);
                getProvince(nVassalProvinces.get(i4).intValue()).updateArmy(tArmyCivID, tArmy);
                getProvince(nVassalProvinces.get(i4).intValue()).updateArmy(nVassalOfCivID, tArmyOwner);
                getProvince(nVassalProvinces.get(i4).intValue()).setRevolutionaryRisk(getProvince(nVassalProvinces.get(i4).intValue()).getRevolutionaryRisk() * 0.185f);
                getProvince(nVassalProvinces.get(i4).intValue()).iIncome_Taxation = 1.0f;
                getProvince(nVassalProvinces.get(i4).intValue()).iIncome_Production = 1.0f;
                getProvince(nVassalProvinces.get(i4).intValue()).iAdministrationCost = CFG.DEFAULT_RESEARACH_LEVEL;
                getProvince(nVassalProvinces.get(i4).intValue()).saveProvinceData.iNumOfTurnsWithBalanceOnMinus = 0;
                for (int j = getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getNationalitiesSize() - 1; j >= 0; j--) {
                    if (CFG.ideologiesManager.getRealTag(CFG.game.getCiv(getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getCivID(j)).getCivTag()).equals(tempRealTag)) {
                        getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().setPopulationOfCivID(nCivID, getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getPopulationID(j));
                        getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().setPopulationOfCivID(getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getCivID(j), 0);
                    } else {
                        int randPop2 = (int) (((float) getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getPopulationOfCivID(getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getCivID(j))) * (0.05f + (((float) CFG.oR.nextInt(20)) / 100.0f)));
                        if (randPop2 > 0) {
                            getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().setPopulationOfCivID(getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getCivID(j), getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getPopulationOfCivID(getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getCivID(j)) - randPop2);
                            getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().setPopulationOfCivID(nCivID, getProvince(nVassalProvinces.get(i4).intValue()).getPopulationData().getPopulationOfCivID(nCivID) + randPop2);
                        }
                    }
                }
            }
            for (int j2 = getProvince(nCapitalProvinceID).getPopulationData().getNationalitiesSize() - 1; j2 >= 0; j2--) {
                if (getProvince(nCapitalProvinceID).getPopulationData().getCivID(j2) != nCivID && (randPop = (int) (((float) getProvince(nCapitalProvinceID).getPopulationData().getPopulationOfCivID(getProvince(nCapitalProvinceID).getPopulationData().getCivID(j2))) * (0.225f + (((float) CFG.oR.nextInt(32)) / 100.0f)))) > 0) {
                    getProvince(nCapitalProvinceID).getPopulationData().setPopulationOfCivID(getProvince(nCapitalProvinceID).getPopulationData().getCivID(j2), getProvince(nCapitalProvinceID).getPopulationData().getPopulationOfCivID(getProvince(nCapitalProvinceID).getPopulationData().getCivID(j2)) - randPop);
                    getProvince(nCapitalProvinceID).getPopulationData().setPopulationOfCivID(nCivID, getProvince(nCapitalProvinceID).getPopulationData().getPopulationOfCivID(nCivID) + randPop);
                }
            }
            CFG.game.getProvince(nCapitalProvinceID).updateArmy(500);
            CFG.game.getProvince(nCapitalProvinceID).updateArmy(nVassalOfCivID, tempArmy0);
            CFG.game.getCiv(nCivID).setTechnologyLevel(CFG.game.getCiv(nVassalOfCivID).getTechnologyLevel() * (0.72f + (((float) CFG.oR.nextInt(22)) / 100.0f)));
            CFG.game.getProvince(nCapitalProvinceID).getCore().addNewCore(nCivID, Game_Calendar.TURN_ID);
            getCiv(nCivID).buildNumOfUnits();
            CFG.gameAction.updateCivsHappiness(nCivID);
            CFG.gameAction.updateCivsMovementPoints(nCivID);
            CFG.gameAction.updateCivsDiplomacyPoints(nCivID);
            CFG.gameAction.buildRank_Score(nCivID);
            CFG.gameAction.buildRank_Score(nVassalOfCivID);
            CFG.gameAction.buildRank_Positions();
            int tActiveProvince = CFG.game.getActiveProvinceID();
            CFG.game.setActiveProvinceID(-1);
            CFG.game.setActiveProvinceID(tActiveProvince);
            CFG.game.buildCivilizationRegions(nCivID);
            CFG.game.buildCivilizationRegions(nVassalOfCivID);
            CFG.game.setCivRelation_OfCivB(nVassalOfCivID, nCivID, Math.min(CFG.game.getCivRelation_OfCivB(nVassalOfCivID, nCivID) + 65.0f, 65.0f));
            CFG.game.setCivRelation_OfCivB(nCivID, nVassalOfCivID, Math.min(CFG.game.getCivRelation_OfCivB(nCivID, nVassalOfCivID) + 65.0f, 65.0f));
            CFG.historyManager.addHistoryLog(new HistoryLog_IsVassal(nVassalOfCivID, nCivID));
            return nCivID;
        } catch (IndexOutOfBoundsException ex) {
            CFG.exceptionStack(ex);
            return -1;
        } catch (NullPointerException ex2) {
            CFG.exceptionStack(ex2);
            return -1;
        }
    }

    public final boolean createScenarioAddCivilization(String nCivTag, int nProvinceID, boolean rebuildCores) {
        return createScenarioAddCivilization(nCivTag, nProvinceID, rebuildCores, true, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v13, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v16, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v13, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v19, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v17, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v22, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v21, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v25, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v25, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v28, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v29, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v31, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v32, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v85, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v74, resolved type: age.of.civilizations2.jakowski.lukasz.Civilization_GameData3} */
    /* JADX WARNING: Code restructure failed: missing block: B:29:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations/" + age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager.getRealTag(r23)).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x025f, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.isAndroid() != false) goto L_0x0261;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.local("game/civilizations_editor/" + r23 + "/" + r23).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations_editor/" + r23 + "/" + r23).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations_editor/" + age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager.getRealTag(r23) + "/" + age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager.getRealTag(r23)).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations_editor/" + r23 + "/" + r23).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:?, code lost:
        r18 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations_editor/" + age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager.getRealTag(r23) + "/" + age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager.getRealTag(r23)).readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:?, code lost:
        r18 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) age.of.civilizations2.jakowski.lukasz.CFG.deserialize(com.badlogic.gdx.Gdx.files.internal("game/civilizations/ran").readBytes());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x0419, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x041a, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x0436, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0437, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x043b, code lost:
        r12 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x043c, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x0440, code lost:
        r12 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x0441, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r12);
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:61:0x0419 A[ExcHandler: ClassNotFoundException (r9v1 'e' java.lang.ClassNotFoundException A[CUSTOM_DECLARE]), Splitter:B:16:0x0086] */
    /* JADX WARNING: Removed duplicated region for block: B:67:0x0436 A[ExcHandler: IOException (r9v0 'e' java.io.IOException A[CUSTOM_DECLARE]), Splitter:B:16:0x0086] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x0440 A[ExcHandler: NullPointerException (r12v0 'ex' java.lang.NullPointerException A[CUSTOM_DECLARE]), Splitter:B:16:0x0086] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final boolean createScenarioAddCivilization(java.lang.String r23, int r24, boolean r25, boolean r26, boolean r27) {
        /*
            r22 = this;
            java.lang.String r2 = "ran"
            r0 = r23
            boolean r2 = r0.equals(r2)
            if (r2 != 0) goto L_0x0082
            r17 = 0
        L_0x000c:
            int r2 = r22.getCivsSize()
            r0 = r17
            if (r0 >= r2) goto L_0x0082
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            java.lang.String r2 = r2.getCivTag()
            r0 = r23
            boolean r2 = r2.equals(r0)
            if (r2 != 0) goto L_0x002b
            int r17 = r17 + 1
            goto L_0x000c
        L_0x002b:
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            int r2 = r2.getCapitalProvinceID()
            if (r2 < 0) goto L_0x004f
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            int r2 = r2.getCapitalProvinceID()
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r2)
            r3 = 0
            r2.setIsCapital(r3)
        L_0x004f:
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            r0 = r24
            r2.setCapitalProvinceID(r0)
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            int r2 = r2.getCapitalProvinceID()
            if (r2 < 0) goto L_0x0080
            r0 = r22
            r1 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r1)
            int r2 = r2.getCapitalProvinceID()
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r2)
            r3 = 1
            r2.setIsCapital(r3)
        L_0x0080:
            r2 = 0
        L_0x0081:
            return r2
        L_0x0082:
            r16 = 0
            r18 = 0
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x0229, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
        L_0x00ae:
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r2 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r23
            int r20 = r2.getIdeologyID(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r2 = new com.badlogic.gdx.graphics.Color     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r18.getR()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r3 = (float) r3     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r4 = 1132396544(0x437f0000, float:255.0)
            float r3 = r3 / r4
            int r4 = r18.getG()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r4 = (float) r4     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r5 = 1132396544(0x437f0000, float:255.0)
            float r4 = r4 / r5
            int r5 = r18.getB()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r5 = (float) r5     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r6 = 1132396544(0x437f0000, float:255.0)
            float r5 = r5 / r6
            r6 = 1061578342(0x3f466666, float:0.775)
            r2.<init>(r3, r4, r5, r6)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r3 = new com.badlogic.gdx.graphics.Color     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Ideology r4 = r4.getIdeology(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r4 = r4.getColor()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r4 = r4.r     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r5 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Ideology r5 = r5.getIdeology(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r5 = r5.getColor()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r5 = r5.g     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r6 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Ideology r6 = r6.getIdeology(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r6 = r6.getColor()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            float r6 = r6.b     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r7 = 1046898278(0x3e666666, float:0.225)
            r3.<init>(r4, r5, r6, r7)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.getColorMixed(r2, r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r19
            float r2 = r0.r     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = 1132396544(0x437f0000, float:255.0)
            float r2 = r2 * r3
            int r2 = (int) r2     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r18
            r0.setR(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r19
            float r2 = r0.g     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = 1132396544(0x437f0000, float:255.0)
            float r2 = r2 * r3
            int r2 = (int) r2     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r18
            r0.setG(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r19
            float r2 = r0.b     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = 1132396544(0x437f0000, float:255.0)
            float r2 = r2 * r3
            int r2 = (int) r2     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r18
            r0.setB(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            java.util.List<age.of.civilizations2.jakowski.lukasz.Civilization> r0 = r0.lCivs     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r21 = r0
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = new age.of.civilizations2.jakowski.lukasz.Civilization     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r4 = r18.getR()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r5 = r18.getG()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r6 = r18.getB()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r8 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = r23
            r7 = r24
            r2.<init>(r3, r4, r5, r6, r7, r8)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r21
            r0.add(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            java.util.List<age.of.civilizations2.jakowski.lukasz.Civilization> r2 = r0.lCivs     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.size()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            r0.iCivsSize = r2     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r3 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3 + -1
            r2.setCivID(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getCapitalProvinceID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            if (r2 < 0) goto L_0x01ec
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getCapitalProvinceID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r3 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3 + -1
            r2.setTrueOwnerOfProvince(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getCapitalProvinceID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r3 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3 + -1
            r4 = 0
            r0 = r27
            r2.setCivID(r3, r4, r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getCapitalProvinceID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Game_Scenarios r3 = r22.getGameScenarios()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3.getScenario_StartingArmyInCapitals()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r2.updateArmy(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
        L_0x01ec:
            r0 = r22
            int r2 = r0.iCivsSize     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2 + -1
            r0 = r22
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r0.getCiv(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = -999999(0xfffffffffff0bdc1, double:NaN)
            r2.setMoney(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.CFG.addCreateScenario_TechnologyLevelsByContinents_Civ()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Game r2 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r22.getCivsSize()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3 + -1
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r2.getCiv(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = 1
            r2.buildDiplomacy(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r17 = 0
        L_0x0213:
            int r2 = r22.getCivsSize()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r17
            if (r0 >= r2) goto L_0x03e5
            age.of.civilizations2.jakowski.lukasz.Game r2 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r17
            age.of.civilizations2.jakowski.lukasz.Civilization r2 = r2.getCiv(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r2.updateDiplomacy_AfterAddingCivilization()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r17 = r17 + 1
            goto L_0x0213
        L_0x0229:
            r9 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x025a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x025a:
            r12 = move-exception
            boolean r2 = age.of.civilizations2.jakowski.lukasz.CFG.isAndroid()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            if (r2 == 0) goto L_0x0354
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.local(r3)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x0297, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x0297:
            r10 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x02ce, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x02ce:
            r14 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.local(r3)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x0311, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x0311:
            r15 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x0354:
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.StringBuilder r3 = r3.append(r0)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x038a, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x038a:
            r13 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r3.<init>()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "game/civilizations_editor/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r4 = "/"
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Ideologies_Manager r4 = age.of.civilizations2.jakowski.lukasz.CFG.ideologiesManager     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r23
            java.lang.String r4 = r4.getRealTag(r0)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.StringBuilder r3 = r3.append(r4)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.String r3 = r3.toString()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ GdxRuntimeException -> 0x03cd, ClassNotFoundException -> 0x0419, IOException -> 0x0436, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x03cd:
            r11 = move-exception
            com.badlogic.gdx.Files r2 = com.badlogic.gdx.Gdx.files     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            java.lang.String r3 = "game/civilizations/ran"
            com.badlogic.gdx.files.FileHandle r16 = r2.internal(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            byte[] r2 = r16.readBytes()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            java.lang.Object r2 = age.of.civilizations2.jakowski.lukasz.CFG.deserialize(r2)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r2
            age.of.civilizations2.jakowski.lukasz.Civilization_GameData3 r0 = (age.of.civilizations2.jakowski.lukasz.Civilization_GameData3) r0     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r18 = r0
            goto L_0x00ae
        L_0x03e5:
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r2 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getActivePalletID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            if (r2 <= 0) goto L_0x03fe
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r2 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            age.of.civilizations2.jakowski.lukasz.Pallet_Manager r3 = age.of.civilizations2.jakowski.lukasz.CFG.palletManager     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r3 = r3.getActivePalletID()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r4 = r22.getCivsSize()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r4 = r4 + -1
            r2.loadCivilizationPalletColor(r3, r4)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
        L_0x03fe:
            r17 = 0
        L_0x0400:
            age.of.civilizations2.jakowski.lukasz.Game r2 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r2 = r2.getPlayersSize()     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r17
            if (r0 >= r2) goto L_0x041d
            age.of.civilizations2.jakowski.lukasz.Game r2 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r0 = r17
            age.of.civilizations2.jakowski.lukasz.Player r2 = r2.getPlayer(r0)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            r3 = 0
            r2.addMetCivilization(r3)     // Catch:{ ClassNotFoundException -> 0x0419, IOException -> 0x0436, GdxRuntimeException -> 0x043b, NullPointerException -> 0x0440 }
            int r17 = r17 + 1
            goto L_0x0400
        L_0x0419:
            r9 = move-exception
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r9)
        L_0x041d:
            if (r24 < 0) goto L_0x0433
            if (r25 == 0) goto L_0x0445
            r0 = r22
            r1 = r24
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r1)
            r2.buildProvinceCore()
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r2 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData
            r0 = r24
            r2.clearCoresData(r0)
        L_0x0433:
            r2 = 1
            goto L_0x0081
        L_0x0436:
            r9 = move-exception
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r9)
            goto L_0x041d
        L_0x043b:
            r12 = move-exception
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r12)
            goto L_0x041d
        L_0x0440:
            r12 = move-exception
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r12)
            goto L_0x041d
        L_0x0445:
            if (r26 == 0) goto L_0x0433
            r0 = r22
            r1 = r24
            age.of.civilizations2.jakowski.lukasz.Province r2 = r0.getProvince(r1)
            age.of.civilizations2.jakowski.lukasz.Province_Core r2 = r2.getCore()
            r0 = r22
            int r3 = r0.iCivsSize
            int r3 = r3 + -1
            int r4 = age.of.civilizations2.jakowski.lukasz.Game_Calendar.TURN_ID
            r2.addNewCore(r3, r4)
            goto L_0x0433
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.createScenarioAddCivilization(java.lang.String, int, boolean, boolean, boolean):boolean");
    }

    public final void createScenarioRemoveCivilization(int nRemoveCivID) {
        if (nRemoveCivID != 0) {
            getCiv(nRemoveCivID).getFlag().getTexture().dispose();
            if (getCiv(nRemoveCivID).getCapitalProvinceID() >= 0) {
                getProvince(getCiv(nRemoveCivID).getCapitalProvinceID()).setIsCapital(false);
            }
            CFG.removeCreateScenario_TechnologyLevelsByContinents_Civ(nRemoveCivID - 1);
            if (this.lCivs.get(nRemoveCivID).getAllianceID() > 0) {
                getAlliance(this.lCivs.get(nRemoveCivID).getAllianceID()).removeCivilization(nRemoveCivID);
                this.lCivs.get(nRemoveCivID).setAllianceID(0);
                checkAlliances();
            }
            for (int i = 1; i < getAlliancesSize(); i++) {
                getAlliance(i).updateCivsIDs_AfterRemoveCiv(nRemoveCivID);
            }
            for (int i2 = 1; i2 < getCivsSize(); i2++) {
                CFG.game.getCiv(i2).updateDiplomacy_AfterRemoveCivilization_Relations(nRemoveCivID - 1);
            }
            for (int i3 = 1; i3 < nRemoveCivID; i3++) {
                CFG.game.getCiv(i3).updateDiplomacy_AfterRemoveCivilization((nRemoveCivID - 1) - i3);
            }
            for (int i4 = 0; i4 < CFG.game.getProvincesSize(); i4++) {
                int j = 1;
                while (true) {
                    if (j >= CFG.game.getProvince(i4).getCivsSize()) {
                        break;
                    }
                    if (CFG.game.getProvince(i4).getCivID(j) == nRemoveCivID) {
                        CFG.game.getProvince(i4).updateArmy(CFG.game.getProvince(i4).getCivID(j), 0);
                    } else if (CFG.game.getProvince(i4).getCivID(j) > nRemoveCivID) {
                        ArrayList<Integer> tempCivs = new ArrayList<>();
                        ArrayList<Integer> tempArmies = new ArrayList<>();
                        for (int k = 1; k < CFG.game.getProvince(i4).getCivsSize(); k++) {
                            if (CFG.game.getProvince(i4).getCivID(k) != nRemoveCivID) {
                                tempCivs.add(Integer.valueOf(CFG.game.getProvince(i4).getCivID(k)));
                                tempArmies.add(Integer.valueOf(CFG.game.getProvince(i4).getArmy(k)));
                            }
                        }
                        for (int k2 = 0; k2 < tempCivs.size(); k2++) {
                            CFG.game.getProvince(i4).updateArmy(tempCivs.get(k2).intValue(), 0);
                            if (tempCivs.get(k2).intValue() > nRemoveCivID) {
                                tempCivs.set(k2, Integer.valueOf(tempCivs.get(k2).intValue() - 1));
                            }
                        }
                        for (int k3 = 0; k3 < tempCivs.size(); k3++) {
                            CFG.game.getProvince(i4).updateArmy(tempCivs.get(k3).intValue(), tempArmies.get(k3).intValue());
                        }
                    }
                    j++;
                }
            }
            CFG.holyRomanEmpire_Manager.getHRE().updateHRE_AfterRemoveCivilization(nRemoveCivID);
            this.lCivs.remove(nRemoveCivID);
            this.iCivsSize = this.lCivs.size();
            for (int i5 = 1; i5 < this.iCivsSize; i5++) {
                if (getCiv(i5).getCivID() != getCiv(i5).getPuppetOfCivID()) {
                    if (getCiv(i5).getPuppetOfCivID() > nRemoveCivID) {
                        getCiv(i5).setPuppetOfCivID(getCiv(i5).getPuppetOfCivID() - 1);
                    } else if (getCiv(i5).getPuppetOfCivID() == nRemoveCivID) {
                        getCiv(i5).setPuppetOfCivID(getCiv(i5).getCivID());
                    }
                }
                if (getCiv(i5).getCivID() == getCiv(i5).getPuppetOfCivID()) {
                    getCiv(i5).setPuppetOfCivID(i5);
                }
                getCiv(i5).setCivID_Just(i5);
            }
            CFG.eventsManager.updateEventsAferRemoveCiv(nRemoveCivID);
            for (int i6 = 0; i6 < this.iProvincesSize; i6++) {
                if (getProvince(i6).getCivID() > nRemoveCivID) {
                    getProvince(i6).setCivID_Just(getProvince(i6).getCivID() - 1);
                    if (getProvince(i6).getCore() != null) {
                        int j2 = 0;
                        while (j2 < getProvince(i6).getCore().getCivsSize()) {
                            if (getProvince(i6).getCore().getCivID(j2) > nRemoveCivID) {
                                getProvince(i6).getCore().setCivID_Editor(j2, getProvince(i6).getCore().getCivID(j2) - 1);
                            } else if (getProvince(i6).getCore().getCivID(j2) == nRemoveCivID) {
                                getProvince(i6).getCore().removeCore(nRemoveCivID);
                                j2--;
                            }
                            j2++;
                        }
                    }
                } else if (getProvince(i6).getCivID() == nRemoveCivID) {
                    getProvince(i6).setCivID_Just(0);
                    getProvince(i6).resetCore();
                    getProvince(i6).updateProvinceBorder();
                } else if (getProvince(i6).getCore() != null) {
                    int j3 = 0;
                    while (j3 < getProvince(i6).getCore().getCivsSize()) {
                        if (getProvince(i6).getCore().getCivID(j3) > nRemoveCivID) {
                            getProvince(i6).getCore().setCivID_Editor(j3, getProvince(i6).getCore().getCivID(j3) - 1);
                        } else if (getProvince(i6).getCore().getCivID(j3) == nRemoveCivID) {
                            getProvince(i6).getCore().removeCore(nRemoveCivID);
                            j3--;
                        }
                        j3++;
                    }
                }
            }
            CFG.province_Cores_GameData.updateAfterRemove(nRemoveCivID);
            for (int i7 = CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.size() - 1; i7 >= 0; i7--) {
                if (CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.get(i7).intValue() == nRemoveCivID) {
                    CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.remove(i7);
                } else if (CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.get(i7).intValue() > nRemoveCivID) {
                    CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.set(i7, Integer.valueOf(CFG.lCREATE_SCENARIO_IS_PART_OF_CAMPAIGN_CIVSIDS.get(i7).intValue() - 1));
                }
            }
        }
    }

    public final Civilization getNeutralCivilization() {
        return new Civilization("neu", Input.Keys.F8, Input.Keys.F8, 221, -1, 0);
    }

    public final void sortCivilizationsAZ() {
        this.lCivsSortedAZ.clear();
        ArrayList<Integer> lTempNames = new ArrayList<>();
        for (int i = 1; i < getCivsSize(); i++) {
            lTempNames.add(Integer.valueOf(i));
        }
        while (lTempNames.size() > 0) {
            int toAddID = 0;
            for (int i2 = lTempNames.size() - 1; i2 > 0; i2--) {
                if (CFG.compareAlphabetic_TwoString(getCiv(lTempNames.get(toAddID).intValue()).getCivName(), getCiv(lTempNames.get(i2).intValue()).getCivName())) {
                    toAddID = i2;
                }
            }
            this.lCivsSortedAZ.add(lTempNames.get(toAddID));
            lTempNames.remove(toAddID);
        }
    }

    public final int getSortedCivsSize() {
        return this.lCivsSortedAZ.size();
    }

    public final int getSortedCivsAZ(int i) {
        return this.lCivsSortedAZ.get(i).intValue();
    }

    public final void checkArmies() {
        for (int i = 0; i < getProvincesSize(); i++) {
            if (getProvince(i).getWasteland() < 0 && !getProvince(i).getSeaProvince()) {
                if (getProvince(i).getCivID() != 0) {
                    int j = 1;
                    while (j < getProvince(i).getCivsSize()) {
                        if (!getSelectedProvinces().canAddArmy(getProvince(i).getCivID(j), i)) {
                            getProvince(i).updateArmy(getProvince(i).getCivID(j), 0);
                            j--;
                        } else if (getProvince(i).getCivID(j) == getProvince(i).getCivID()) {
                            getProvince(i).updateArmy(getProvince(i).getArmy(j));
                            getProvince(i).removeArmy_ID(j);
                            j--;
                        }
                        j++;
                    }
                } else if (getProvince(i).getCivsSize() > 1) {
                    while (getProvince(i).getCivsSize() > 1) {
                        try {
                            getProvince(i).updateArmy(getProvince(i).getCivID(1), 0);
                        } catch (StackOverflowError e) {
                            if (CFG.LOGS) {
                                CFG.exceptionStack(e);
                            }
                        } catch (IndexOutOfBoundsException ex) {
                            if (CFG.LOGS) {
                                CFG.exceptionStack(ex);
                            }
                        }
                    }
                }
            }
        }
    }

    public final void loadCities() {
        for (int i = 0; i < CFG.game.getProvincesSize(); i++) {
            CFG.game.getProvince(i).clearCities();
        }
        this.lCities = this.gameCities.loadCities();
        try {
            String[] tagsSPLITED = Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/Age_of_Civilizations").readString().split(";");
            for (int i2 = 0; i2 < tagsSPLITED.length; i2++) {
                try {
                    City tempC = (City) CFG.deserialize(Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/" + tagsSPLITED[i2]).readBytes());
                    tempC.setCityLevel(CFG.getEditorCityLevel(tempC.getCityLevel()));
                    this.lCities.add(tempC);
                } catch (ClassNotFoundException e) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(e);
                    }
                } catch (IOException e2) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(e2);
                    }
                }
            }
        } catch (GdxRuntimeException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
        buildCitiesProvinceID();
    }

    public final void buildCitiesProvinceID() {
        for (int i = this.lCities.size() - 1; i >= 0; i--) {
            int j = 0;
            while (true) {
                if (j >= CFG.game.getProvincesSize()) {
                    break;
                }
                if (getProvince(j).getMinX() <= this.lCities.get(i).getPosX() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMaxX() >= this.lCities.get(i).getPosX() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMinY() <= this.lCities.get(i).getPosY() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMaxY() >= this.lCities.get(i).getPosY() * CFG.map.getMapBG().getMapScale()) {
                    if (pathContains(j, CFG.map.getMapBG().getMapScale() * this.lCities.get(i).getPosX(), this.lCities.get(i).getPosY() * CFG.map.getMapBG().getMapScale())) {
                        getProvince(j).addCity(this.lCities.get(i));
                        break;
                    }
                }
                j++;
            }
        }
        this.lCities.clear();
        this.lCities = null;
    }

    public final void loadMountains() {
        this.lMountains = this.gameMountains.loadMountains();
        buildMountainsProvinceID();
        loadWonders();
    }

    public final void buildMountainsProvinceID() {
        int iSize = this.lMountains.size();
        for (int i = 0; i < iSize; i++) {
            int j = 0;
            while (true) {
                if (j >= CFG.game.getProvincesSize()) {
                    break;
                }
                if (getProvince(j).getMinX() <= this.lMountains.get(i).getPosX() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMaxX() >= this.lMountains.get(i).getPosX() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMinY() <= this.lMountains.get(i).getPosY() * CFG.map.getMapBG().getMapScale() && getProvince(j).getMaxY() >= this.lMountains.get(i).getPosY() * CFG.map.getMapBG().getMapScale()) {
                    if (pathContains(j, CFG.map.getMapBG().getMapScale() * this.lMountains.get(i).getPosX(), this.lMountains.get(i).getPosY() * CFG.map.getMapBG().getMapScale())) {
                        getProvince(j).addMountain(this.lMountains.get(i));
                        break;
                    }
                }
                j++;
            }
        }
        this.lMountains.clear();
        this.lMountains = null;
    }

    public final void loadWonders() {
        this.wondersManager.lWonders = this.gameWonders.loadWonders();
        this.wondersManager.buildWondersProvinceID();
    }

    public final void addPlayer(int nCivID) {
        this.lPlayers.add(new Player(nCivID));
        this.iPlayersSize = this.lPlayers.size();
    }

    public final void addPlayer() {
        if (getPlayersSize() < getGameScenarios().getNumOfCivs(getScenarioID())) {
            int tempResult = new Random().nextInt(this.gameScenarios.getNumOfCivs(this.scenarioID)) + 1;
            try {
                if (getCiv(tempResult).getNumOfProvinces() == 0) {
                    addPlayer();
                    return;
                }
            } catch (IndexOutOfBoundsException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                }
            }
            int i = 0;
            while (i < this.iPlayersSize) {
                if (getPlayer(i).getCivID() != tempResult) {
                    i++;
                } else {
                    addPlayer();
                    return;
                }
            }
            this.lPlayers.add(new Player(tempResult));
            this.iPlayersSize = this.lPlayers.size();
            CFG.menuManager.rebuildCivilizations_Info_Players();
        }
    }

    public final void removePlayer(int i) {
        if (i == 0) {
            try {
                if (getPlayersSize() == 1) {
                    return;
                }
            } catch (IndexOutOfBoundsException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                    return;
                }
                return;
            } catch (NullPointerException e) {
                return;
            }
        }
        getPlayer(i).disposePlayersFlag();
        if (this.lPlayers.get(i).getCivID() > 0) {
            CFG.game.getCiv(this.lPlayers.get(i).getCivID()).setControlledByPlayer(false);
        }
        this.lPlayers.remove(i);
        this.iPlayersSize = this.lPlayers.size();
        if (CFG.menuManager.getInCreateNewGame()) {
            CFG.menuManager.rebuildCivilizations_Info_Players();
        }
    }

    public final void checkPlayersCivilizations() {
        for (int i = 0; i < getPlayersSize(); i++) {
            if (getPlayer(i).getCivID() > 0 && getCiv(getPlayer(i).getCivID()).getNumOfProvinces() == 0) {
                randomPlayerCivilizations(i);
            }
        }
    }

    public final void update() {
        if (CFG.menuManager.getInGameView() && RTS.isEnabled() && !RTS.PAUSE) {
            RTS.updateTime();
            CFG.setRender_3(true);
        }
        if (getActiveProvinceID() >= 0 && (getProvince(getActiveProvinceID()).getDrawProvince() || checkHighlightedProvince() || this.lCurrentRegroupArmyLine.size() > 0)) {
            this.activeProvince_Animation_Data.update();
            this.highlightedProvince_Animation_UpdateOffset.updateOffset();
        }
        try {
            if ((this.currentMoveUnitsLine != null && (getProvince(this.currentMoveUnitsLine.getFromProvinceID()).getDrawProvince() || getProvince(this.currentMoveUnitsLine.getToProvinceID()).getDrawProvince())) || this.iHighlightedProvincesSize > 0 || this.lCurrentRegroupArmyLine.size() > 0 || this.drawMoveUnitsArmy_UpdateAnimation || getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsSize() > 0 || getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0 || getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrateSize() > 0 || CFG.gameAction.getCurrentMoveunits() != null || this.iMoveUnits_JustDraw_AnotherArmiesSize > 0) {
                updatePath();
            }
        } catch (IndexOutOfBoundsException e) {
            if (CFG.LOGS) {
                CFG.exceptionStack(e);
            }
        }
    }

    public final boolean checkHighlightedProvince() {
        for (int i = 0; i < this.iHighlightedProvincesSize; i++) {
            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getDrawProvince()) {
                return true;
            }
        }
        return false;
    }

    public final void updateProvincesInView() {
        if (this.updateProvincesInView) {
            this.updateProvincesInView = false;
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                getProvince(getProvinceInViewID(i)).setDrawProvince(false);
            }
            for (int i2 = 0; i2 < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i2++) {
                getProvince(getSeaProvinceInViewID(i2)).setDrawProvince(false);
            }
            for (int i3 = 0; i3 < CFG.NUM_OF_WASTELAND_PROVINCES_IN_VIEW; i3++) {
                getProvince(getWastelandProvinceInViewID(i3)).setDrawProvince(false);
            }
            CFG.NUM_OF_PROVINCES_IN_VIEW = 0;
            CFG.NUM_OF_SEA_PROVINCES_IN_VIEW = 0;
            CFG.NUM_OF_WASTELAND_PROVINCES_IN_VIEW = 0;
            this.lProvincesInView.clear();
            this.lSeaProvincesInView.clear();
            this.lWastelandProvincesInView.clear();
            for (int i4 = 0; i4 < this.iRegionsSize; i4++) {
                if (inViewY(this.lRegions.get(i4).getMinY(), this.lRegions.get(i4).getMaxY())) {
                    if (inViewX(this.lRegions.get(i4).getMinX(), this.lRegions.get(i4).getMaxX()) || inViewX2(this.lRegions.get(i4).getMinX(), this.lRegions.get(i4).getMaxX())) {
                        updateDrawRegionProvinces(i4);
                    } else if (this.lRegions.get(i4).getBelowZero() && inViewXBelowZero(this.lRegions.get(i4).getMinX(), this.lRegions.get(i4).getMaxX())) {
                        updateDrawRegionProvinces(i4);
                    }
                }
            }
            CFG.NUM_OF_PROVINCES_IN_VIEW = this.lProvincesInView.size();
            CFG.NUM_OF_SEA_PROVINCES_IN_VIEW = this.lSeaProvincesInView.size();
            CFG.NUM_OF_WASTELAND_PROVINCES_IN_VIEW = this.lWastelandProvincesInView.size();
        }
    }

    public final void clearProvincesInView() {
        for (int i = 0; i < getProvincesSize(); i++) {
            getProvince(i).setDrawProvince(false);
        }
        CFG.NUM_OF_PROVINCES_IN_VIEW = 0;
        CFG.NUM_OF_SEA_PROVINCES_IN_VIEW = 0;
        CFG.NUM_OF_WASTELAND_PROVINCES_IN_VIEW = 0;
        this.lProvincesInView.clear();
        this.lSeaProvincesInView.clear();
        this.lWastelandProvincesInView.clear();
    }

    public final void updateDrawRegionProvinces(int iID) {
        if (inViewY_WholeRegion(this.lRegions.get(iID).getMinY(), this.lRegions.get(iID).getMaxY())) {
            if (inViewX_WholeRegion(this.lRegions.get(iID).getMinX(), this.lRegions.get(iID).getMaxX())) {
                for (int i = 0; i < this.lRegions.get(iID).getProvincesSize(); i++) {
                    getProvince(this.lRegions.get(iID).getProvince(i)).setTranslateProvincePosX(CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + CFG.map.getMapCoordinates().getPosX());
                    getProvince(this.lRegions.get(iID).getProvince(i)).setDrawProvince(true);
                    if (getProvince(this.lRegions.get(iID).getProvince(i)).getWasteland() >= 0) {
                        this.lWastelandProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i)));
                    } else if (getProvince(this.lRegions.get(iID).getProvince(i)).getSeaProvince()) {
                        this.lSeaProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i)));
                    } else {
                        this.lProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i)));
                    }
                }
                return;
            } else if (inViewX_WholeRegion2(this.lRegions.get(iID).getMinX(), this.lRegions.get(iID).getMaxX())) {
                for (int i2 = 0; i2 < this.lRegions.get(iID).getProvincesSize(); i2++) {
                    getProvince(this.lRegions.get(iID).getProvince(i2)).setTranslateProvincePosX(CFG.map.getMapCoordinates().getPosX());
                    getProvince(this.lRegions.get(iID).getProvince(i2)).setDrawProvince(true);
                    if (getProvince(this.lRegions.get(iID).getProvince(i2)).getWasteland() >= 0) {
                        this.lWastelandProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i2)));
                    } else if (getProvince(this.lRegions.get(iID).getProvince(i2)).getSeaProvince()) {
                        this.lSeaProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i2)));
                    } else {
                        this.lProvincesInView.add(Integer.valueOf(this.lRegions.get(iID).getProvince(i2)));
                    }
                }
                return;
            }
        }
        for (int i3 = 0; i3 < this.lRegions.get(iID).getProvincesSize(); i3++) {
            updateDrawProvince(this.lRegions.get(iID).getProvince(i3));
        }
    }

    public final void updateDrawProvince(int nProvinceID) {
        if (!inViewY(nProvinceID)) {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(false);
        } else if (inViewX(nProvinceID)) {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(true);
            if (getProvince(nProvinceID).getWasteland() >= 0) {
                this.lWastelandProvincesInView.add(Integer.valueOf(nProvinceID));
            } else if (getProvince(nProvinceID).getSeaProvince()) {
                this.lSeaProvincesInView.add(Integer.valueOf(nProvinceID));
            } else {
                this.lProvincesInView.add(Integer.valueOf(nProvinceID));
            }
        } else if (inViewX2(nProvinceID)) {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(true);
            if (getProvince(nProvinceID).getWasteland() >= 0) {
                this.lWastelandProvincesInView.add(Integer.valueOf(nProvinceID));
            } else if (getProvince(nProvinceID).getSeaProvince()) {
                this.lSeaProvincesInView.add(Integer.valueOf(nProvinceID));
            } else {
                this.lProvincesInView.add(Integer.valueOf(nProvinceID));
            }
        } else if (!getProvince(nProvinceID).getBelowZero()) {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(false);
        } else if (inViewXBelowZero(nProvinceID)) {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapBG().getWidth() + CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(true);
            if (getProvince(nProvinceID).getWasteland() >= 0) {
                this.lWastelandProvincesInView.add(Integer.valueOf(nProvinceID));
            } else if (getProvince(nProvinceID).getSeaProvince()) {
                this.lSeaProvincesInView.add(Integer.valueOf(nProvinceID));
            } else {
                this.lProvincesInView.add(Integer.valueOf(nProvinceID));
            }
        } else {
            getProvince(nProvinceID).setTranslateProvincePosX(CFG.map.getMapCoordinates().getPosX());
            getProvince(nProvinceID).setDrawProvince(false);
        }
    }

    public final void drawActiveProvince(SpriteBatch oSB) {
        if (this.iActiveProvince >= 0 && getProvince(this.iActiveProvince).getDrawProvince()) {
            if (CFG.chooseProvinceMode) {
                oSB.setColor(new Color(CFG.getColorStep(255, 55, this.activeProvince_Animation_Data.getColorStepID(), 30), CFG.getColorStep(255, 55, this.activeProvince_Animation_Data.getColorStepID(), 30), CFG.getColorStep(255, 55, this.activeProvince_Animation_Data.getColorStepID(), 30), getProvince(this.iActiveProvince).getSeaProvince() ? (((float) (this.activeProvince_Animation_Data.getAlpha() + 35)) / 255.0f) / 3.0f : (((float) (this.activeProvince_Animation_Data.getAlpha() + 35)) / 255.0f) * (this.fDashedLine_Percentage_HighlitedProvinceBorder / 100.0f)));
                getProvince(this.iActiveProvince).drawProvince_ActiveProvince(oSB);
            } else {
                if (getProvince(this.iActiveProvince).getSeaProvince()) {
                    oSB.setColor(new Color(1.0f, 1.0f, 1.0f, (((float) this.activeProvince_Animation_Data.getAlpha()) / 2.0f) / 255.0f));
                } else {
                    oSB.setColor(new Color(1.0f, 1.0f, 1.0f, ((float) this.activeProvince_Animation_Data.getAlpha()) / 255.0f));
                }
                getProvince(this.iActiveProvince).drawProvince_ActiveProvince(oSB);
            }
        }
        try {
            if (MenuManager.iHoveredProvinceID >= 0 && this.iActiveProvince != MenuManager.iHoveredProvinceID && getProvince(MenuManager.iHoveredProvinceID).getDrawProvince()) {
                oSB.setColor(new Color(1.0f, 1.0f, 1.0f, getProvince(MenuManager.iHoveredProvinceID).getSeaProvince() ? 0.02f : 0.05f));
                getProvince(MenuManager.iHoveredProvinceID).drawProvince_ActiveProvince(oSB);
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void drawActiveProvince_HoverJust_WithoutDrawingActiveProvince(SpriteBatch oSB) {
        try {
            if (MenuManager.iHoveredProvinceID >= 0) {
                oSB.setColor(new Color(1.0f, 1.0f, 1.0f, getProvince(MenuManager.iHoveredProvinceID).getSeaProvince() ? 0.02f : 0.05f));
                getProvince(MenuManager.iHoveredProvinceID).drawProvince_ActiveProvince(oSB);
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void drawActiveProvinceFlag(SpriteBatch oSB) {
        if (this.iActiveProvince >= 0 && getProvince(this.iActiveProvince).getDrawProvince()) {
            if (getProvince(this.iActiveProvince).getCivID() > 0) {
                oSB.setColor(Color.WHITE);
                getProvince(this.iActiveProvince).drawProvinceFlag(oSB);
                return;
            }
            drawActiveProvince(oSB);
        }
    }

    public final void drawHighlightProvince(SpriteBatch oSB) {
        int iSize = this.iHighlightedProvincesSize;
        for (int i = 0; i < iSize; i++) {
            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getDrawProvince()) {
                this.highlightedProvince_AnimationData.updateColor(oSB, this.lHighlightedProvinces.get(i).intValue());
                getProvince(this.lHighlightedProvinces.get(i).intValue()).drawProvince_ActiveProvince(oSB);
            }
        }
    }

    public final void drawActiveProvinceBorder(SpriteBatch oSB) {
        try {
            for (int i = this.drawProvinceBorder_LandBySeaIDs.size() - 1; i >= 0; i--) {
                if (getProvince(this.drawProvinceBorder_LandBySeaIDs.get(i).iProvinceID).getDrawProvince()) {
                    getProvince(this.drawProvinceBorder_LandBySeaIDs.get(i).iProvinceID).getProvinceBordersLandBySea().get(this.drawProvinceBorder_LandBySeaIDs.get(i).withProvinceID).drawProvince_Border.draw(oSB, getProvince(this.drawProvinceBorder_LandBySeaIDs.get(i).iProvinceID).getTranslateProvincePosX());
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (NullPointerException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void updateHighlitghtProvinceBorder(SpriteBatch oSB) {
        if (this.highlightedProvinceBorder_Update) {
            if (this.highlightedProvinceBorder_BackAnimation) {
                this.fDashedLine_Percentage_HighlitedProvinceBorder -= (((float) (System.currentTimeMillis() - this.lDashedLineTime_Percentage_HighlitedProvinceBorder)) / 350.0f) * 100.0f;
                if (this.fDashedLine_Percentage_HighlitedProvinceBorder <= CFG.DEFAULT_RESEARACH_LEVEL) {
                    disableHighlightedProvinces();
                    this.lHighlightedProvinces.clear();
                    this.iHighlightedProvincesSize = 0;
                    this.highlightedProvinceBorder_Update = false;
                    CFG.gameAction.updateInGame_ProvinceInfo();
                    return;
                }
                this.lDashedLineTime_Percentage_HighlitedProvinceBorder = System.currentTimeMillis();
                CFG.setRender_3(true);
                return;
            }
            this.fDashedLine_Percentage_HighlitedProvinceBorder += (((float) (System.currentTimeMillis() - this.lDashedLineTime_Percentage_HighlitedProvinceBorder)) / 750.0f) * 95.0f;
            if (this.fDashedLine_Percentage_HighlitedProvinceBorder > 100.0f) {
                this.fDashedLine_Percentage_HighlitedProvinceBorder = 100.0f;
                enableHighlightedProvinces_Classic();
                this.highlightedProvinceBorder_Update = false;
                return;
            }
            this.lDashedLineTime_Percentage_HighlitedProvinceBorder = System.currentTimeMillis();
            CFG.setRender_3(true);
        }
    }

    public final void drawCivNameBG(SpriteBatch oSB, int nPosX, int nPosY, int nWidth, int nHeight) {
        ImageManager.getImage(Images.civ_name_bg).draw2(oSB, nPosX, nPosY - ImageManager.getImage(Images.civ_name_bg).getHeight(), nWidth - ImageManager.getImage(Images.civ_name_bg).getWidth(), nHeight - ImageManager.getImage(Images.civ_name_bg).getHeight());
        ImageManager.getImage(Images.civ_name_bg).draw(oSB, nPosX, (nPosY + nHeight) - ImageManager.getImage(Images.civ_name_bg).getHeight(), nWidth - ImageManager.getImage(Images.civ_name_bg).getWidth(), false, true);
        ImageManager.getImage(Images.civ_name_bg).draw2(oSB, (nPosX + nWidth) - ImageManager.getImage(Images.civ_name_bg).getWidth(), nPosY - ImageManager.getImage(Images.civ_name_bg).getHeight(), ImageManager.getImage(Images.civ_name_bg).getWidth(), nHeight - ImageManager.getImage(Images.civ_name_bg).getHeight(), true);
        ImageManager.getImage(Images.civ_name_bg).draw(oSB, (nPosX + nWidth) - ImageManager.getImage(Images.civ_name_bg).getWidth(), (nPosY + nHeight) - ImageManager.getImage(Images.civ_name_bg).getHeight(), true, true);
    }

    public final void drawCivFlagBG(SpriteBatch oSB, int nPosX, int nPosY, int nWidth, int nHeight) {
        ImageManager.getImage(Images.civ_flag_bg).draw2(oSB, nPosX, nPosY - ImageManager.getImage(Images.civ_flag_bg).getHeight(), nWidth - ImageManager.getImage(Images.civ_flag_bg).getWidth(), nHeight - ImageManager.getImage(Images.civ_flag_bg).getHeight());
        ImageManager.getImage(Images.civ_flag_bg).draw(oSB, nPosX, (nPosY + nHeight) - ImageManager.getImage(Images.civ_flag_bg).getHeight(), nWidth - ImageManager.getImage(Images.civ_flag_bg).getWidth(), false, true);
        ImageManager.getImage(Images.civ_flag_bg).draw2(oSB, (nPosX + nWidth) - ImageManager.getImage(Images.civ_flag_bg).getWidth(), nPosY - ImageManager.getImage(Images.civ_flag_bg).getHeight(), ImageManager.getImage(Images.civ_flag_bg).getWidth(), nHeight - ImageManager.getImage(Images.civ_flag_bg).getHeight(), true);
        ImageManager.getImage(Images.civ_flag_bg).draw(oSB, (nPosX + nWidth) - ImageManager.getImage(Images.civ_flag_bg).getWidth(), (nPosY + nHeight) - ImageManager.getImage(Images.civ_flag_bg).getHeight(), true, true);
    }

    public final void drawProvinceArmyBackground(SpriteBatch oSB, int nPosX, int nPosY, int nWidth, int nHeight, int ImageID) {
        ImageManager.getImage(ImageID).draw2(oSB, nPosX, nPosY - ImageManager.getImage(ImageID).getHeight(), nWidth - ImageManager.getImage(ImageID).getWidth(), nHeight);
        ImageManager.getImage(ImageID).draw2(oSB, (nPosX + nWidth) - ImageManager.getImage(ImageID).getWidth(), nPosY - ImageManager.getImage(ImageID).getHeight(), ImageManager.getImage(ImageID).getWidth(), nHeight, true, false);
    }

    public final void drawProvinceArmyBackground_Capital(SpriteBatch oSB, int nPosX, int nPosY, int nWidth, int nHeight, int ImageID) {
        ImageManager.getImage(ImageID).draw2(oSB, nPosX, nPosY - ImageManager.getImage(ImageID).getHeight(), nWidth, nHeight - ImageManager.getImage(ImageID).getHeight(), true);
        ImageManager.getImage(ImageID).draw2(oSB, nPosX, (nPosY + nHeight) - (ImageManager.getImage(ImageID).getHeight() * 2), nWidth, ImageManager.getImage(ImageID).getHeight(), true, true);
    }

    public final void drawProvincesInfo(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawProvinceInfo(oSB, nScale);
        }
    }

    public final void drawProvincesInfo_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (CFG.getMetProvince(getProvinceInViewID(i))) {
                getProvince(getProvinceInViewID(i)).drawProvinceInfo(oSB, nScale);
            }
        }
    }

    public final void drawProvinces_Ports_Build(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getLevelOfPort() > 0) {
                getProvince(getProvinceInViewID(i)).drawProvincePort(oSB, nScale);
            }
        }
    }

    public final void drawProvinces_Ports_Build_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i)) && getProvince(getProvinceInViewID(i)).getLevelOfPort() > 0) {
                getProvince(getProvinceInViewID(i)).drawProvincePort(oSB, nScale);
            }
        }
    }

    public final void drawProvinces_Ports(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawProvincePort(oSB, nScale);
        }
    }

    public final void drawProvincesArmy(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawArmy(oSB, nScale);
        }
        drawSeaProvinceArmy(oSB, nScale);
        drawMoveUnitsArmy(oSB, nScale);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvincesBuildings(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawBuildings(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvincesBuildings_FogOfWar(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i))) {
                getProvince(getProvinceInViewID(i)).drawBuildings(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawFlagAndCrown_Emperor(SpriteBatch oSB, float nScale) {
        try {
            if (getProvince(getCiv(CFG.holyRomanEmpire_Manager.getHRE().getEmperor()).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(CFG.holyRomanEmpire_Manager.getHRE().getEmperor()).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
                oSB.setColor(Color.WHITE);
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void drawFlagAndCrown_Emperor_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            if (CFG.getMetProvince(getCiv(CFG.holyRomanEmpire_Manager.getHRE().getEmperor()).getCapitalProvinceID()) && getProvince(getCiv(CFG.holyRomanEmpire_Manager.getHRE().getEmperor()).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(CFG.holyRomanEmpire_Manager.getHRE().getEmperor()).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
                oSB.setColor(Color.WHITE);
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void drawCapitalsArmy_FlagAndCrown(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawCapitalsArmy_FlagAndCrown_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        int i = 0;
        while (i < CFG.NUM_OF_PROVINCES_IN_VIEW) {
            try {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && CFG.getMetProvince(getProvinceInViewID(i))) {
                    drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
                }
                i++;
            } catch (NullPointerException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                }
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawAllianceMode_FlagAndCrown(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getAllianceID() > 0) {
                drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawAllianceMode_FlagAndCrown_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getAllianceID() > 0 && CFG.getMetProvince(getProvinceInViewID(i))) {
                drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawIcnomeMapMode_FlagAndCrown(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital() && (getProvince(getProvinceInViewID(i)).getCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getPuppetOfCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvincesArmy_SetUpArmy(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i++) {
            getProvince(getSeaProvinceInViewID(i)).drawArmy_SetUpArmy_Sea(oSB, nScale);
        }
        for (int i2 = 0; i2 < CFG.NUM_OF_PROVINCES_IN_VIEW; i2++) {
            getProvince(getProvinceInViewID(i2)).drawArmy_SetUpArmy(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawSeaProvinceArmy(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i++) {
            getProvince(getSeaProvinceInViewID(i)).drawArmy(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_TechnologyLevels(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                getProvince(getProvinceInViewID(i)).drawTechnologyLevels(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_TechnologyLevels_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital() && CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i))) {
                getProvince(getProvinceInViewID(i)).drawTechnologyLevels(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_Potential(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawPotential(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_Danger(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getDangerLevel() != 0) {
                getProvince(getProvinceInViewID(i)).drawDanger(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_Happiness(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                getProvince(getProvinceInViewID(i)).drawHappiness(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_StartingMoney(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                getProvince(getProvinceInViewID(i)).drawStartingMoney(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_GrowthRate(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawGrowthRate(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_ArmyPosition(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawArmyPosition(oSB, nScale);
        }
        for (int i2 = 0; i2 < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i2++) {
            getProvince(getSeaProvinceInViewID(i2)).drawArmyPositionSea(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_Army_PeaceTreaty(SpriteBatch oSB, float nScale) {
        int i = 0;
        while (i < CFG.NUM_OF_PROVINCES_IN_VIEW) {
            try {
                if (CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).isToTake) {
                    drawProvinceArmyWithFlag_ProvinceValue(oSB, (int) (((float) (getProvince(getProvinceInViewID(i)).getCenterX() + getProvince(getProvinceInViewID(i)).getShiftX() + getProvince(getProvinceInViewID(i)).getTranslateProvincePosX())) * nScale), (int) (((float) (getProvince(getProvinceInViewID(i)).getCenterY() + getProvince(getProvinceInViewID(i)).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).iCivID, CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).iProvinceValue, getProvince(getProvinceInViewID(i)).getArmyWidth(0), CFG.COLOR_TEXT_NUM_OF_PROVINCES);
                } else if (CFG.game.getProvince(getProvinceInViewID(i)).getIsCapital()) {
                    drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
                }
                i++;
            } catch (IndexOutOfBoundsException | NullPointerException e) {
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_Army_PeaceTreaty_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        int i = 0;
        while (i < CFG.NUM_OF_PROVINCES_IN_VIEW) {
            try {
                if (CFG.getMetProvince(CFG.game.getProvinceInViewID(i))) {
                    if (CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).isToTake) {
                        drawProvinceArmyWithFlag_ProvinceValue(oSB, (int) (((float) (getProvince(getProvinceInViewID(i)).getCenterX() + getProvince(getProvinceInViewID(i)).getShiftX() + getProvince(getProvinceInViewID(i)).getTranslateProvincePosX())) * nScale), (int) (((float) (getProvince(getProvinceInViewID(i)).getCenterY() + getProvince(getProvinceInViewID(i)).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).iCivID, CFG.peaceTreatyData.drawProvinceOwners.get(getProvinceInViewID(i)).iProvinceValue, getProvince(getProvinceInViewID(i)).getArmyWidth(0), CFG.COLOR_TEXT_NUM_OF_PROVINCES);
                    } else if (CFG.game.getProvince(getProvinceInViewID(i)).getIsCapital()) {
                        drawProvinceFlag_Capital(oSB, getProvinceInViewID(i), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
                    }
                }
                i++;
            } catch (IndexOutOfBoundsException | NullPointerException e) {
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_ArmyPosition_Capitals(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                getProvince(getProvinceInViewID(i)).drawArmyPosition(oSB, nScale);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_SeaArmyBoxes(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i++) {
            getProvince(getSeaProvinceInViewID(i)).drawArmy(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_SeaArmyBoxes_Edit(SpriteBatch oSB, float nScale) {
        getProvince(CFG.MANAGE_DIPLOMACY_ADD_NEW_PACT_CIV1).drawArmy(oSB, nScale);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_SeaProvincesLevels(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawArmySeaProvincesLevels(oSB, nScale);
        }
        for (int i2 = 0; i2 < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i2++) {
            getProvince(getSeaProvinceInViewID(i2)).drawArmySeaProvincesLevels(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_OptimizationRegions(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            getProvince(getProvinceInViewID(i)).drawArmyOptimizationRegions(oSB, nScale);
        }
        for (int i2 = 0; i2 < CFG.NUM_OF_SEA_PROVINCES_IN_VIEW; i2++) {
            getProvince(getSeaProvinceInViewID(i2)).drawArmyOptimizationRegions(oSB, nScale);
        }
        oSB.setColor(Color.WHITE);
    }

    public final Point_XY updateSeaProvince_CenterArmyPostion(int i, float nScale) {
        for (int j = getProvince(i).getProvinceArmyBoxes().size() - 1; j >= 0; j--) {
            if (ImageManager.getImage(Images.top_left).getHeight() + (-CFG.map.getMapCoordinates().getPosY()) <= getProvince(i).getProvinceArmyBoxes().get(j).getEndPosY()) {
                if ((((float) (((CFG.GAME_HEIGHT - ImageManager.getImage(Images.top_left).getHeight()) - CFG.BUTTON_HEIGHT) - (CFG.PADDING * 2))) / CFG.map.getMapScale().getCurrentScale()) + ((float) ((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight())) < ((float) getProvince(i).getProvinceArmyBoxes().get(j).getStartPosY())) {
                    continue;
                } else {
                    if ((((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) + ((float) (-CFG.map.getMapCoordinates().getPosX())) < ((float) getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX()) || (-CFG.map.getMapCoordinates().getPosX()) > getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX()) {
                        if ((((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) + ((float) (-CFG.map.getMapCoordinates().getPosX())) >= ((float) (getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX() + CFG.map.getMapBG().getWidth())) && (-CFG.map.getMapCoordinates().getPosX()) <= getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX() + CFG.map.getMapBG().getWidth()) {
                            Point_XY tempBegin = new Point_XY(CFG.map.getMapBG().getWidth() + getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX(), getProvince(i).getProvinceArmyBoxes().get(j).getStartPosY());
                            Point_XY tempEnd = new Point_XY(CFG.map.getMapBG().getWidth() + getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX(), getProvince(i).getProvinceArmyBoxes().get(j).getEndPosY());
                            if (getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX() + CFG.map.getMapBG().getWidth() < (-CFG.map.getMapCoordinates().getPosX())) {
                                tempBegin.setPosX(-CFG.map.getMapCoordinates().getPosX());
                            }
                            if (getProvince(i).getProvinceArmyBoxes().get(j).getStartPosY() < (-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight()) {
                                tempBegin.setPosY((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight());
                            }
                            if (((float) (getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX() + CFG.map.getMapBG().getWidth())) > ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale())) {
                                tempEnd.setPosX((int) (((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale())));
                            }
                            if (((float) getProvince(i).getProvinceArmyBoxes().get(j).getEndPosY()) > ((float) ((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight())) + (((float) (((CFG.GAME_HEIGHT - ImageManager.getImage(Images.top_left).getHeight()) - CFG.BUTTON_HEIGHT) - (CFG.PADDING * 2))) / CFG.map.getMapScale().getCurrentScale())) {
                                tempEnd.setPosY((int) (((float) ((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight())) + (((float) (((CFG.GAME_HEIGHT - ImageManager.getImage(Images.top_left).getHeight()) - CFG.BUTTON_HEIGHT) - (CFG.PADDING * 2))) / CFG.map.getMapScale().getCurrentScale())));
                            }
                            return new Point_XY((int) (((((float) (tempBegin.getPosX() + tempEnd.getPosX())) / 2.0f) + ((float) CFG.map.getMapCoordinates().getPosX())) * nScale), (int) (((((float) (tempBegin.getPosY() + tempEnd.getPosY())) / 2.0f) + ((float) CFG.map.getMapCoordinates().getPosY())) * nScale));
                        }
                    } else {
                        Point_XY tempBegin2 = new Point_XY(getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX(), getProvince(i).getProvinceArmyBoxes().get(j).getStartPosY());
                        Point_XY tempEnd2 = new Point_XY(getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX(), getProvince(i).getProvinceArmyBoxes().get(j).getEndPosY());
                        if (getProvince(i).getProvinceArmyBoxes().get(j).getStartPosX() < (-CFG.map.getMapCoordinates().getPosX())) {
                            tempBegin2.setPosX(-CFG.map.getMapCoordinates().getPosX());
                        }
                        if (getProvince(i).getProvinceArmyBoxes().get(j).getStartPosY() < (-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight()) {
                            tempBegin2.setPosY((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight());
                        }
                        if (((float) getProvince(i).getProvinceArmyBoxes().get(j).getEndPosX()) > ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale())) {
                            tempEnd2.setPosX((int) (((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale())));
                        }
                        if (((float) getProvince(i).getProvinceArmyBoxes().get(j).getEndPosY()) > ((float) ((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight())) + (((float) (((CFG.GAME_HEIGHT - ImageManager.getImage(Images.top_left).getHeight()) - CFG.BUTTON_HEIGHT) - (CFG.PADDING * 2))) / CFG.map.getMapScale().getCurrentScale())) {
                            tempEnd2.setPosY((int) (((float) ((-CFG.map.getMapCoordinates().getPosY()) + ImageManager.getImage(Images.top_left).getHeight())) + (((float) (((CFG.GAME_HEIGHT - ImageManager.getImage(Images.top_left).getHeight()) - CFG.BUTTON_HEIGHT) - (CFG.PADDING * 2))) / CFG.map.getMapScale().getCurrentScale())));
                        }
                        return new Point_XY((int) (((((float) (tempBegin2.getPosX() + tempEnd2.getPosX())) / 2.0f) + ((float) getProvince(i).getTranslateProvincePosX())) * nScale), (int) (((((float) (tempBegin2.getPosY() + tempEnd2.getPosY())) / 2.0f) + ((float) CFG.map.getMapCoordinates().getPosY())) * nScale));
                    }
                }
            }
        }
        return new Point_XY((int) (((float) (getProvince(i).getCenterX() + getProvince(i).getShiftX() + getProvince(i).getTranslateProvincePosX())) * nScale), (int) (((float) (getProvince(i).getCenterY() + getProvince(i).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale));
    }

    public final void drawProvince_TechnologyLevels(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) * 27.0f) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) / 100.0f;
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
        SpriteBatch spriteBatch = oSB;
        CFG.drawArmyText(spriteBatch, "" + (((float) ((int) (getCiv(getProvince(nProvinceID).getCivID()).getTechnologyLevel() * 100.0f))) / 100.0f), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        oSB.setColor(Color.WHITE);
        int tCenterX2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX2, tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvince_Happiness(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) * 27.0f) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) / 100.0f;
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
        SpriteBatch spriteBatch = oSB;
        CFG.drawArmyText(spriteBatch, "" + getCiv(getProvince(nProvinceID).getCivID()).getHappiness() + "%", tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        oSB.setColor(Color.WHITE);
        int tCenterX2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX2, tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvince_StartingMoney(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        long money;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) * 27.0f) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) / 100.0f;
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
        StringBuilder append = new StringBuilder().append("");
        if (getCiv(getProvince(nProvinceID).getCivID()).getMoney() == -999999) {
            money = (long) CFG.game.getGameScenarios().getScenario_StartingMoney();
        } else {
            money = getCiv(getProvince(nProvinceID).getCivID()).getMoney();
        }
        CFG.drawArmyText(oSB, append.append(money).toString(), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        oSB.setColor(Color.WHITE);
        int tCenterX2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX2, tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvince_GrowthRate(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + ((int) (getProvince(nProvinceID).getGrowthRate_Population() * 100.0f)) + "%", tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvince_ArmyPosition(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nProvinceID, tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvince_OptimizationRegions(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + CFG.game.getRegionID(nProvinceID), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvince_SeaProvincesLevels(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getLevelOfPort(), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvince_Potential(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) * 27.0f) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) / 100.0f;
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
        try {
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getPotential() + "-" + getProvince(nProvinceID).getPotentialRegion(), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        } catch (IndexOutOfBoundsException e) {
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getPotential(), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        }
        oSB.setColor(Color.WHITE);
        int tCenterX2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX2, tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvince_Danger(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) * 27.0f) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / 18.0f) / 100.0f;
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getDangerLevel() + " - " + getProvince(nProvinceID).getDangerLevel_WithArmy(), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
        oSB.setColor(Color.WHITE);
        int tCenterX2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX2, tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX2, ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) tFlagWidth)) + tCenterX2) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinceID(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nProvinceID, tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Fort(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Armoury(oSB, tCenterX - (tWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Fort(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Fort_NoArmy(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        drawProvince_Fort(oSB, (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY())) * nScale)) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_Fort_NoArmy_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvince_Fort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Tower(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Armoury(oSB, tCenterX - (tWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Armoury(oSB, tCenterX - (tWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Tower(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_Tower_NoArmy(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        drawProvince_Tower(oSB, (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY())) * nScale)) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_NoArmy_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        drawProvince_Armoury_Just(oSB, (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY())) * nScale)) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_Tower_NoArmy_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvince_Tower_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_TowerFort(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tWidth = getProvince(nProvinceID).getArmyWidth(0) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
        drawProvince_Armoury(oSB, tCenterX - (tWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_TowerFort(oSB, tCenterX - (tWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        oSB.setColor(bgColor);
        drawProvinceArmyBackground(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, tWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(0), tCenterX - (getProvince(nProvinceID).getArmyWidth(0) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), armyColor);
    }

    public final void drawProvinceArmy_TowerFort_NoArmy(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        drawProvince_TowerFort_Just(oSB, (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY())) * nScale)) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceArmy_TowerFort_NoArmy_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvince_TowerFort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
    }

    public final void drawProvinceFlag(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) Math.ceil((double) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f));
        float fFlagScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (tCenterX - CFG.ARMY_BG_EXTRA_WIDTH) - (tFlagWidth / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tFlagWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2), CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCenterX - (tFlagWidth / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((((tCenterY - (CFG.ARMY_HEIGHT / 2)) + ((int) (((float) CFG.CIV_FLAG_HEIGHT) * fFlagScale))) - CFG.CIV_FLAG_HEIGHT) + 1)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), fFlagScale);
        }
    }

    public final void drawProvinceArmyWithFlag(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        int nArmy0 = getProvince(nProvinceID).getArmy(0) > 0 ? 0 : 1;
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Fort(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_Fort(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_Fort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Tower(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            } else {
                drawProvince_Armoury(oSB, tCenterX, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_Tower(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_Tower_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_TowerFort(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int nArmy0;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_TowerFort(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_TowerFort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        for (int j = nArmy0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Active(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        int nArmy0 = getProvince(nProvinceID).getArmy(0) > 0 ? 0 : 1;
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_TowerFort(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_TowerFort(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_TowerFort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_TowerFort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.towerfort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Fort(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_Fort(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_Fort(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_Fort_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.fort_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            } else {
                drawProvince_Armoury(oSB, tCenterX, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0));
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Tower(oSB, tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Active_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        int nArmy0;
        Color color;
        int i;
        int i2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getProvince(nProvinceID).getArmy(0) > 0) {
            nArmy0 = 0;
            drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            int armyWidth = ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH;
            int i3 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i2 = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 0)) / 2;
            } else {
                i2 = 0;
            }
            drawProvince_Tower(oSB, armyWidth, i3 - i2);
        } else {
            nArmy0 = 1;
            if (CFG.game.getProvince(nProvinceID).getCivsSize() > 1) {
                drawProvince_Armoury(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
                drawProvince_Tower(oSB, ((tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(1) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - 1)) / 2 : 0));
            } else {
                drawProvince_Armoury_Just(oSB, tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
                drawProvince_Tower_Just(oSB, (tCenterX - (((ImageManager.getImage(Images.armoury_ico).getWidth() + ImageManager.getImage(Images.tower_ico).getWidth()) + CFG.ARMY_BG_EXTRA_HEIGHT) / 2)) + ImageManager.getImage(Images.armoury_ico).getWidth() + CFG.ARMY_BG_EXTRA_HEIGHT, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
            }
        }
        int j = nArmy0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground(oSB, (((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight()) - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2 : 0), tFlagWidth, CFG.ARMY_HEIGHT);
            Image image = ImageManager.getImage(Images.flag_rect);
            int armyWidth2 = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int height = ((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (j - nArmy0)) + ((tCenterY - ImageManager.getImage(Images.flag_rect).getHeight()) - (CFG.ARMY_HEIGHT / 2));
            if (getProvince(nProvinceID).getCivsSize() > 1) {
                i = ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * ((getProvince(nProvinceID).getCivsSize() - 1) - nArmy0)) / 2;
            } else {
                i = 0;
            }
            image.draw(oSB, armyWidth2, height - i, tFlagWidth, CFG.ARMY_HEIGHT);
            j++;
        }
    }

    public final void drawProvinceFlag_Capital(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_FlagCivID(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale, int nCivID) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvinceFlag_Capital_End_FlagCivID(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale, nCivID);
    }

    public final void drawProvinceFlag_Capital_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Armoury(oSB, tCenterX - (tFlagWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Fort(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Armoury(oSB, tCenterX - (tFlagWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Fort(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Tower(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Armoury(oSB, tCenterX - (tFlagWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Tower(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_TowerFort(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvinceFlag_Capital_Begin(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
        drawProvince_Armoury(oSB, tCenterX - (tFlagWidth / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_TowerFort(oSB, tCenterX - (tFlagWidth / 2), (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT);
        drawProvinceFlag_Capital_End(oSB, nProvinceID, bgColor, armyColor, nScale, tCenterX, tCenterY, tFlagWidth, fFlagScale);
    }

    public final void drawProvinceFlag_Capital_Begin(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale, int tCenterX, int tCenterY, int tFlagWidth, float fFlagScale) {
        int tCenterX2 = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY2 = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth2 = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float fFlagScale2 = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, (tFlagWidth2 / 2) + tCenterX2, (tCenterY2 - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, (tFlagWidth2 / 2) + tCenterX2, (tCenterY2 - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
            drawProvince_Capital_Crown(oSB, (tFlagWidth2 / 2) + tCenterX2, (tCenterY2 - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getIdeologyID());
        } else {
            drawProvince_Capital_Crown_Vassal(oSB, (tFlagWidth2 / 2) + tCenterX2, (tCenterY2 - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getIdeologyID());
        }
    }

    public final void drawProvinceFlag_Capital_End(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale, int tCenterX, int tCenterY, int tFlagWidth, float fFlagScale) {
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().draw(oSB, tCenterX - (tFlagWidth / 2), tCenterY2 - getCiv(getProvince(nProvinceID).getCivID(0)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX - ((int) Math.floor((double) (((float) tFlagWidth) / 2.0f))), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) (((float) tFlagWidth) / 2.0f))) + tCenterX) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX - ((int) Math.floor((double) (((float) tFlagWidth) / 2.0f))), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) (((float) tFlagWidth) / 2.0f))) + tCenterX) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinceFlag_Capital_End_FlagCivID(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale, int tCenterX, int tCenterY, int tFlagWidth, float fFlagScale, int nCivID) {
        int tCenterY2 = (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT;
        getCiv(nCivID).getFlag().draw(oSB, tCenterX - (tFlagWidth / 2), tCenterY2 - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(bgColor);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX - ((int) Math.floor((double) (((float) tFlagWidth) / 2.0f))), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) (((float) tFlagWidth) / 2.0f))) + tCenterX) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCenterY2 - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCenterX - ((int) Math.floor((double) (((float) tFlagWidth) / 2.0f))), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
        ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (((int) Math.ceil((double) (((float) tFlagWidth) / 2.0f))) + tCenterX) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCenterY2) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
        oSB.setColor(Color.WHITE);
    }

    public final int getDrawProvinceArmy_EndPosY(int nProvinceID, float nScale) {
        int nArmies = 0;
        for (int i = 0; i < getProvince(nProvinceID).getCivsSize(); i++) {
            if (getProvince(nProvinceID).getArmy(i) > 0 || getProvince(nProvinceID).getIsCapital()) {
                nArmies++;
            }
        }
        return ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * nArmies) + ((((int) (((float) ((getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY())) * nScale)) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
    }

    public final void drawProvinceArmyWithFlag_Capital(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_TowerFort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_TowerFort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_TowerFortArmoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_TowerFort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Fort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Fort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Tower(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, float nScale) {
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Tower(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        for (int j = 0; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            oSB.setColor(bgColor);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            oSB.setColor(bgColor);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_TowerFort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_TowerFort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_TowerFort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_TowerFort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_Fort(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Fort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_Fort_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Fort(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_Tower(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Tower(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvinceArmyWithFlag_Capital_Active_Tower_Armoury(SpriteBatch oSB, int nProvinceID, Color bgColor, Color armyColor, Color bgColor2, Color armyColor2, float nScale) {
        Color color;
        Color color2;
        int tCenterX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tCenterY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagWidth = (int) ((((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2))) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        drawProvince_Armoury(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) + CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
        drawProvince_Tower(oSB, (tCenterX - tFlagWidth) - (getProvince(nProvinceID).getArmyWidth(0) / 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
        if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown_HRE(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else {
            if (getProvince(nProvinceID).getCivID() == getCiv(getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
                drawProvince_Capital_Crown(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(0) / 2) + tCenterX, ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        int j = 0;
        while (j < getProvince(nProvinceID).getCivsSize()) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2);
            if (j == CFG.activeCivilizationArmyID) {
                color = bgColor;
            } else {
                color = bgColor2;
            }
            oSB.setColor(color);
            drawProvinceArmyBackground_Capital(oSB, ((tCenterX - 1) - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), tWidth + 1, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_capital);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), j == CFG.activeCivilizationArmyID ? armyColor : armyColor2);
            oSB.setColor(Color.WHITE);
            int tCX = ((tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH;
            int tCY = ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0);
            getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().draw(oSB, tCX, tCY - getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2));
            if (j == CFG.activeCivilizationArmyID) {
                color2 = bgColor;
            } else {
                color2 = bgColor2;
            }
            oSB.setColor(color2);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight());
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), tCY - ImageManager.getImage(Images.army_capital_frame).getHeight(), ImageManager.getImage(Images.army_capital_frame).getWidth(), (CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - ImageManager.getImage(Images.army_capital_frame).getHeight(), true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, tCX, ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), tFlagWidth - ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), false, true);
            ImageManager.getImage(Images.army_capital_frame).draw2(oSB, (tCX + tFlagWidth) - ImageManager.getImage(Images.army_capital_frame).getWidth(), ((CFG.ARMY_HEIGHT + tCY) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - (ImageManager.getImage(Images.army_capital_frame).getHeight() * 2), ImageManager.getImage(Images.army_capital_frame).getWidth(), ImageManager.getImage(Images.army_capital_frame).getHeight(), true, true);
            oSB.setColor(Color.WHITE);
            j++;
        }
    }

    public final void drawProvince_Fort(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.fort_ico).draw(oSB, nPosX - (ImageManager.getImage(Images.fort_ico).getWidth() / 2), nPosY - ((ImageManager.getImage(Images.fort_ico).getHeight() * 4) / 5));
    }

    public final void drawProvince_Fort_Just(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.fort_ico).draw(oSB, nPosX, nPosY - (ImageManager.getImage(Images.fort_ico).getHeight() / 2));
    }

    public final void drawProvince_Tower(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.tower_ico).draw(oSB, nPosX - ((ImageManager.getImage(Images.tower_ico).getWidth() * 4) / 5), nPosY - ((ImageManager.getImage(Images.tower_ico).getHeight() * 4) / 5));
    }

    public final void drawProvince_Tower_Just(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.tower_ico).draw(oSB, nPosX, nPosY - (ImageManager.getImage(Images.tower_ico).getHeight() / 2));
    }

    public final void drawProvince_TowerFort(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.towerfort_ico).draw(oSB, nPosX - (ImageManager.getImage(Images.towerfort_ico).getWidth() / 2), nPosY - ((ImageManager.getImage(Images.towerfort_ico).getHeight() * 4) / 5));
    }

    public final void drawProvince_TowerFort_Just(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.towerfort_ico).draw(oSB, nPosX, nPosY - (ImageManager.getImage(Images.towerfort_ico).getHeight() / 2));
    }

    public final void drawProvince_Armoury(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.armoury_ico).draw(oSB, nPosX - ((ImageManager.getImage(Images.armoury_ico).getWidth() * 3) / 4), nPosY - (ImageManager.getImage(Images.armoury_ico).getHeight() / 2));
    }

    public final void drawProvince_Armoury_Just(SpriteBatch oSB, int nPosX, int nPosY) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.armoury_ico).draw(oSB, nPosX, nPosY - (ImageManager.getImage(Images.armoury_ico).getHeight() / 2));
    }

    public final void drawProvince_Capital_Crown_HRE(SpriteBatch oSB, int nPosX, int nPosY, int nIdelogyID) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.hre_crown).draw(oSB, nPosX - (ImageManager.getImage(Images.hre_crown).getWidth() / 2), nPosY - ((ImageManager.getImage(Images.hre_crown).getHeight() * 4) / 5));
    }

    public final void drawProvince_Capital_Crown_HRE_Vassal(SpriteBatch oSB, int nPosX, int nPosY, int nIdelogyID) {
        oSB.setColor(Color.WHITE);
        ImageManager.getImage(Images.hre_crown_x).draw(oSB, nPosX - (ImageManager.getImage(Images.hre_crown_x).getWidth() / 2), (nPosY - ((CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().getHeight() * 4) / 5)) - (ImageManager.getImage(Images.hre_crown_x).getHeight() - ImageManager.getImage(Images.hre_crown).getHeight()));
    }

    public final void drawProvince_Capital_Crown(SpriteBatch oSB, int nPosX, int nPosY, int nIdelogyID) {
        oSB.setColor(Color.WHITE);
        CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().draw(oSB, nPosX - (CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().getWidth() / 2), nPosY - ((CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().getHeight() * 4) / 5));
    }

    public final void drawProvince_Capital_Crown_Vassal(SpriteBatch oSB, int nPosX, int nPosY, int nIdelogyID) {
        oSB.setColor(Color.WHITE);
        CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownVassalImage().draw(oSB, nPosX - (CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownVassalImage().getWidth() / 2), (nPosY - ((CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().getHeight() * 4) / 5)) - (CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownVassalImage().getHeight() - CFG.ideologiesManager.getIdeology(nIdelogyID).getiCrownImage().getHeight()));
    }

    public final void drawProvinceArmy_Sea(SpriteBatch oSB, int nProvinceID, Color armyColor, float nScale, int tCenterX, int tCenterY) {
        for (int j = 1; j < getProvince(nProvinceID).getCivsSize(); j++) {
            int tWidth = getProvince(nProvinceID).getArmyWidth(j) + (CFG.ARMY_BG_EXTRA_WIDTH * 2) + ImageManager.getImage(Images.army_sea).getWidth();
            oSB.setColor(Color.WHITE);
            ImageManager.getImage(Images.army_16_seabg).draw2(oSB, (tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0)) - ImageManager.getImage(Images.army_16_seabg).getHeight(), tWidth, (CFG.ARMY_BG_EXTRA_HEIGHT * 2) + CFG.ARMY_HEIGHT);
            CFG.drawArmyText(oSB, "" + getProvince(nProvinceID).getArmy(j), tCenterX - (getProvince(nProvinceID).getArmyWidth(j) / 2), ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (tCenterY - (CFG.ARMY_HEIGHT / 2))) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0), armyColor);
            oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 0.95f));
            oSB.setShader(AoCGame.shaderAlpha);
            ImageManager.getImage(Images.army_sea).getTexture().bind(2);
            CFG.game.getCiv(getProvince(nProvinceID).getCivID(j)).getFlag().getTexture().bind(1);
            Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0);
            ImageManager.getImage(Images.army_sea).draw(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(j) / 2) + tCenterX, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (((tCenterY + 1) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
            oSB.flush();
            ImageManager.getImage(Images.army_sea).getTexture().bind(2);
            ImageManager.getImage(Images.flag_rect).getTexture().bind(1);
            Gdx.gl.glActiveTexture(GL20.GL_TEXTURE0);
            ImageManager.getImage(Images.army_sea).draw(oSB, CFG.ARMY_BG_EXTRA_WIDTH + (getProvince(nProvinceID).getArmyWidth(j) / 2) + tCenterX, ((((CFG.ARMY_BG_EXTRA_HEIGHT + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * j) + (((tCenterY + 1) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) - (getProvince(nProvinceID).getCivsSize() > 1 ? ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) * (getProvince(nProvinceID).getCivsSize() - 1)) / 2 : 0));
            oSB.setShader(AoCGame.defaultShader);
        }
    }

    public final void drawCivilization_Flag(SpriteBatch oSB, int nProvinceID, int nImageID, float nScale) {
        int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagW = (int) Math.ceil((double) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f));
        if (this.iActiveProvince == nProvinceID) {
            oSB.setColor(new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
        } else {
            oSB.setColor(new Color(0.039215688f, 0.039215688f, 0.039215688f, 1.0f));
        }
        drawProvinceArmyBackground(oSB, (tPosX - CFG.ARMY_BG_EXTRA_WIDTH) - (tFlagW / 2), (tPosY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + tFlagW, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), nImageID);
        oSB.setColor(Color.WHITE);
        getCiv(getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, tPosX - (tFlagW / 2), (((tPosY - (CFG.ARMY_HEIGHT / 2)) + ((int) (((float) CFG.CIV_FLAG_HEIGHT) * (((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f)))) - CFG.CIV_FLAG_HEIGHT) + 1, ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f);
    }

    public final void drawProvinceArmyWithFlag(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (nArmyWidth / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (nArmyWidth / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_MODIFIER_NEUTRAL);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (nArmyWidth / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (nArmyWidth / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceArmyWithFlag_Plunder(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_plunder).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_plunder).getHeight())) * ((float) ImageManager.getImage(Images.diplo_plunder).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_MODIFIER_NEGATIVE2);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.diplo_plunder).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.diplo_plunder).getHeight(), (int) (((float) ImageManager.getImage(Images.diplo_plunder).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceArmyWithFlag_Genocide(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.skull).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.skull).getHeight())) * ((float) ImageManager.getImage(Images.skull).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_MODIFIER_NEGATIVE2);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.skull).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.skull).getHeight(), (int) (((float) ImageManager.getImage(Images.diplo_plunder).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceBuildings(SpriteBatch oSB, int tCenterX, int tCenterY, int nProvinceID) {
        lBuildingsImages.clear();
        if (CFG.game.getProvince(nProvinceID).getLevelOfFort() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_fort));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfWatchTower() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_tower));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfPort() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_port));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfLibrary() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_library));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfFarm() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_farm));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfWorkshop() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_workshop));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfArmoury() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_armoury));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfSupply() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_supply));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfAirbase() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_airbase));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfNuclearReactor() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_radiation));
        }
        if (CFG.game.getProvince(nProvinceID).getLevelOfShelter() > 0) {
            lBuildingsImages.add(Integer.valueOf(Images.b_shelter));
        }
        if (lBuildingsImages.size() > 0) {
            int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
            iBuildingsWidth = 0;
            for (int i = lBuildingsImages.size() - 1; i >= 0; i--) {
                iBuildingsWidth = ((int) (((100.0f * ((float) (ImageManager.getImage(lBuildingsImages.get(i).intValue()).getWidth() * CFG.ARMY_HEIGHT))) / ((float) ImageManager.getImage(lBuildingsImages.get(i).intValue()).getHeight())) / 100.0f)) + CFG.PADDING + iBuildingsWidth;
            }
            oSB.setColor(new Color(CFG.COLOR_GRADIENT_DARK_BLUE.r, CFG.COLOR_GRADIENT_DARK_BLUE.g, CFG.COLOR_GRADIENT_DARK_BLUE.b, 0.8f));
            Image image = ImageManager.getImage(Images.line_32_off1);
            int i2 = iBuildingsWidth - CFG.PADDING;
            iBuildingsWidth = i2;
            image.draw(oSB, (((tCenterX - ((i2 + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH) - (CFG.PADDING * 2), (((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - ImageManager.getImage(Images.line_32_off1).getHeight()) - 1, (CFG.PADDING * 4) + iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2) + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2) + 2);
            oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 0.1f));
            ImageManager.getImage(Images.line_32_off1).draw(oSB, (((tCenterX - ((iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH) - (CFG.PADDING * 2), ((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - ImageManager.getImage(Images.line_32_off1).getHeight(), (CFG.PADDING * 4) + iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2) + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, 1);
            ImageManager.getImage(Images.line_32_off1).draw(oSB, (((tCenterX - ((iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH) - (CFG.PADDING * 2), (((((tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT) - ImageManager.getImage(Images.line_32_off1).getHeight()) + CFG.ARMY_HEIGHT) + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) - 1, (CFG.PADDING * 4) + iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2) + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH, 1);
            oSB.setColor(Color.WHITE);
            int tX = CFG.ARMY_BG_EXTRA_WIDTH;
            for (int i3 = lBuildingsImages.size() - 1; i3 >= 0; i3--) {
                ImageManager.getImage(lBuildingsImages.get(i3).intValue()).draw(oSB, (tCenterX - ((iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) + tX, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(lBuildingsImages.get(i3).intValue()).getHeight(), (int) (((100.0f * ((float) (ImageManager.getImage(lBuildingsImages.get(i3).intValue()).getWidth() * CFG.ARMY_HEIGHT))) / ((float) ImageManager.getImage(lBuildingsImages.get(i3).intValue()).getHeight())) / 100.0f), CFG.ARMY_HEIGHT);
                tX += ((int) (((100.0f * ((float) (ImageManager.getImage(lBuildingsImages.get(i3).intValue()).getWidth() * CFG.ARMY_HEIGHT))) / ((float) ImageManager.getImage(lBuildingsImages.get(i3).intValue()).getHeight())) / 100.0f)) + CFG.PADDING;
            }
            getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, (tCenterX - ((iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) - tFlagWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
            ImageManager.getImage(Images.flag_rect).draw(oSB, (tCenterX - ((iBuildingsWidth + (CFG.ARMY_BG_EXTRA_WIDTH * 2)) / 2)) - tFlagWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        }
    }

    public final void drawProvinceArmyWithFlag_Attack(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_rivals).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_rivals).getHeight())) * ((float) ImageManager.getImage(Images.diplo_rivals).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_MODIFIER_NEGATIVE2);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.diplo_rivals).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.diplo_rivals).getHeight(), (int) (((float) ImageManager.getImage(Images.diplo_rivals).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceArmyWithFlag_Migrate(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.population).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.population).getHeight())) * ((float) ImageManager.getImage(Images.population).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_POPULATION);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.population).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.population).getHeight(), (int) (((float) ImageManager.getImage(Images.population).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceArmyWithFlag_Recruit(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth) {
        int tFlagWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        float f = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f;
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_army).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.diplo_army).getHeight())) * ((float) ImageManager.getImage(Images.diplo_army).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tFlagWidth + CFG.ARMY_BG_EXTRA_WIDTH + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), CFG.COLOR_TEXT_MODIFIER_POSITIVE);
        oSB.setColor(Color.WHITE);
        getCiv(nCivID).getFlag().draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - getCiv(nCivID).getFlag().getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - tFlagWidth) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagWidth, CFG.ARMY_HEIGHT);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.diplo_army).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.diplo_army).getHeight(), (int) (((float) ImageManager.getImage(Images.diplo_army).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawProvinceArmyWithFlag_ProvinceValue(SpriteBatch oSB, int tCenterX, int tCenterY, int nCivID, int nArmy, int nArmyWidth, Color nColor) {
        float tPlunderScale = ((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.victoryPoints).getHeight())) / 100.0f;
        int tPlunderWidth = (int) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) ImageManager.getImage(Images.victoryPoints).getHeight())) * ((float) ImageManager.getImage(Images.victoryPoints).getWidth())) / 100.0f);
        oSB.setColor(CFG.COLOR_ARMY_BG);
        drawProvinceArmyBackground(oSB, (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) - CFG.ARMY_BG_EXTRA_WIDTH, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT, (CFG.ARMY_BG_EXTRA_WIDTH * 2) + nArmyWidth + tPlunderWidth + CFG.ARMY_BG_EXTRA_WIDTH, CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2), Images.army_bg);
        CFG.drawArmyText(oSB, "" + nArmy, tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2), tCenterY - (CFG.ARMY_HEIGHT / 2), nColor);
        oSB.setColor(Color.WHITE);
        SpriteBatch spriteBatch = oSB;
        ImageManager.getImage(Images.victoryPoints).draw(spriteBatch, CFG.ARMY_BG_EXTRA_WIDTH + (tCenterX - (((nArmyWidth + tPlunderWidth) + CFG.ARMY_BG_EXTRA_WIDTH) / 2)) + nArmyWidth, (tCenterY - (CFG.ARMY_HEIGHT / 2)) - ImageManager.getImage(Images.victoryPoints).getHeight(), (int) (((float) ImageManager.getImage(Images.victoryPoints).getWidth()) * tPlunderScale), CFG.ARMY_HEIGHT);
    }

    public final void drawAllProvinces_Name_Flag(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getCivID() != 0 && !getProvince(getProvinceInViewID(i)).getIsCapital()) {
                drawCivilization_Flag(oSB, getProvinceInViewID(i), nScale);
            }
        }
        drawAllCivilizations_Name_Flag_InCapitals(oSB, nScale);
    }

    public final void drawCores_Flags(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getCivID() != 0) {
                try {
                    if (CFG.game.getProvince(getProvinceInViewID(i)).getCore().getCivsSize() > 1) {
                        drawCivilization_Flag_Cores(oSB, getProvinceInViewID(i), nScale);
                    }
                } catch (NullPointerException ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        }
    }

    public final void drawAllCivilizations_Name_Flag_InCapitals(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawCivilization_Name_Flag(oSB, getCiv(i).getCapitalProvinceID(), nScale);
            }
        }
    }

    public final void drawAllCivilizations_Name_Flag_InCapitals_Crowns(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawCivilization_Name_Flag_Crowns(oSB, getCiv(i).getCapitalProvinceID(), nScale);
            }
        }
    }

    public final void drawAllCivilizations_Name_Flag_InCapitals_Vassals(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawCivilization_Name_Flag_Vassals(oSB, getCiv(i).getCapitalProvinceID(), nScale);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawCivilization_Flag(oSB, getCiv(i).getCapitalProvinceID(), nScale);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(i).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown_Sea(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(i).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        drawSeaProvinceArmy(oSB, nScale);
        drawMoveUnitsArmy(oSB, nScale);
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown_Timeline(SpriteBatch oSB, float nScale) {
        for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
            if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince()) {
                drawProvinceFlag_Capital_FlagCivID(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale, i + 1);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown_Timeline_FogOfWar(SpriteBatch oSB, float nScale) {
        for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
            if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince() && CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue())) {
                drawProvinceFlag_Capital_FlagCivID(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale, i + 1);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getPlayer(CFG.PLAYER_TURNID).getMetProvince(getCiv(i).getCapitalProvinceID()) && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(i).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
    }

    public final void drawAllCivilizations_Flag_InCapitals_WithCrown_FogOfWarDiscovery_Sea(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getPlayer(CFG.PLAYER_TURNID).getMetProvince(getCiv(i).getCapitalProvinceID()) && getProvince(getCiv(i).getCapitalProvinceID()).getCivID() == i && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                drawProvinceFlag_Capital(oSB, getCiv(i).getCapitalProvinceID(), CFG.COLOR_ARMY_BG, CFG.COLOR_ARMY_TEXT, nScale);
            }
        }
        drawSeaProvinceArmy(oSB, nScale);
        drawMoveUnitsArmy(oSB, nScale);
    }

    public final void drawAllCivilizations_Name_Flag_InCapitals_AvailableCivs(SpriteBatch oSB, float nScale) {
        for (int i = 1; i < getCivsSize(); i++) {
            if (getCiv(i).getCapitalProvinceID() >= 0 && getProvince(getCiv(i).getCapitalProvinceID()).getDrawProvince()) {
                if (getCiv(i).getIsAvailable()) {
                    drawCivilization_Name_Flag(oSB, getCiv(i).getCapitalProvinceID(), nScale);
                } else {
                    drawCivilization_Name_Flag(oSB, getCiv(i).getCapitalProvinceID(), nScale, 0.65f);
                }
            }
        }
    }

    public final void drawCivilization_Flag(SpriteBatch oSB, int nProvinceID, float nScale) {
        int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagW = (int) Math.ceil((double) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f));
        if (this.iActiveProvince == nProvinceID) {
            oSB.setColor(new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
        } else {
            oSB.setColor(new Color(0.039215688f, 0.039215688f, 0.039215688f, 1.0f));
        }
        drawCivFlagBG(oSB, (tPosX - CFG.CIV_NAME_BG_EXTRA_WIDTH_ARMY) - (tFlagW / 2), (tPosY - (CFG.ARMY_HEIGHT / 2)) - CFG.CIV_NAME_BG_EXTRA_HEIGHT_ARMY, (CFG.CIV_NAME_BG_EXTRA_WIDTH_ARMY * 2) + tFlagW, CFG.ARMY_HEIGHT + (CFG.CIV_NAME_BG_EXTRA_HEIGHT_ARMY * 2));
        oSB.setColor(Color.WHITE);
        getCiv(getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, tPosX - (tFlagW / 2), (tPosY - (CFG.ARMY_HEIGHT / 2)) - getCiv(getProvince(nProvinceID).getCivID()).getFlag().getHeight(), tFlagW, CFG.ARMY_HEIGHT);
    }

    public final void drawCivilization_Flag_Cores(SpriteBatch oSB, int nProvinceID, float nScale) {
        try {
            int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
            int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
            int tFlagW = (int) Math.ceil((double) ((((((float) CFG.ARMY_HEIGHT) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f));
            if (this.iActiveProvince == nProvinceID) {
                oSB.setColor(new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
            } else {
                oSB.setColor(new Color(0.039215688f, 0.039215688f, 0.039215688f, 1.0f));
            }
            drawCivFlagBG(oSB, (tPosX - CFG.CIV_NAME_BG_EXTRA_WIDTH_ARMY) - (((CFG.game.getProvince(nProvinceID).getCore().getCivsSize() * tFlagW) + (CFG.PADDING * (CFG.game.getProvince(nProvinceID).getCore().getCivsSize() - 1))) / 2), (tPosY - (CFG.ARMY_HEIGHT / 2)) - CFG.CIV_NAME_BG_EXTRA_HEIGHT_ARMY, (CFG.CIV_NAME_BG_EXTRA_WIDTH_ARMY * 2) + (CFG.game.getProvince(nProvinceID).getCore().getCivsSize() * tFlagW) + (CFG.PADDING * (CFG.game.getProvince(nProvinceID).getCore().getCivsSize() - 1)), CFG.ARMY_HEIGHT + (CFG.CIV_NAME_BG_EXTRA_HEIGHT_ARMY * 2));
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.game.getProvince(nProvinceID).getCore().getCivsSize(); i++) {
                SpriteBatch spriteBatch = oSB;
                int i2 = tFlagW;
                getCiv(CFG.game.getProvince(nProvinceID).getCore().getCivID(i)).getFlag().draw(spriteBatch, (CFG.PADDING * i) + (tPosX - (((CFG.game.getProvince(nProvinceID).getCore().getCivsSize() * tFlagW) + (CFG.PADDING * (CFG.game.getProvince(nProvinceID).getCore().getCivsSize() - 1))) / 2)) + (tFlagW * i), (tPosY - (CFG.ARMY_HEIGHT / 2)) - getCiv(CFG.game.getProvince(nProvinceID).getCore().getCivID(i)).getFlag().getHeight(), i2, CFG.ARMY_HEIGHT);
            }
        } catch (NullPointerException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (IndexOutOfBoundsException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawCivilization_Name_Flag(SpriteBatch oSB, int nProvinceID, float nScale) {
        drawCivilization_Name_Flag(oSB, nProvinceID, nScale, 1.0f);
    }

    public final void drawCivilization_Name_Flag_Crowns(SpriteBatch oSB, int nProvinceID, float nScale) {
        drawCivilization_Name_Flag_Crowns(oSB, nProvinceID, nScale, 1.0f);
    }

    public final void drawCivilization_Name_Flag_Vassals(SpriteBatch oSB, int nProvinceID, float nScale) {
        drawCivilization_Name_Flag_Vassals(oSB, nProvinceID, nScale, 1.0f);
    }

    public final void drawCivilization_Name_Flag(SpriteBatch oSB, int nProvinceID, float nScale, float fAlpha) {
        int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagW = (int) ((((((float) getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight()) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        int tFlagH = (int) (((((float) (CFG.CIV_FLAG_HEIGHT * getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight())) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f);
        if (this.iActiveProvince == nProvinceID) {
            oSB.setColor(new Color(0.99215686f, 0.9882353f, 0.9843137f, fAlpha));
        } else {
            oSB.setColor(new Color(0.015686275f, 0.015686275f, 0.015686275f, fAlpha));
        }
        drawCivNameBG(oSB, (((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - CFG.CIV_COLOR_WIDTH) - (tFlagW / 2)) - CFG.CIV_NAME_BG_EXTRA_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - CFG.CIV_NAME_BG_EXTRA_HEIGHT, getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() + (CFG.CIV_NAME_BG_EXTRA_WIDTH * 2) + tFlagW + CFG.CIV_COLOR_WIDTH, getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() + (CFG.CIV_NAME_BG_EXTRA_HEIGHT * 2));
        CFG.drawText(oSB, getCiv(getProvince(nProvinceID).getCivID()).getCivName(), (tFlagW / 2) + (tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), this.iActiveProvince == nProvinceID ? new Color(0.12156863f, 0.12156863f, 0.12156863f, 1.0f) : new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
        oSB.setColor(new Color(1.0f, 1.0f, 1.0f, fAlpha));
        getCiv(getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - getCiv(getProvince(nProvinceID).getCivID()).getFlag().getHeight(), tFlagW, tFlagH);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagW, tFlagH);
    }

    public final void drawCivilization_Name_Flag_Crowns(SpriteBatch oSB, int nProvinceID, float nScale, float fAlpha) {
        int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagW = (int) ((((((float) getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight()) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        int tFlagH = (int) (((((float) (CFG.CIV_FLAG_HEIGHT * getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight())) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f);
        if (this.iActiveProvince == nProvinceID) {
            oSB.setColor(new Color(0.99215686f, 0.9882353f, 0.9843137f, fAlpha));
        } else {
            oSB.setColor(new Color(0.015686275f, 0.015686275f, 0.015686275f, fAlpha));
        }
        drawCivNameBG(oSB, (((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - CFG.CIV_COLOR_WIDTH) - (tFlagW / 2)) - CFG.CIV_NAME_BG_EXTRA_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - CFG.CIV_NAME_BG_EXTRA_HEIGHT, getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() + (CFG.CIV_NAME_BG_EXTRA_WIDTH * 2) + tFlagW + CFG.CIV_COLOR_WIDTH, getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() + (CFG.CIV_NAME_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(new Color(1.0f, 1.0f, 1.0f, fAlpha));
        if (CFG.game.getProvince(nProvinceID).getCivID() != CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
            if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        } else if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
            drawProvince_Capital_Crown_HRE(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
        } else {
            drawProvince_Capital_Crown(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
        }
        CFG.drawText(oSB, getCiv(getProvince(nProvinceID).getCivID()).getCivName(), (tFlagW / 2) + (tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), this.iActiveProvince == nProvinceID ? new Color(0.12156863f, 0.12156863f, 0.12156863f, 1.0f) : new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
        getCiv(getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - getCiv(getProvince(nProvinceID).getCivID()).getFlag().getHeight(), tFlagW, tFlagH);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagW, tFlagH);
    }

    public final void drawCivilization_Name_Flag_Vassals(SpriteBatch oSB, int nProvinceID, float nScale, float fAlpha) {
        int tPosX = (int) (((float) (getProvince(nProvinceID).getCenterX() + getProvince(nProvinceID).getShiftX() + getProvince(nProvinceID).getTranslateProvincePosX())) * nScale);
        int tPosY = (int) (((float) (getProvince(nProvinceID).getCenterY() + getProvince(nProvinceID).getShiftY() + CFG.map.getMapCoordinates().getPosY())) * nScale);
        int tFlagW = (int) ((((((float) getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight()) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) * ((float) CFG.CIV_FLAG_WIDTH)) / 100.0f);
        int tFlagH = (int) (((((float) (CFG.CIV_FLAG_HEIGHT * getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight())) * 100.0f) / ((float) CFG.CIV_FLAG_HEIGHT)) / 100.0f);
        if (this.iActiveProvince == nProvinceID) {
            oSB.setColor(new Color(0.99215686f, 0.9882353f, 0.9843137f, fAlpha));
        } else {
            oSB.setColor(new Color(0.015686275f, 0.015686275f, 0.015686275f, fAlpha));
        }
        drawCivNameBG(oSB, (((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - CFG.CIV_COLOR_WIDTH) - (tFlagW / 2)) - CFG.CIV_NAME_BG_EXTRA_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - CFG.CIV_NAME_BG_EXTRA_HEIGHT, getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() + (CFG.CIV_NAME_BG_EXTRA_WIDTH * 2) + tFlagW + CFG.CIV_COLOR_WIDTH, getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() + (CFG.CIV_NAME_BG_EXTRA_HEIGHT * 2));
        oSB.setColor(new Color(1.0f, 1.0f, 1.0f, fAlpha));
        if (CFG.game.getProvince(nProvinceID).getCivID() != CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getPuppetOfCivID()) {
            if (CFG.game.getCiv(getProvince(nProvinceID).getCivID()).getIsPartOfHolyRomanEmpire()) {
                drawProvince_Capital_Crown_HRE_Vassal(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            } else {
                drawProvince_Capital_Crown_Vassal(oSB, (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2) + tPosX + (tFlagW / 2), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), getCiv(getProvince(nProvinceID).getCivID()).getIdeologyID());
            }
        }
        CFG.drawText(oSB, getCiv(getProvince(nProvinceID).getCivID()).getCivName(), (tFlagW / 2) + (tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)), tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2), this.iActiveProvince == nProvinceID ? new Color(0.12156863f, 0.12156863f, 0.12156863f, 1.0f) : new Color(0.9843137f, 0.9843137f, 0.9843137f, 1.0f));
        getCiv(getProvince(nProvinceID).getCivID()).getFlag().draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - getCiv(getProvince(nProvinceID).getCivID()).getFlag().getHeight(), tFlagW, tFlagH);
        ImageManager.getImage(Images.flag_rect).draw(oSB, ((tPosX - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameWidth() / 2)) - (tFlagW / 2)) - CFG.CIV_COLOR_WIDTH, (tPosY - (getCiv(getProvince(nProvinceID).getCivID()).getCivNameHeight() / 2)) - ImageManager.getImage(Images.flag_rect).getHeight(), tFlagW, tFlagH);
    }

    public final void drawWonders(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            for (int j = 0; j < getProvince(getProvinceInViewID(i)).getWonderSize(); j++) {
                getProvince(getProvinceInViewID(i)).getWonder(j).draw(oSB, getProvinceInViewID(i), nScale);
            }
        }
    }

    public final void drawWonders_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (CFG.getMetProvince(getProvinceInViewID(i))) {
                for (int j = 0; j < getProvince(getProvinceInViewID(i)).getWonderSize(); j++) {
                    getProvince(getProvinceInViewID(i)).getWonder(j).draw(oSB, getProvinceInViewID(i), nScale);
                }
            }
        }
    }

    public final void drawMountains(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                int jSize = getProvince(getProvinceInViewID(i)).getMountainsSize();
                for (int j = 0; j < jSize; j++) {
                    getProvince(getProvinceInViewID(i)).getMountain(j).draw(oSB, getProvinceInViewID(i), nScale);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawMountains_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (CFG.getMetProvince(getProvinceInViewID(i))) {
                    int jSize = getProvince(getProvinceInViewID(i)).getMountainsSize();
                    for (int j = 0; j < jSize; j++) {
                        getProvince(getProvinceInViewID(i)).getMountain(j).draw(oSB, getProvinceInViewID(i), nScale);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_All(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                    getProvince(getProvinceInViewID(i)).getCity(j).drawInLine(oSB, getProvinceInViewID(i), nScale);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_All_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i))) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).drawInLine(oSB, getProvinceInViewID(i), nScale);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities(SpriteBatch oSB, float nScale) {
        try {
            oSB.setColor(Color.WHITE);
            CFG.game.drawWonders_FogOfWarDiscovery(oSB, nScale);
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getDrawCities()) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Images(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        int i = 0;
        while (i < CFG.NUM_OF_PROVINCES_IN_VIEW) {
            try {
                if (getProvince(getProvinceInViewID(i)).getDrawCities()) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).drawCityImage_Level(oSB, getProvinceInViewID(i), nScale);
                    }
                }
                i++;
            } catch (IllegalArgumentException e) {
                return;
            }
        }
    }

    public final void drawCities_ActiveProvince_Just(SpriteBatch oSB, float nScale) {
        CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
        oSB.setColor(Color.WHITE);
        try {
            long tempTime = System.currentTimeMillis();
            if (this.lTIME_ACTIVE_CITIES > tempTime - 525) {
                oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f * (((float) (tempTime - this.lTIME_ACTIVE_CITIES)) / 525.0f)));
                if (getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && !getProvince(CFG.game.getActiveProvinceID()).getDrawCities()) {
                    for (int j = 0; j < getProvince(CFG.game.getActiveProvinceID()).getCitiesSize(); j++) {
                        getProvince(CFG.game.getActiveProvinceID()).getCity(j).draw(oSB, CFG.game.getActiveProvinceID(), nScale, new Color(CFG.COLOR_CITY_NAME.r, CFG.COLOR_CITY_NAME.g, CFG.COLOR_CITY_NAME.b, CFG.COLOR_CITY_NAME.a * (((float) (tempTime - this.lTIME_ACTIVE_CITIES)) / 525.0f)));
                    }
                }
                CFG.setRender_3(true);
            } else if (getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && !getProvince(CFG.game.getActiveProvinceID()).getDrawCities()) {
                for (int j2 = 0; j2 < getProvince(CFG.game.getActiveProvinceID()).getCitiesSize(); j2++) {
                    getProvince(CFG.game.getActiveProvinceID()).getCity(j2).draw(oSB, CFG.game.getActiveProvinceID(), nScale);
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (IllegalArgumentException e) {
        }
        oSB.setColor(Color.WHITE);
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_ActiveProvince_Just_OnlyCapitalMode(SpriteBatch oSB, float nScale) {
        CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
        oSB.setColor(Color.WHITE);
        try {
            long tempTime = System.currentTimeMillis();
            if (this.lTIME_ACTIVE_CITIES > tempTime - 525) {
                oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 1.0f * (((float) (tempTime - this.lTIME_ACTIVE_CITIES)) / 525.0f)));
                if (getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && !getProvince(CFG.game.getActiveProvinceID()).getIsCapital()) {
                    for (int j = 0; j < getProvince(CFG.game.getActiveProvinceID()).getCitiesSize(); j++) {
                        getProvince(CFG.game.getActiveProvinceID()).getCity(j).draw(oSB, CFG.game.getActiveProvinceID(), nScale, new Color(CFG.COLOR_CITY_NAME.r, CFG.COLOR_CITY_NAME.g, CFG.COLOR_CITY_NAME.b, CFG.COLOR_CITY_NAME.a * (((float) (tempTime - this.lTIME_ACTIVE_CITIES)) / 525.0f)));
                    }
                }
                CFG.setRender_3(true);
            } else if (getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && !getProvince(CFG.game.getActiveProvinceID()).getIsCapital()) {
                for (int j2 = 0; j2 < getProvince(CFG.game.getActiveProvinceID()).getCitiesSize(); j2++) {
                    getProvince(CFG.game.getActiveProvinceID()).getCity(j2).draw(oSB, CFG.game.getActiveProvinceID(), nScale);
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (IllegalArgumentException e) {
        }
        oSB.setColor(Color.WHITE);
        CFG.fontMain.getData().setScale(1.0f);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:20:0x00e5, code lost:
        r4 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x00e8, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x00ea;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x00ea, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x019b, code lost:
        if (getProvince(age.of.civilizations2.jakowski.lukasz.CFG.game.getActiveProvinceID()).getIsCapital() == false) goto L_0x019d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x020b, code lost:
        r4 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x020e, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x0210;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x0210, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x0215, code lost:
        r4 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0218, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x021a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x021a, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x02fd, code lost:
        if (getProvince(age.of.civilizations2.jakowski.lukasz.CFG.game.getActiveProvinceID()).getIsCapital() == false) goto L_0x02ff;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x0719 A[Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }] */
    /* JADX WARNING: Removed duplicated region for block: B:211:0x0942 A[Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }] */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x0215 A[ExcHandler: IndexOutOfBoundsException (r4v0 'ex' java.lang.IndexOutOfBoundsException A[CUSTOM_DECLARE]), Splitter:B:7:0x002b] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void drawCities_ActiveProvince(com.badlogic.gdx.graphics.g2d.SpriteBatch r25, float r26) {
        /*
            r24 = this;
            com.badlogic.gdx.graphics.g2d.BitmapFont r14 = age.of.civilizations2.jakowski.lukasz.CFG.fontMain
            com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData r14 = r14.getData()
            age.of.civilizations2.jakowski.lukasz.SettingsManager r15 = age.of.civilizations2.jakowski.lukasz.CFG.settingsManager
            float r15 = r15.CITIES_FONT_SCALE
            r14.setScale(r15)
            com.badlogic.gdx.graphics.Color r14 = com.badlogic.gdx.graphics.Color.WHITE
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)
            long r12 = java.lang.System.currentTimeMillis()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game_Action$TurnStates r14 = r14.getActiveTurnState()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game_Action$TurnStates r15 = age.of.civilizations2.jakowski.lukasz.Game_Action.TurnStates.TURN_ACTIONS     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != r15) goto L_0x00ed
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x00ed
            r5 = 0
        L_0x002b:
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getMoveUnitsSize()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            if (r5 >= r14) goto L_0x00ed
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            if (r14 == 0) goto L_0x006b
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            if (r14 == 0) goto L_0x006e
        L_0x006b:
            int r5 = r5 + 1
            goto L_0x002b
        L_0x006e:
            r8 = 0
        L_0x006f:
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            if (r8 >= r14) goto L_0x006b
            age.of.civilizations2.jakowski.lukasz.Game_Action r14 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r14 = r14.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Game_Action r15 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r15 = r15.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            age.of.civilizations2.jakowski.lukasz.Move_Units r15 = r15.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x00e5, NullPointerException -> 0x020b, IllegalArgumentException -> 0x0c54 }
            int r8 = r8 + 1
            goto L_0x006f
        L_0x00e5:
            r4 = move-exception
            boolean r14 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x00ed
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
        L_0x00ed:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 < 0) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Province r14 = r14.getProvince(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 >= 0) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Province r14 = r14.getProvince(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getSeaProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != 0) goto L_0x0234
            r0 = r24
            long r14 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r16 = 525(0x20d, double:2.594E-321)
            long r16 = r12 - r16
            int r14 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r14 <= 0) goto L_0x02ad
            com.badlogic.gdx.graphics.Color r14 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r15 = 1065353216(0x3f800000, float:1.0)
            r16 = 1065353216(0x3f800000, float:1.0)
            r17 = 1065353216(0x3f800000, float:1.0)
            r18 = 1065353216(0x3f800000, float:1.0)
            r0 = r24
            long r0 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            long r19 = r12 - r19
            r0 = r19
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            r20 = 1141063680(0x44034000, float:525.0)
            float r19 = r19 / r20
            float r18 = r18 * r19
            r14.<init>(r15, r16, r17, r18)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0230
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 >= 0) goto L_0x0230
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x019d
            age.of.civilizations2.jakowski.lukasz.ViewsManager r14 = age.of.civilizations2.jakowski.lukasz.CFG.viewsManager     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveViewID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = age.of.civilizations2.jakowski.lukasz.ViewsManager.VIEW_DIPLOMACY_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != r15) goto L_0x0230
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getIsCapital()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != 0) goto L_0x0230
        L_0x019d:
            r9 = 0
        L_0x019e:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r9 >= r14) goto L_0x0230
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r9)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r0 = r24
            long r0 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r21 = r0
            long r21 = r12 - r21
            r0 = r21
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r21 = r0
            r22 = 1141063680(0x44034000, float:525.0)
            float r21 = r21 / r22
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r9 = r9 + 1
            goto L_0x019e
        L_0x020b:
            r4 = move-exception
            boolean r14 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x00ed
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            goto L_0x00ed
        L_0x0215:
            r4 = move-exception
            boolean r14 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r14 == 0) goto L_0x021d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r4)
        L_0x021d:
            com.badlogic.gdx.graphics.Color r14 = com.badlogic.gdx.graphics.Color.WHITE
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)
            com.badlogic.gdx.graphics.g2d.BitmapFont r14 = age.of.civilizations2.jakowski.lukasz.CFG.fontMain
            com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData r14 = r14.getData()
            r15 = 1065353216(0x3f800000, float:1.0)
            r14.setScale(r15)
            return
        L_0x0230:
            r14 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
        L_0x0234:
            r0 = r24
            boolean r14 = r0.HIGHLIGHTED_CITIES_DISABLE_ANIMATION     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x042d
            r0 = r24
            long r14 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r16 = 350(0x15e, double:1.73E-321)
            long r16 = r12 - r16
            int r14 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r14 <= 0) goto L_0x03c6
            com.badlogic.gdx.graphics.Color r14 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r15 = 1065353216(0x3f800000, float:1.0)
            r16 = 1065353216(0x3f800000, float:1.0)
            r17 = 1065353216(0x3f800000, float:1.0)
            r18 = 1065353216(0x3f800000, float:1.0)
            r19 = 1065353216(0x3f800000, float:1.0)
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            long r20 = r12 - r20
            r0 = r20
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1135542272(0x43af0000, float:350.0)
            float r20 = r20 / r21
            float r19 = r19 * r20
            float r18 = r18 - r19
            r14.<init>(r15, r16, r17, r18)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r5 = 0
        L_0x0270:
            r0 = r24
            int r14 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r5 >= r14) goto L_0x03c2
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x02aa
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0332
        L_0x02aa:
            int r5 = r5 + 1
            goto L_0x0270
        L_0x02ad:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 >= 0) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x02ff
            age.of.civilizations2.jakowski.lukasz.ViewsManager r14 = age.of.civilizations2.jakowski.lukasz.CFG.viewsManager     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveViewID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = age.of.civilizations2.jakowski.lukasz.ViewsManager.VIEW_DIPLOMACY_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != r15) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getIsCapital()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != 0) goto L_0x0234
        L_0x02ff:
            r9 = 0
        L_0x0300:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r9 >= r14) goto L_0x0234
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r9)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r14.draw(r0, r15, r1)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r9 = r9 + 1
            goto L_0x0300
        L_0x0332:
            r8 = 0
        L_0x0333:
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x02aa
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r15 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            com.badlogic.gdx.graphics.Color r21 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r21
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r21 = r0
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r22 = r0
            long r22 = r12 - r22
            r0 = r22
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r22 = r0
            r23 = 1135542272(0x43af0000, float:350.0)
            float r22 = r22 / r23
            float r21 = r21 * r22
            float r20 = r20 - r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r15.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r14, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x0333
        L_0x03c2:
            r14 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
        L_0x03c6:
            r0 = r24
            long r14 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r16 = 350(0x15e, double:1.73E-321)
            long r16 = r12 - r16
            int r14 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r14 <= 0) goto L_0x0731
            com.badlogic.gdx.graphics.Color r14 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r15 = 1065353216(0x3f800000, float:1.0)
            r16 = 1065353216(0x3f800000, float:1.0)
            r17 = 1065353216(0x3f800000, float:1.0)
            r18 = 1065353216(0x3f800000, float:1.0)
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r19 = r0
            long r19 = r12 - r19
            r0 = r19
            float r0 = (float) r0     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r19 = r0
            r20 = 1135542272(0x43af0000, float:350.0)
            float r19 = r19 / r20
            float r18 = r18 * r19
            r14.<init>(r15, r16, r17, r18)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r5 = 0
        L_0x03f8:
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRouteSize()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r5 >= r14) goto L_0x0706
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            boolean r14 = r14.getDrawProvince()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r14 == 0) goto L_0x042a
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            boolean r14 = r14.getDrawCities()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r14 == 0) goto L_0x068e
        L_0x042a:
            int r5 = r5 + 1
            goto L_0x03f8
        L_0x042d:
            r0 = r24
            long r14 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r16 = 750(0x2ee, double:3.705E-321)
            long r16 = r12 - r16
            int r14 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r14 <= 0) goto L_0x052d
            com.badlogic.gdx.graphics.Color r14 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r15 = 1065353216(0x3f800000, float:1.0)
            r16 = 1065353216(0x3f800000, float:1.0)
            r17 = 1065353216(0x3f800000, float:1.0)
            r18 = 1065353216(0x3f800000, float:1.0)
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            long r19 = r12 - r19
            r0 = r19
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            r20 = 1144750080(0x443b8000, float:750.0)
            float r19 = r19 / r20
            float r18 = r18 * r19
            r14.<init>(r15, r16, r17, r18)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r5 = 0
        L_0x0460:
            r0 = r24
            int r14 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r5 >= r14) goto L_0x0524
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x049a
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x049d
        L_0x049a:
            int r5 = r5 + 1
            goto L_0x0460
        L_0x049d:
            r8 = 0
        L_0x049e:
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x049a
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r15 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r21 = r0
            long r21 = r12 - r21
            r0 = r21
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r21 = r0
            r22 = 1144750080(0x443b8000, float:750.0)
            float r21 = r21 / r22
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r15.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r14, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x049e
        L_0x0524:
            r14 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            goto L_0x03c6
        L_0x052a:
            r14 = move-exception
            goto L_0x021d
        L_0x052d:
            int r14 = age.of.civilizations2.jakowski.lukasz.CFG.chosenProvinceID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 < 0) goto L_0x0605
            r5 = 0
        L_0x0532:
            r0 = r24
            int r14 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r5 >= r14) goto L_0x03c6
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x056c
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x056f
        L_0x056c:
            int r5 = r5 + 1
            goto L_0x0532
        L_0x056f:
            r8 = 0
        L_0x0570:
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x056c
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r15 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r17 = age.of.civilizations2.jakowski.lukasz.CFG.chosenProvinceID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            if (r14 != r0) goto L_0x05d2
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
        L_0x05c6:
            r0 = r25
            r1 = r16
            r2 = r26
            r15.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r1, (float) r2, (com.badlogic.gdx.graphics.Color) r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x0570
        L_0x05d2:
            com.badlogic.gdx.graphics.Color r14 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r0 = r17
            r1 = r18
            r2 = r19
            r3 = r20
            r14.<init>(r0, r1, r2, r3)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            goto L_0x05c6
        L_0x0605:
            r5 = 0
        L_0x0606:
            r0 = r24
            int r14 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r5 >= r14) goto L_0x03c6
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0640
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0643
        L_0x0640:
            int r5 = r5 + 1
            goto L_0x0606
        L_0x0643:
            r8 = 0
        L_0x0644:
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x0640
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r15 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            java.util.List<java.lang.Integer> r14 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Object r14 = r14.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            java.lang.Integer r14 = (java.lang.Integer) r14     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r15.draw(r0, r14, r1)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x0644
        L_0x068e:
            r8 = 0
        L_0x068f:
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getCitiesSize()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r8 >= r14) goto L_0x042a
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r15 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r15 = r15.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r17
            float r0 = r0.r     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r18
            float r0 = r0.g     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r19
            float r0 = r0.b     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r20
            float r0 = r0.a     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r0 = r24
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r21 = r0
            long r21 = r12 - r21
            r0 = r21
            float r0 = (float) r0     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r21 = r0
            r22 = 1135542272(0x43af0000, float:350.0)
            float r21 = r21 / r22
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r8 = r8 + 1
            goto L_0x068f
        L_0x0706:
            r14 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
        L_0x070a:
            com.badlogic.gdx.graphics.Color r14 = com.badlogic.gdx.graphics.Color.WHITE     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r0.setColor((com.badlogic.gdx.graphics.Color) r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = age.of.civilizations2.jakowski.lukasz.CFG.SPECTATOR_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 != 0) goto L_0x0719
            boolean r14 = age.of.civilizations2.jakowski.lukasz.CFG.FREEPLAY_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0942
        L_0x0719:
            r11 = 1
        L_0x071a:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCivsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r11 >= r14) goto L_0x021d
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getNumOfProvinces()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 > 0) goto L_0x07cc
        L_0x072e:
            int r11 = r11 + 1
            goto L_0x071a
        L_0x0731:
            r5 = 0
        L_0x0732:
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRouteSize()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r5 >= r14) goto L_0x070a
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            boolean r14 = r14.getDrawProvince()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r14 == 0) goto L_0x0764
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            boolean r14 = r14.getDrawCities()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r14 == 0) goto L_0x0767
        L_0x0764:
            int r5 = r5 + 1
            goto L_0x0732
        L_0x0767:
            r8 = 0
        L_0x0768:
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getCitiesSize()     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            if (r8 >= r14) goto L_0x0764
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r14 = r14.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r15 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r15 = r15.getRoute(r5)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r17
            float r0 = r0.r     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r18
            float r0 = r0.g     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r19
            float r0 = r0.b     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r20
            float r0 = r0.a     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ NullPointerException -> 0x0c51, IllegalArgumentException -> 0x0c4e, IndexOutOfBoundsException -> 0x0215 }
            int r8 = r8 + 1
            goto L_0x0768
        L_0x07cc:
            r6 = 0
        L_0x07cd:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getMoveUnitsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r6 >= r14) goto L_0x0887
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x080d
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0810
        L_0x080d:
            int r6 = r6 + 1
            goto L_0x07cd
        L_0x0810:
            r10 = 0
        L_0x0811:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r10 >= r14) goto L_0x080d
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r15 = r15.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r15 = r15.getMoveUnits(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r10 = r10 + 1
            goto L_0x0811
        L_0x0887:
            r6 = 0
        L_0x0888:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getRegroupArmySize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r6 >= r14) goto L_0x072e
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x08c8
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x08cb
        L_0x08c8:
            int r6 = r6 + 1
            goto L_0x0888
        L_0x08cb:
            r10 = 0
        L_0x08cc:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r10 >= r14) goto L_0x08c8
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r15 = r15.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r15 = r15.getRegroupArmy(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r10 = r10 + 1
            goto L_0x08cc
        L_0x0942:
            r7 = 0
        L_0x0943:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getMoveUnitsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r7 >= r14) goto L_0x0a46
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x09a7
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x09aa
        L_0x09a7:
            int r7 = r7 + 1
            goto L_0x0943
        L_0x09aa:
            r8 = 0
        L_0x09ab:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x09a7
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMoveUnits(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r16 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r17 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r16 = r16.getPlayer(r17)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = r16.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r15 = r15.getCiv(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r15 = r15.getMoveUnits(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x09ab
        L_0x0a46:
            r7 = 0
        L_0x0a47:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getMigrateSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r7 >= r14) goto L_0x0b4a
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMigrate(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0aab
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMigrate(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0aae
        L_0x0aab:
            int r7 = r7 + 1
            goto L_0x0a47
        L_0x0aae:
            r8 = 0
        L_0x0aaf:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMigrate(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x0aab
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r14 = r14.getMigrate(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r16 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r17 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r16 = r16.getPlayer(r17)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = r16.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r15 = r15.getCiv(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r15 = r15.getMigrate(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x0aaf
        L_0x0b4a:
            r7 = 0
        L_0x0b4b:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getRegroupArmySize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r7 >= r14) goto L_0x021d
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0baf
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            boolean r14 = r14.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r14 == 0) goto L_0x0bb2
        L_0x0baf:
            int r7 = r7 + 1
            goto L_0x0b4b
        L_0x0bb2:
            r8 = 0
        L_0x0bb3:
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            if (r8 >= r14) goto L_0x0baf
            age.of.civilizations2.jakowski.lukasz.Game r14 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r15 = r15.getPlayer(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r14 = r14.getCiv(r15)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r14 = r14.getRegroupArmy(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r14 = r14.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r24
            age.of.civilizations2.jakowski.lukasz.Province r14 = r0.getProvince(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.City r14 = r14.getCity(r8)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r15 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Game r16 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r17 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Player r16 = r16.getPlayer(r17)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r16 = r16.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.Civilization r15 = r15.getCiv(r16)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r15 = r15.getRegroupArmy(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r15 = r15.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r16 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r17
            float r0 = r0.r     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r17 = r0
            com.badlogic.gdx.graphics.Color r18 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r18
            float r0 = r0.g     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r18 = r0
            com.badlogic.gdx.graphics.Color r19 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r19
            float r0 = r0.b     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r19 = r0
            com.badlogic.gdx.graphics.Color r20 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r20
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r20 = r0
            r21 = 1053609165(0x3ecccccd, float:0.4)
            float r20 = r20 * r21
            r16.<init>(r17, r18, r19, r20)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            r0 = r25
            r1 = r26
            r2 = r16
            r14.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r15, (float) r1, (com.badlogic.gdx.graphics.Color) r2)     // Catch:{ IndexOutOfBoundsException -> 0x0215, IllegalArgumentException -> 0x052a }
            int r8 = r8 + 1
            goto L_0x0bb3
        L_0x0c4e:
            r14 = move-exception
            goto L_0x070a
        L_0x0c51:
            r14 = move-exception
            goto L_0x070a
        L_0x0c54:
            r14 = move-exception
            goto L_0x00ed
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.drawCities_ActiveProvince(com.badlogic.gdx.graphics.g2d.SpriteBatch, float):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:194:0x0801, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x0804, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x0806;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x0806, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x019a, code lost:
        if (getProvince(age.of.civilizations2.jakowski.lukasz.CFG.game.getActiveProvinceID()).getIsCapital() == false) goto L_0x019c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0206, code lost:
        r3 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x0209, code lost:
        if (age.of.civilizations2.jakowski.lukasz.CFG.LOGS != false) goto L_0x020b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x020b, code lost:
        age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x02ed, code lost:
        if (getProvince(age.of.civilizations2.jakowski.lukasz.CFG.game.getActiveProvinceID()).getIsCapital() == false) goto L_0x02ef;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x0206 A[ExcHandler: IndexOutOfBoundsException (r3v0 'ex' java.lang.IndexOutOfBoundsException A[CUSTOM_DECLARE]), Splitter:B:7:0x002b] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void drawCities_ActiveProvince_FogOfWarDiscovery(com.badlogic.gdx.graphics.g2d.SpriteBatch r21, float r22) {
        /*
            r20 = this;
            com.badlogic.gdx.graphics.g2d.BitmapFont r10 = age.of.civilizations2.jakowski.lukasz.CFG.fontMain
            com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData r10 = r10.getData()
            age.of.civilizations2.jakowski.lukasz.SettingsManager r11 = age.of.civilizations2.jakowski.lukasz.CFG.settingsManager
            float r11 = r11.CITIES_FONT_SCALE
            r10.setScale(r11)
            com.badlogic.gdx.graphics.Color r10 = com.badlogic.gdx.graphics.Color.WHITE
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)
            long r8 = java.lang.System.currentTimeMillis()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game_Action$TurnStates r10 = r10.getActiveTurnState()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game_Action$TurnStates r11 = age.of.civilizations2.jakowski.lukasz.Game_Action.TurnStates.TURN_ACTIONS     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != r11) goto L_0x00df
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x00df
            r5 = 0
        L_0x002b:
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getMoveUnitsSize()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            if (r5 >= r10) goto L_0x00df
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            if (r10 == 0) goto L_0x006b
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            if (r10 == 0) goto L_0x006e
        L_0x006b:
            int r5 = r5 + 1
            goto L_0x002b
        L_0x006e:
            r6 = 0
        L_0x006f:
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            if (r6 >= r10) goto L_0x006b
            age.of.civilizations2.jakowski.lukasz.Game_Action r10 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r10 = r10.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Game_Action r11 = age.of.civilizations2.jakowski.lukasz.CFG.gameAction     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.MoveUnits_TurnData r11 = r11.getCurrentMoveunits()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            age.of.civilizations2.jakowski.lukasz.Move_Units r11 = r11.getMoveUnits(r5)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r11 = r11.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x00d7, NullPointerException -> 0x01fc, IllegalArgumentException -> 0x09bb }
            int r6 = r6 + 1
            goto L_0x006f
        L_0x00d7:
            r3 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x00df
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
        L_0x00df:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 < 0) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Province r10 = r10.getProvince(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 >= 0) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Province r10 = r10.getProvince(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getSeaProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != 0) goto L_0x0225
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Player r10 = r0.getPlayer(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getMetProvince(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0225
            r0 = r20
            long r10 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r12 = 525(0x20d, double:2.594E-321)
            long r12 = r8 - r12
            int r10 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r10 <= 0) goto L_0x029d
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r11 = 1065353216(0x3f800000, float:1.0)
            r12 = 1065353216(0x3f800000, float:1.0)
            r13 = 1065353216(0x3f800000, float:1.0)
            r14 = 1065353216(0x3f800000, float:1.0)
            r0 = r20
            long r15 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            long r15 = r8 - r15
            float r15 = (float) r15     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = 1141063680(0x44034000, float:525.0)
            float r15 = r15 / r16
            float r14 = r14 * r15
            r10.<init>(r11, r12, r13, r14)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0221
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 >= 0) goto L_0x0221
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x019c
            age.of.civilizations2.jakowski.lukasz.ViewsManager r10 = age.of.civilizations2.jakowski.lukasz.CFG.viewsManager     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveViewID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = age.of.civilizations2.jakowski.lukasz.ViewsManager.VIEW_DIPLOMACY_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != r11) goto L_0x0221
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getIsCapital()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != 0) goto L_0x0221
        L_0x019c:
            r7 = 0
        L_0x019d:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r7 >= r10) goto L_0x0221
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r0 = r20
            long r0 = r0.lTIME_ACTIVE_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r17 = r0
            long r17 = r8 - r17
            r0 = r17
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r17 = r0
            r18 = 1141063680(0x44034000, float:525.0)
            float r17 = r17 / r18
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r7 = r7 + 1
            goto L_0x019d
        L_0x01fc:
            r3 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x00df
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            goto L_0x00df
        L_0x0206:
            r3 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r10 == 0) goto L_0x020e
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
        L_0x020e:
            com.badlogic.gdx.graphics.Color r10 = com.badlogic.gdx.graphics.Color.WHITE
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)
            com.badlogic.gdx.graphics.g2d.BitmapFont r10 = age.of.civilizations2.jakowski.lukasz.CFG.fontMain
            com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData r10 = r10.getData()
            r11 = 1065353216(0x3f800000, float:1.0)
            r10.setScale(r11)
            return
        L_0x0221:
            r10 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
        L_0x0225:
            r0 = r20
            boolean r10 = r0.HIGHLIGHTED_CITIES_DISABLE_ANIMATION     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0423
            r0 = r20
            long r10 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r12 = 350(0x15e, double:1.73E-321)
            long r12 = r8 - r12
            int r10 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r10 <= 0) goto L_0x03a7
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r11 = 1065353216(0x3f800000, float:1.0)
            r12 = 1065353216(0x3f800000, float:1.0)
            r13 = 1065353216(0x3f800000, float:1.0)
            r14 = 1065353216(0x3f800000, float:1.0)
            r15 = 1065353216(0x3f800000, float:1.0)
            r0 = r20
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            long r16 = r8 - r16
            r0 = r16
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r17 = 1135542272(0x43af0000, float:350.0)
            float r16 = r16 / r17
            float r15 = r15 * r16
            float r14 = r14 - r15
            r10.<init>(r11, r12, r13, r14)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r5 = 0
        L_0x0260:
            r0 = r20
            int r10 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r5 >= r10) goto L_0x03a3
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x029a
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0322
        L_0x029a:
            int r5 = r5 + 1
            goto L_0x0260
        L_0x029d:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getWasteland()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 >= 0) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x02ef
            age.of.civilizations2.jakowski.lukasz.ViewsManager r10 = age.of.civilizations2.jakowski.lukasz.CFG.viewsManager     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveViewID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = age.of.civilizations2.jakowski.lukasz.ViewsManager.VIEW_DIPLOMACY_MODE     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != r11) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getIsCapital()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != 0) goto L_0x0225
        L_0x02ef:
            r7 = 0
        L_0x02f0:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r7 >= r10) goto L_0x0225
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r7)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getActiveProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r10.draw(r0, r11, r1)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r7 = r7 + 1
            goto L_0x02f0
        L_0x0322:
            r6 = 0
        L_0x0323:
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x029a
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r11 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            com.badlogic.gdx.graphics.Color r17 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r17
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r17 = r0
            r0 = r20
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r18 = r0
            long r18 = r8 - r18
            r0 = r18
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r18 = r0
            r19 = 1135542272(0x43af0000, float:350.0)
            float r18 = r18 / r19
            float r17 = r17 * r18
            float r16 = r16 - r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r11.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r10, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x0323
        L_0x03a3:
            r10 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
        L_0x03a7:
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x06c6
            r0 = r20
            long r10 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r12 = 350(0x15e, double:1.73E-321)
            long r12 = r8 - r12
            int r10 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r10 <= 0) goto L_0x075e
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r11 = 1065353216(0x3f800000, float:1.0)
            r12 = 1065353216(0x3f800000, float:1.0)
            r13 = 1065353216(0x3f800000, float:1.0)
            r14 = 1065353216(0x3f800000, float:1.0)
            r0 = r20
            long r15 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            long r15 = r8 - r15
            float r15 = (float) r15     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r16 = 1135542272(0x43af0000, float:350.0)
            float r15 = r15 / r16
            float r14 = r14 * r15
            r10.<init>(r11, r12, r13, r14)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r5 = 0
        L_0x03d8:
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRouteSize()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r5 >= r10) goto L_0x06c2
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Player r10 = r0.getPlayer(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r11 = r11.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getMetProvince(r11)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x0420
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getDrawProvince()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x0420
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getDrawCities()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x0658
        L_0x0420:
            int r5 = r5 + 1
            goto L_0x03d8
        L_0x0423:
            r0 = r20
            long r10 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r12 = 750(0x2ee, double:3.705E-321)
            long r12 = r8 - r12
            int r10 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r10 <= 0) goto L_0x050d
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r11 = 1065353216(0x3f800000, float:1.0)
            r12 = 1065353216(0x3f800000, float:1.0)
            r13 = 1065353216(0x3f800000, float:1.0)
            r14 = 1065353216(0x3f800000, float:1.0)
            r0 = r20
            long r15 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            long r15 = r8 - r15
            float r15 = (float) r15     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = 1144750080(0x443b8000, float:750.0)
            float r15 = r15 / r16
            float r14 = r14 * r15
            r10.<init>(r11, r12, r13, r14)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r5 = 0
        L_0x044f:
            r0 = r20
            int r10 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r5 >= r10) goto L_0x0504
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0489
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x048c
        L_0x0489:
            int r5 = r5 + 1
            goto L_0x044f
        L_0x048c:
            r6 = 0
        L_0x048d:
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x0489
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r11 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r0 = r20
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r17 = r0
            long r17 = r8 - r17
            r0 = r17
            float r0 = (float) r0     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r17 = r0
            r18 = 1144750080(0x443b8000, float:750.0)
            float r17 = r17 / r18
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r11.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r10, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x048d
        L_0x0504:
            r10 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            goto L_0x03a7
        L_0x050a:
            r10 = move-exception
            goto L_0x020e
        L_0x050d:
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.chosenProvinceID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 < 0) goto L_0x05cf
            r5 = 0
        L_0x0512:
            r0 = r20
            int r10 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r5 >= r10) goto L_0x03a7
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x054c
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x054f
        L_0x054c:
            int r5 = r5 + 1
            goto L_0x0512
        L_0x054f:
            r6 = 0
        L_0x0550:
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x054c
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r11 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r13 = age.of.civilizations2.jakowski.lukasz.CFG.chosenProvinceID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 != r13) goto L_0x05ae
            com.badlogic.gdx.graphics.Color r10 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
        L_0x05a4:
            r0 = r21
            r1 = r22
            r11.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r12, (float) r1, (com.badlogic.gdx.graphics.Color) r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x0550
        L_0x05ae:
            com.badlogic.gdx.graphics.Color r10 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r0 = r16
            r10.<init>(r13, r14, r15, r0)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            goto L_0x05a4
        L_0x05cf:
            r5 = 0
        L_0x05d0:
            r0 = r20
            int r10 = r0.iHighlightedProvincesSize     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r5 >= r10) goto L_0x03a7
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x060a
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x060d
        L_0x060a:
            int r5 = r5 + 1
            goto L_0x05d0
        L_0x060d:
            r6 = 0
        L_0x060e:
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x060a
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r11 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            java.util.List<java.lang.Integer> r10 = r0.lHighlightedProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.intValue()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r11.draw(r0, r10, r1)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x060e
        L_0x0658:
            r6 = 0
        L_0x0659:
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getCitiesSize()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r6 >= r10) goto L_0x0420
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r6)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r11 = r11.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r13 = r13.r     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r14 = r14.g     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r15 = r15.b     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r16
            float r0 = r0.a     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r0 = r20
            long r0 = r0.lTIME_HIGHLIGHTED_CITIES     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r17 = r0
            long r17 = r8 - r17
            r0 = r17
            float r0 = (float) r0     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r17 = r0
            r18 = 1135542272(0x43af0000, float:350.0)
            float r17 = r17 / r18
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r6 = r6 + 1
            goto L_0x0659
        L_0x06c2:
            r10 = 1
            age.of.civilizations2.jakowski.lukasz.CFG.setRender_3(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
        L_0x06c6:
            com.badlogic.gdx.graphics.Color r10 = com.badlogic.gdx.graphics.Color.WHITE     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r0.setColor((com.badlogic.gdx.graphics.Color) r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r4 = 0
        L_0x06ce:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getMoveUnitsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r4 >= r10) goto L_0x0899
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Player r10 = r0.getPlayer(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r12 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r13 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r12 = r12.getPlayer(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = r12.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r11.getCiv(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r11 = r11.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getMetProvince(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x075a
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x075a
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x080b
        L_0x075a:
            int r4 = r4 + 1
            goto L_0x06ce
        L_0x075e:
            r5 = 0
        L_0x075f:
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRouteSize()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r5 >= r10) goto L_0x06c6
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Player r10 = r0.getPlayer(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r11 = r11.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getMetProvince(r11)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x07a7
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getDrawProvince()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x07a7
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            boolean r10 = r10.getDrawCities()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r10 == 0) goto L_0x07aa
        L_0x07a7:
            int r5 = r5 + 1
            goto L_0x075f
        L_0x07aa:
            r6 = 0
        L_0x07ab:
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getCitiesSize()     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            if (r6 >= r10) goto L_0x07a7
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r10 = r10.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r6)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r0.currentRegroupArmy     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r11 = r11.getRoute(r5)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r13 = r13.r     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r14 = r14.g     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            float r15 = r15.b     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r16
            float r0 = r0.a     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ NullPointerException -> 0x0801, IllegalArgumentException -> 0x09b8, IndexOutOfBoundsException -> 0x0206 }
            int r6 = r6 + 1
            goto L_0x07ab
        L_0x0801:
            r2 = move-exception
            boolean r10 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x06c6
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r2)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            goto L_0x06c6
        L_0x080b:
            r6 = 0
        L_0x080c:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x075a
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r10 = r10.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r12 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r13 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r12 = r12.getPlayer(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = r12.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r11.getCiv(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Move_Units r11 = r11.getMoveUnits(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x080c
        L_0x0899:
            r4 = 0
        L_0x089a:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getRegroupArmySize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r4 >= r10) goto L_0x020e
            int r10 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Player r10 = r0.getPlayer(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r12 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r13 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r12 = r12.getPlayer(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = r12.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r11.getCiv(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r11.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getMetProvince(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0926
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r10.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawProvince()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x0926
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r10.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            boolean r10 = r10.getDrawCities()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r10 == 0) goto L_0x092a
        L_0x0926:
            int r4 = r4 + 1
            goto L_0x089a
        L_0x092a:
            r6 = 0
        L_0x092b:
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r10.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getCitiesSize()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            if (r6 >= r10) goto L_0x0926
            age.of.civilizations2.jakowski.lukasz.Game r10 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r11 = r11.getPlayer(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r10 = r10.getCiv(r11)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r10 = r10.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r10 = r10.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r20
            age.of.civilizations2.jakowski.lukasz.Province r10 = r0.getProvince(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.City r10 = r10.getCity(r6)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r11 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Game r12 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r13 = age.of.civilizations2.jakowski.lukasz.CFG.PLAYER_TURNID     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Player r12 = r12.getPlayer(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r12 = r12.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.Civilization r11 = r11.getCiv(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            age.of.civilizations2.jakowski.lukasz.RegroupArmy_Data r11 = r11.getRegroupArmy(r4)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r11 = r11.getToProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r12 = new com.badlogic.gdx.graphics.Color     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r13 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r13 = r13.r     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r14 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r14 = r14.g     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r15 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            float r15 = r15.b     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            com.badlogic.gdx.graphics.Color r16 = age.of.civilizations2.jakowski.lukasz.CFG.COLOR_CITY_NAME     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r16
            float r0 = r0.a     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r16 = r0
            r17 = 1053609165(0x3ecccccd, float:0.4)
            float r16 = r16 * r17
            r12.<init>(r13, r14, r15, r16)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            r0 = r21
            r1 = r22
            r10.draw((com.badlogic.gdx.graphics.g2d.SpriteBatch) r0, (int) r11, (float) r1, (com.badlogic.gdx.graphics.Color) r12)     // Catch:{ IndexOutOfBoundsException -> 0x0206, IllegalArgumentException -> 0x050a }
            int r6 = r6 + 1
            goto L_0x092b
        L_0x09b8:
            r10 = move-exception
            goto L_0x06c6
        L_0x09bb:
            r10 = move-exception
            goto L_0x00df
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.drawCities_ActiveProvince_FogOfWarDiscovery(com.badlogic.gdx.graphics.g2d.SpriteBatch, float):void");
    }

    public final void drawCities_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            oSB.setColor(Color.WHITE);
            CFG.game.drawWonders_FogOfWarDiscovery(oSB, nScale);
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getDrawCities()) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        if (CFG.getMetProvince(getProvinceInViewID(i))) {
                            getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_AlliancesMode(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getAllianceID() > 0) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_AlliancesMode_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getAllianceID() > 0 && CFG.getMetProvince(getProvinceInViewID(i))) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_Imperial(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getIsPartOfHolyRomanEmpire()) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_StartTheGame(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 0.25f + (0.75f * (((float) CFG.startTheGameData.getCapitalsAlpha()) / ((float) CFG.settingsManager.PROVINCE_ALPHA)))));
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, new Color(CFG.COLOR_CITY_NAME.r, CFG.COLOR_CITY_NAME.g, CFG.COLOR_CITY_NAME.b, CFG.COLOR_CITY_NAME.a * (((float) CFG.startTheGameData.getProvincesAlpha()) / ((float) CFG.settingsManager.PROVINCE_ALPHA))));
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && CFG.getMetProvince(getProvinceInViewID(i))) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_Imperial_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getIsPartOfHolyRomanEmpire() && CFG.getMetProvince(getProvinceInViewID(i))) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_StartTheGame_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(new Color(1.0f, 1.0f, 1.0f, 0.25f + (0.75f * (((float) CFG.startTheGameData.getCapitalsAlpha()) / ((float) CFG.settingsManager.PROVINCE_ALPHA)))));
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && CFG.getMetProvince(getProvinceInViewID(i))) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, new Color(CFG.COLOR_CITY_NAME.r, CFG.COLOR_CITY_NAME.g, CFG.COLOR_CITY_NAME.b, CFG.COLOR_CITY_NAME.a * (((float) CFG.startTheGameData.getProvincesAlpha()) / ((float) CFG.settingsManager.PROVINCE_ALPHA))));
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_IncomeMapMode(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || getCiv(getProvince(getProvinceInViewID(i)).getCivID()).getPuppetOfCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_Player(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getCivID() == getPlayer(CFG.PLAYER_TURNID).getCivID() && getProvince(getProvinceInViewID(i)).getIsCapital()) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyFormableCivCapital(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            if (CFG.formableCivs_GameData.getCapitalProvinceID() >= 0 && CFG.game.getProvince(CFG.formableCivs_GameData.getCapitalProvinceID()).getWasteland() < 0 && !CFG.game.getProvince(CFG.formableCivs_GameData.getCapitalProvinceID()).getSeaProvince() && getProvince(CFG.formableCivs_GameData.getCapitalProvinceID()).getCitiesSize() > 0) {
                getProvince(CFG.formableCivs_GameData.getCapitalProvinceID()).getCity(0).draw(oSB, CFG.formableCivs_GameData.getCapitalProvinceID(), nScale, Images.city);
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Timeline(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            boolean isActiveProvinceCapital = false;
            if (CFG.game.getActiveProvinceID() < 0 || !CFG.game.getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() || CFG.game.getProvince(CFG.game.getActiveProvinceID()).getSeaProvince()) {
                isActiveProvinceCapital = true;
            }
            for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
                if (CFG.game.getActiveProvinceID() == CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()) {
                    isActiveProvinceCapital = true;
                }
                if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince() && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCitiesSize() > 0) {
                    getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCity(0).draw(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), nScale, Images.city);
                }
            }
            if (!isActiveProvinceCapital) {
                if (CFG.game.getActiveProvinceID() >= 0 && getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && getProvince(CFG.game.getActiveProvinceID()).getCitiesSize() > 0) {
                    getProvince(CFG.game.getActiveProvinceID()).getCity(0).draw(oSB, CFG.game.getActiveProvinceID(), nScale, Images.city3);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Timeline_FogOfWar(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            boolean isActiveProvinceCapital = false;
            if (CFG.game.getActiveProvinceID() < 0 || !CFG.game.getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() || CFG.game.getProvince(CFG.game.getActiveProvinceID()).getSeaProvince()) {
                isActiveProvinceCapital = true;
            }
            for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
                if (CFG.game.getActiveProvinceID() == CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()) {
                    isActiveProvinceCapital = true;
                }
                if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()) && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince() && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCitiesSize() > 0) {
                    getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCity(0).draw(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), nScale, Images.city);
                }
            }
            if (!isActiveProvinceCapital) {
                if (CFG.game.getActiveProvinceID() >= 0 && getProvince(CFG.game.getActiveProvinceID()).getDrawProvince() && CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID()) && getProvince(CFG.game.getActiveProvinceID()).getCitiesSize() > 0) {
                    getProvince(CFG.game.getActiveProvinceID()).getCity(0).draw(oSB, CFG.game.getActiveProvinceID(), nScale, Images.city3);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Timeline_FogOfWar_OnlyCapitalsImages(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
                if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()) && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince() && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCitiesSize() > 0) {
                    getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCity(0).drawCityImage_Level(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), nScale);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Timeline_OnlyCapitalsImages(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = CFG.timelapseManager.timelineOwners_Capitals.size() - 1; i >= 0; i--) {
                if (CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue() >= 0 && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getDrawProvince() && getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCitiesSize() > 0) {
                    getProvince(CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue()).getCity(0).drawCityImage_Level(oSB, CFG.timelapseManager.timelineOwners_Capitals.get(i).intValue(), nScale);
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_OnlyCapitals_Images(SpriteBatch oSB, float nScale) {
        try {
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital()) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).drawCityImage_Level(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
    }

    public final void drawCities_OnlyCapitals_Images_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getIsCapital() && CFG.getMetProvince(getProvinceInViewID(i))) {
                    int j = 0;
                    while (true) {
                        if (j < getProvince(getProvinceInViewID(i)).getCitiesSize()) {
                            if (getProvince(getProvinceInViewID(i)).getCity(j).getCityLevel() == Images.city) {
                                getProvince(getProvinceInViewID(i)).getCity(j).drawCityImage_Level(oSB, getProvinceInViewID(i), nScale);
                                break;
                            }
                            j++;
                        } else {
                            break;
                        }
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
    }

    public final void drawCities_PortCities(SpriteBatch oSB, float nScale) {
        CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
        oSB.setColor(Color.WHITE);
        for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
            if (getProvince(getProvinceInViewID(i)).getLevelOfPort() >= 0) {
                for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                    getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                }
            }
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_PortCities_L0(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getLevelOfPort() == 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_PortCities_L1(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getLevelOfPort() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_PortCities_L1_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i)) && getProvince(getProvinceInViewID(i)).getLevelOfPort() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Fort(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getLevelOfFort() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_Fort_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i)) && getProvince(getProvinceInViewID(i)).getLevelOfFort() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_WatchTower(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (getProvince(getProvinceInViewID(i)).getLevelOfWatchTower() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawCities_WatchTower_FogOfWarDiscovery(SpriteBatch oSB, float nScale) {
        try {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            for (int i = 0; i < CFG.NUM_OF_PROVINCES_IN_VIEW; i++) {
                if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(getProvinceInViewID(i)) && getProvince(getProvinceInViewID(i)).getLevelOfWatchTower() > 0) {
                    for (int j = 0; j < getProvince(getProvinceInViewID(i)).getCitiesSize(); j++) {
                        getProvince(getProvinceInViewID(i)).getCity(j).draw(oSB, getProvinceInViewID(i), nScale, Color.WHITE);
                    }
                }
            }
        } catch (IllegalArgumentException e) {
        }
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final void drawEditorCity(SpriteBatch oSB, float nScale) {
        if (CFG.editorCity.getPosX() > 0) {
            CFG.fontMain.getData().setScale(CFG.settingsManager.CITIES_FONT_SCALE);
            oSB.setColor(Color.WHITE);
            CFG.editorCity.draw(oSB, CFG.game.getActiveProvinceID(), nScale);
            CFG.fontMain.getData().setScale(1.0f);
        }
    }

    public final void drawProvinces(SpriteBatch oSB, int nPosX, int nPosY, float scale, int nAlpha) {
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (getProvince(i).getCivID() != 0) {
                getProvince(i).draw(oSB, nPosX, nPosY, scale, nAlpha);
            } else if (getProvince(i).getWasteland() >= 0) {
                getProvince(i).drawWasteland(oSB, nPosX, nPosY, scale, nAlpha);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void drawProvinces_FogOfWarDiscovery(SpriteBatch oSB, int nPosX, int nPosY, float scale, int nAlpha) {
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (getProvince(i).getCivID() != 0) {
                getProvince(i).draw_FogOfWarDiscovery(oSB, nPosX, nPosY, scale, nAlpha);
            } else if (getProvince(i).getWasteland() >= 0 && CFG.getMetProvince(i)) {
                getProvince(i).drawWasteland(oSB, nPosX, nPosY, scale, nAlpha);
            }
        }
        oSB.setColor(Color.WHITE);
    }

    public final void updatePath() {
        int i;
        int i2;
        int i3;
        if (this.lMoveUnitsLineTime < System.currentTimeMillis() - 90) {
            this.lMoveUnitsLineTime = System.currentTimeMillis();
            if (MoveUnits_Line_Highlighted.MOVE_SRC_X2 <= 1) {
                i = MoveUnits_Line_Highlighted.MOVE_WIDTH2;
            } else {
                i = MoveUnits_Line_Highlighted.MOVE_SRC_X2 - 1;
                MoveUnits_Line_Highlighted.MOVE_SRC_X2 = i;
            }
            MoveUnits_Line_Highlighted.MOVE_SRC_X2 = i;
            if (MoveUnits_Line.MOVE_SRC_X <= 1) {
                i2 = MoveUnits_Line.MOVE_WIDTH;
            } else {
                i2 = MoveUnits_Line.MOVE_SRC_X - 1;
                MoveUnits_Line.MOVE_SRC_X = i2;
            }
            MoveUnits_Line.MOVE_SRC_X = i2;
            if (MoveUnits_Line_Migrate.MOVE_SRC_X2 <= 1) {
                i3 = MoveUnits_Line_Migrate.MOVE_WIDTH2;
            } else {
                i3 = MoveUnits_Line_Migrate.MOVE_SRC_X2 - 1;
                MoveUnits_Line_Migrate.MOVE_SRC_X2 = i3;
            }
            MoveUnits_Line_Migrate.MOVE_SRC_X2 = i3;
            CFG.setRender_3(true);
        }
    }

    public final void buildMoveUnits_JustDraw_AnotherArmies() {
        clearMoveUnits_JustDraw_AnotherArmies();
        try {
            int tPlayerCivID = CFG.SPECTATOR_MODE ? 0 : CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID();
            int tPlayerAllianceID = (CFG.SPECTATOR_MODE || CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() == 0) ? -1 : CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID();
            for (int i = 1; i < CFG.game.getCivsSize(); i++) {
                if (!(CFG.game.getCiv(i).getNumOfProvinces() <= 0 || i == tPlayerCivID || CFG.game.getCiv(i).getAllianceID() == tPlayerAllianceID || CFG.game.getCiv(i).getPuppetOfCivID() == tPlayerCivID || CFG.game.getCiv(tPlayerCivID).getPuppetOfCivID() == i)) {
                    for (int j = 0; j < CFG.game.getCiv(i).getMoveUnitsSize(); j++) {
                        if (CFG.game.getProvince(CFG.game.getCiv(i).getMoveUnits(j).getFromProvinceID()).getSeaProvince()) {
                            if (CFG.game.getPlayer(CFG.PLAYER_TURNID).getFogOfWar(CFG.game.getCiv(i).getMoveUnits(j).getFromProvinceID()) || CFG.game.getPlayer(CFG.PLAYER_TURNID).getFogOfWar(CFG.game.getCiv(i).getMoveUnits(j).getToProvinceID())) {
                                this.lMoveUnits_JustDraw_AnotherArmies.add(new Move_Units_JustDraw(i, CFG.game.getCiv(i).getMoveUnits(j)));
                            }
                        } else if (!CFG.game.getCivsAtWar(tPlayerCivID, i) && (CFG.game.isAlly(tPlayerCivID, CFG.game.getProvince(CFG.game.getCiv(i).getMoveUnits(j).getFromProvinceID()).getCivID()) || CFG.game.isAlly(tPlayerCivID, CFG.game.getProvince(CFG.game.getCiv(i).getMoveUnits(j).getToProvinceID()).getCivID()))) {
                            this.lMoveUnits_JustDraw_AnotherArmies.add(new Move_Units_JustDraw(i, CFG.game.getCiv(i).getMoveUnits(j)));
                        }
                    }
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
        this.iMoveUnits_JustDraw_AnotherArmiesSize = this.lMoveUnits_JustDraw_AnotherArmies.size();
    }

    public final void clearMoveUnits_JustDraw_AnotherArmies() {
        this.lMoveUnits_JustDraw_AnotherArmies.clear();
        this.iMoveUnits_JustDraw_AnotherArmiesSize = 0;
    }

    public final void drawMoveUnits(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        int i = 0;
        while (i < this.iMoveUnits_JustDraw_AnotherArmiesSize) {
            try {
                oSB.setColor(getCiv(this.lMoveUnits_JustDraw_AnotherArmies.get(i).iCivID).getRGB());
                if (getProvince(this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getFromProvinceID()).getDrawProvince()) {
                    this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.draw2(oSB, nScale);
                    drawMoveUnitsFlag(oSB, this.lMoveUnits_JustDraw_AnotherArmies.get(i).iCivID, this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getToProvinceID(), nScale, this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getMoveUnitsLine().getMovingPercentage());
                } else if (getProvince(this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getToProvinceID()).getDrawProvince()) {
                    updateDrawProvince(this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getFromProvinceID());
                    this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.draw2(oSB, nScale);
                    drawMoveUnitsFlag(oSB, this.lMoveUnits_JustDraw_AnotherArmies.get(i).iCivID, this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getToProvinceID(), nScale, this.lMoveUnits_JustDraw_AnotherArmies.get(i).moveUnitsData.getMoveUnitsLine().getMovingPercentage());
                }
                this.drawMoveUnitsArmy_UpdateAnimation = true;
                i++;
            } catch (IndexOutOfBoundsException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                }
            }
        }
        try {
            this.drawMoveUnitsArmy_UpdateAnimation = false;
            if (getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                for (int i2 = 0; i2 < CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); i2++) {
                    if (CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2) != getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                        oSB.setColor(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getRGB());
                        for (int j = 0; j < getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getRegroupArmySize(); j++) {
                            for (int k = getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getCurrentRegroupArmyLine(j).size() - 1; k >= 0; k--) {
                                if (getProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getCurrentRegroupArmyLine(j).get(k).getFromProvinceID()).getDrawProvince()) {
                                    getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getCurrentRegroupArmyLine(j).get(k).drawLine(oSB, nScale);
                                } else if (getProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getCurrentRegroupArmyLine(j).get(k).getFromProvinceID()).getDrawProvince()) {
                                    updateDrawProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j).getFromProvinceID());
                                    getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getCurrentRegroupArmyLine(j).get(k).drawLine(oSB, nScale);
                                }
                            }
                        }
                        for (int j2 = 0; j2 < getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnitsSize(); j2++) {
                            oSB.setColor(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getRGB());
                            if (getProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getFromProvinceID()).getDrawProvince()) {
                                getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).draw2(oSB, nScale);
                                drawMoveUnitsFlag(oSB, CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2), getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getToProvinceID(), nScale, getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getMoveUnitsLine().getMovingPercentage());
                            } else if (getProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getToProvinceID()).getDrawProvince()) {
                                updateDrawProvince(getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getFromProvinceID());
                                getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).draw2(oSB, nScale);
                                drawMoveUnitsFlag(oSB, CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2), getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getToProvinceID(), nScale, getCiv(CFG.game.getAlliance(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(i2)).getMoveUnits(j2).getMoveUnitsLine().getMovingPercentage());
                            }
                            this.drawMoveUnitsArmy_UpdateAnimation = true;
                        }
                    }
                }
            }
            for (int i3 = CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.size() - 1; i3 >= 0; i3--) {
                oSB.setColor(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getRGB());
                for (int j3 = 0; j3 < getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getRegroupArmySize(); j3++) {
                    for (int k2 = getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getCurrentRegroupArmyLine(j3).size() - 1; k2 >= 0; k2--) {
                        if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getCurrentRegroupArmyLine(j3).get(k2).getFromProvinceID()).getDrawProvince()) {
                            getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getCurrentRegroupArmyLine(j3).get(k2).drawLine(oSB, nScale);
                        } else if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getCurrentRegroupArmyLine(j3).get(k2).getFromProvinceID()).getDrawProvince()) {
                            updateDrawProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j3).getFromProvinceID());
                            getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getCurrentRegroupArmyLine(j3).get(k2).drawLine(oSB, nScale);
                        }
                    }
                }
                for (int j4 = 0; j4 < getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnitsSize(); j4++) {
                    oSB.setColor(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getRGB());
                    if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getFromProvinceID()).getDrawProvince()) {
                        getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).draw2(oSB, nScale);
                        drawMoveUnitsFlag(oSB, CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID, getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getToProvinceID(), nScale, getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getMoveUnitsLine().getMovingPercentage());
                    } else if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getToProvinceID()).getDrawProvince()) {
                        updateDrawProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getFromProvinceID());
                        getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).draw2(oSB, nScale);
                        drawMoveUnitsFlag(oSB, CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID, getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(i3).iCivID).getMoveUnits(j4).getToProvinceID(), nScale, getCiv(i3).getMoveUnits(j4).getMoveUnitsLine().getMovingPercentage());
                    }
                    this.drawMoveUnitsArmy_UpdateAnimation = true;
                }
            }
            if (CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID() != getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                oSB.setColor(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getRGB());
                for (int j22 = 0; j22 < getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getRegroupArmySize(); j22++) {
                    for (int k22 = getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getCurrentRegroupArmyLine(j22).size() - 1; k22 >= 0; k22--) {
                        if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getCurrentRegroupArmyLine(j22).get(k22).getFromProvinceID()).getDrawProvince()) {
                            getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getCurrentRegroupArmyLine(j22).get(k22).drawLine(oSB, nScale);
                        } else if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getCurrentRegroupArmyLine(j22).get(k22).getFromProvinceID()).getDrawProvince()) {
                            updateDrawProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j22).getFromProvinceID());
                            getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getCurrentRegroupArmyLine(j22).get(k22).drawLine(oSB, nScale);
                        }
                    }
                }
                for (int j23 = 0; j23 < getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnitsSize(); j23++) {
                    oSB.setColor(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getRGB());
                    if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getFromProvinceID()).getDrawProvince()) {
                        getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).draw2(oSB, nScale);
                        drawMoveUnitsFlag(oSB, CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getToProvinceID(), nScale, getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getMoveUnitsLine().getMovingPercentage());
                    } else if (getProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getToProvinceID()).getDrawProvince()) {
                        updateDrawProvince(getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getFromProvinceID());
                        getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).draw2(oSB, nScale);
                        drawMoveUnitsFlag(oSB, CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getToProvinceID(), nScale, getCiv(CFG.game.getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(j23).getMoveUnitsLine().getMovingPercentage());
                    }
                    this.drawMoveUnitsArmy_UpdateAnimation = true;
                }
            }
            for (int i4 = 0; i4 < getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrateSize(); i4++) {
                if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i4).getFromProvinceID()).getDrawProvince()) {
                    getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i4).draw(oSB, nScale);
                } else if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i4).getToProvinceID()).getDrawProvince()) {
                    updateDrawProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i4).getFromProvinceID());
                    getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i4).draw(oSB, nScale);
                }
            }
            for (int i5 = 0; i5 < getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsSize(); i5++) {
                if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getFromProvinceID()).getDrawProvince()) {
                    getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).draw(oSB, nScale);
                    drawMoveUnitsFlag(oSB, getPlayer(CFG.PLAYER_TURNID).getCivID(), getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getToProvinceID(), nScale, getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getMoveUnitsLine().getMovingPercentage());
                } else if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getToProvinceID()).getDrawProvince()) {
                    updateDrawProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getFromProvinceID());
                    getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).draw(oSB, nScale);
                    drawMoveUnitsFlag(oSB, getPlayer(CFG.PLAYER_TURNID).getCivID(), getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getToProvinceID(), nScale, getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i5).getMoveUnitsLine().getMovingPercentage());
                }
            }
        } catch (NullPointerException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
        } catch (IndexOutOfBoundsException ex3) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex3);
            }
        }
    }

    public final void drawMoveUnits_Spectactor(SpriteBatch oSB, float nScale) {
        oSB.setColor(Color.WHITE);
        try {
            this.drawMoveUnitsArmy_UpdateAnimation = false;
            for (int i = 1; i < getCivsSize(); i++) {
                if (getCiv(i).getNumOfProvinces() > 0) {
                    oSB.setColor(getCiv(i).getRGB());
                    for (int j = 0; j < getCiv(i).getRegroupArmySize(); j++) {
                        for (int k = getCiv(i).getCurrentRegroupArmyLine(j).size() - 1; k >= 0; k--) {
                            if (getProvince(getCiv(i).getCurrentRegroupArmyLine(j).get(k).getFromProvinceID()).getDrawProvince()) {
                                getCiv(i).getCurrentRegroupArmyLine(j).get(k).drawLine(oSB, nScale);
                            } else if (getProvince(getCiv(i).getCurrentRegroupArmyLine(j).get(k).getFromProvinceID()).getDrawProvince()) {
                                updateDrawProvince(getCiv(i).getMoveUnits(j).getFromProvinceID());
                                getCiv(i).getCurrentRegroupArmyLine(j).get(k).drawLine(oSB, nScale);
                            }
                        }
                    }
                    for (int j2 = 0; j2 < getCiv(i).getMoveUnitsSize(); j2++) {
                        oSB.setColor(getCiv(i).getRGB());
                        if (getProvince(getCiv(i).getMoveUnits(j2).getFromProvinceID()).getDrawProvince()) {
                            getCiv(i).getMoveUnits(j2).draw2(oSB, nScale);
                            drawMoveUnitsFlag(oSB, i, getCiv(i).getMoveUnits(j2).getToProvinceID(), nScale, getCiv(i).getMoveUnits(j2).getMoveUnitsLine().getMovingPercentage());
                        } else if (getProvince(getCiv(i).getMoveUnits(j2).getToProvinceID()).getDrawProvince()) {
                            updateDrawProvince(getCiv(i).getMoveUnits(j2).getFromProvinceID());
                            getCiv(i).getMoveUnits(j2).draw2(oSB, nScale);
                            drawMoveUnitsFlag(oSB, i, getCiv(i).getMoveUnits(j2).getToProvinceID(), nScale, getCiv(i).getMoveUnits(j2).getMoveUnitsLine().getMovingPercentage());
                        }
                        this.drawMoveUnitsArmy_UpdateAnimation = true;
                    }
                }
            }
        } catch (NullPointerException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        } catch (IndexOutOfBoundsException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
        }
    }

    public final void drawMoveUnits_CurrentMove(SpriteBatch oSB, float nScale) {
        int i = 0;
        while (i < getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getRegroupArmySize()) {
            try {
                for (int j = getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getCurrentRegroupArmyLine(i).size() - 1; j >= 0; j--) {
                    if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getCurrentRegroupArmyLine(i).get(j).getFromProvinceID()).getDrawProvince()) {
                        getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getCurrentRegroupArmyLine(i).get(j).drawLine(oSB, nScale);
                    } else if (getProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getCurrentRegroupArmyLine(i).get(j).getFromProvinceID()).getDrawProvince()) {
                        updateDrawProvince(getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i).getFromProvinceID());
                        getCiv(getPlayer(CFG.PLAYER_TURNID).getCivID()).getCurrentRegroupArmyLine(i).get(j).drawLine(oSB, nScale);
                    }
                }
                i++;
            } catch (NullPointerException ex) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex);
                    return;
                }
                return;
            } catch (IndexOutOfBoundsException ex2) {
                if (CFG.LOGS) {
                    CFG.exceptionStack(ex2);
                    return;
                }
                return;
            }
        }
        for (int i2 = this.lHighlightedProvinces_MoveUnits_Lines.size() - 1; i2 >= 0; i2--) {
            if (getProvince(this.lHighlightedProvinces_MoveUnits_Lines.get(i2).getFromProvinceID()).getDrawProvince()) {
                if (CFG.chosenProvinceID != this.lHighlightedProvinces_MoveUnits_Lines.get(i2).getToProvinceID()) {
                    this.lHighlightedProvinces_MoveUnits_Lines.get(i2).drawLine(oSB, nScale);
                }
            } else if (getProvince(this.lHighlightedProvinces_MoveUnits_Lines.get(i2).getToProvinceID()).getDrawProvince() && CFG.chosenProvinceID != this.lHighlightedProvinces_MoveUnits_Lines.get(i2).getToProvinceID()) {
                updateDrawProvince(this.lHighlightedProvinces_MoveUnits_Lines.get(i2).getFromProvinceID());
                this.lHighlightedProvinces_MoveUnits_Lines.get(i2).drawLine(oSB, nScale);
            }
        }
        for (int i3 = this.lCurrentRegroupArmyLine.size() - 1; i3 >= 0; i3--) {
            if (getProvince(this.lCurrentRegroupArmyLine.get(i3).getFromProvinceID()).getDrawProvince()) {
                this.lCurrentRegroupArmyLine.get(i3).drawLine(oSB, nScale);
            } else if (getProvince(this.lCurrentRegroupArmyLine.get(i3).getToProvinceID()).getDrawProvince()) {
                updateDrawProvince(this.lCurrentRegroupArmyLine.get(i3).getFromProvinceID());
                this.lCurrentRegroupArmyLine.get(i3).drawLine(oSB, nScale);
            }
        }
        if (this.currentMoveUnitsLine == null) {
            return;
        }
        if (getProvince(this.currentMoveUnitsLine.getFromProvinceID()).getDrawProvince()) {
            this.currentMoveUnitsLine.drawLine(oSB, nScale);
        } else if (getProvince(this.currentMoveUnitsLine.getToProvinceID()).getDrawProvince()) {
            updateDrawProvince(this.currentMoveUnitsLine.getFromProvinceID());
            this.currentMoveUnitsLine.drawLine(oSB, nScale);
        }
    }

    public final void drawMoveUnitsFlag(SpriteBatch oSB, int nCivID, int nProvinceID, float nScale, float nAlpha) {
        oSB.setColor(1.0f, 1.0f, 1.0f, nAlpha);
        if (CFG.game.getProvince(nProvinceID).getSeaProvince()) {
            ImageManager.getImage(Images.icon_move_sea).draw(oSB, (int) (((float) (CFG.game.getProvince(nProvinceID).getCenterX() + CFG.game.getProvince(nProvinceID).getShiftX() + CFG.game.getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((((CFG.game.getProvince(nProvinceID).getCenterY() + CFG.game.getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY()) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) * nScale)) - ImageManager.getImage(Images.icon_move_sea).getHeight()) - CFG.ARMY_BG_EXTRA_HEIGHT);
        } else if (CFG.game.isAlly(nCivID, CFG.game.getProvince(nProvinceID).getCivID())) {
            ImageManager.getImage(Images.icon_move_ally).draw(oSB, (int) (((float) (CFG.game.getProvince(nProvinceID).getCenterX() + CFG.game.getProvince(nProvinceID).getShiftX() + CFG.game.getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((((CFG.game.getProvince(nProvinceID).getCenterY() + CFG.game.getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY()) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) * nScale)) - ImageManager.getImage(Images.icon_move_ally).getHeight()) - CFG.ARMY_BG_EXTRA_HEIGHT);
        } else {
            ImageManager.getImage(Images.icon_move_attack).draw(oSB, (int) (((float) (CFG.game.getProvince(nProvinceID).getCenterX() + CFG.game.getProvince(nProvinceID).getShiftX() + CFG.game.getProvince(nProvinceID).getTranslateProvincePosX())) * nScale), (((int) (((float) ((((CFG.game.getProvince(nProvinceID).getCenterY() + CFG.game.getProvince(nProvinceID).getShiftY()) + CFG.map.getMapCoordinates().getPosY()) - (CFG.ARMY_HEIGHT / 2)) - CFG.ARMY_BG_EXTRA_HEIGHT)) * nScale)) - ImageManager.getImage(Images.icon_move_attack).getHeight()) - CFG.ARMY_BG_EXTRA_HEIGHT);
        }
    }

    public final void updateDrawMoveUnitsArmy() {
        DrawMoveUnitsArmy r0;
        if (CFG.gameAction.getActiveTurnState() == Game_Action.TurnStates.TURN_ACTIONS) {
            r0 = new DrawMoveUnitsArmy() {
                public void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
                    if (CFG.gameAction.getCurrentMoveunits() != null) {
                        for (int i = 0; i < CFG.gameAction.getCurrentMoveunits().getMoveUnitsSize(); i++) {
                            if (Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getDrawProvince()) {
                                if (CFG.game.getCivsAtWar(CFG.gameAction.getCurrentMoveunits().getCivID(i), Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getCivID())) {
                                    Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getShiftY()))) * CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.gameAction.getCurrentMoveunits().getCivID(i), CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getNumOfUnits(), CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getUnitsWidth());
                                } else {
                                    Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getToProvinceID()).getShiftY()))) * CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.gameAction.getCurrentMoveunits().getCivID(i), CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getNumOfUnits(), CFG.gameAction.getCurrentMoveunits().getMoveUnits(i).getUnitsWidth());
                                }
                            }
                        }
                    }
                }
            };
        } else {
            r0 = CFG.settingsManager.DRAW_MOVE_UNITS_ARMY_IN_EVERYSINGLE_PROVINCE ? CFG.SPECTATOR_MODE ? new DrawMoveUnitsArmy() {
                public void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
                    for (int j = 1; j < Game.this.getCivsSize(); j++) {
                        if (Game.this.getCiv(j).getNumOfProvinces() > 0) {
                            for (int i = 0; i < Game.this.getCiv(j).getMoveUnitsSize(); i++) {
                                if (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getDrawProvince()) {
                                    if (CFG.game.getCivsAtWar(j, Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCivID())) {
                                        Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), j, Game.this.getCiv(j).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(j).getMoveUnits(i).getUnitsWidth());
                                    } else {
                                        Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), j, Game.this.getCiv(j).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(j).getMoveUnits(i).getUnitsWidth());
                                    }
                                }
                            }
                        }
                    }
                }
            } : new DrawMoveUnitsArmy() {
                public void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
                    int tempHeigth;
                    int i2 = 0;
                    while (i2 < Game.this.iMoveUnits_JustDraw_AnotherArmiesSize) {
                        try {
                            if (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getDrawProvince()) {
                                if (CFG.game.getCivsAtWar(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).iCivID, Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getCivID())) {
                                    Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (((int) ((Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getMoveUnitsLine().getMovingPercentage() * ((float) (((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getTranslateProvincePosX()) - (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getTranslateProvincePosX() + (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftX()))))) / 2.0f)) + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getTranslateProvincePosX())) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftY()) - ((int) ((Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getMoveUnitsLine().getMovingPercentage() * ((float) ((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getShiftY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getCenterY())))) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).iCivID, Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getNumOfUnits(), Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getUnitsWidth());
                                } else {
                                    Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (((int) ((Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getMoveUnitsLine().getMovingPercentage() * ((float) (((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getTranslateProvincePosX()) - (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getTranslateProvincePosX() + (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftX()))))) / 2.0f)) + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getTranslateProvincePosX())) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftY()) - ((int) ((Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getMoveUnitsLine().getMovingPercentage() * ((float) ((Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getShiftY() + Game.this.getProvince(Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getToProvinceID()).getCenterY())))) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).iCivID, Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getNumOfUnits(), Game.this.lMoveUnits_JustDraw_AnotherArmies.get(i2).moveUnitsData.getUnitsWidth());
                                }
                            }
                            i2++;
                        } catch (IndexOutOfBoundsException ex) {
                            if (CFG.LOGS) {
                                CFG.exceptionStack(ex);
                            }
                        }
                    }
                    if (Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                        for (int j = 0; j < Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); j++) {
                            if (Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j) != Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                                for (int i = 0; i < Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnitsSize(); i++) {
                                    if (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getDrawProvince()) {
                                        if (CFG.game.getCivsAtWar(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j), Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getCivID())) {
                                            Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getUnitsWidth());
                                        } else {
                                            Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i).getUnitsWidth());
                                        }
                                    }
                                }
                            }
                        }
                    }
                    for (int u = CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.size() - 1; u >= 0; u--) {
                        for (int i3 = 0; i3 < Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnitsSize(); i3++) {
                            if (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getDrawProvince()) {
                                if (CFG.game.getCivsAtWar(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID, Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getCivID())) {
                                    Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage() * ((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getTranslateProvincePosX()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX() + (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftX()))))) / 2.0f)) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX())) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - ((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage() * ((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getShiftY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getCenterY())))) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID, Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getUnitsWidth());
                                } else {
                                    Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage() * ((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getTranslateProvincePosX()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX() + (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftX()))))) / 2.0f)) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX())) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - ((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage() * ((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getShiftY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getToProvinceID()).getCenterY())))) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID, Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i3).getUnitsWidth());
                                }
                            }
                        }
                    }
                    if (CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID() != Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                        for (int i22 = 0; i22 < Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnitsSize(); i22++) {
                            if (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getDrawProvince()) {
                                if (CFG.game.getCivsAtWar(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getCivID())) {
                                    Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getShiftY()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getUnitsWidth());
                                } else {
                                    Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getToProvinceID()).getShiftY()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i22).getUnitsWidth());
                                }
                            }
                        }
                    }
                    for (int i23 = 0; i23 < Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrateSize(); i23++) {
                        if (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getDrawProvince()) {
                            Game.this.drawProvinceArmyWithFlag_Migrate(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getNumOfUnits(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMigrate(i23).getUnitsWidth());
                        }
                    }
                    for (int i24 = 0; i24 < Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsSize(); i24++) {
                        if (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getDrawProvince()) {
                            if (CFG.game.getCivsAtWar(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getCivID())) {
                                Game.this.drawProvinceArmyWithFlag_Attack(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getNumOfUnits(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getUnitsWidth());
                            } else {
                                Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getNumOfUnits(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i24).getUnitsWidth());
                            }
                        }
                    }
                    try {
                        if (CFG.menuManager.getInGame_Plunder().getVisible()) {
                            for (int i25 = 0; i25 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsPlunderSize(); i25++) {
                                if (Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID() != Menu_InGame_Plunder.iProvinceID && Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Plunder(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID()).getTranslateProvincePosX())) * nScale), CFG.ARMY_BG_EXTRA_HEIGHT + Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getFromProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getNumOfUnits(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i25).getUnitsWidth());
                                }
                            }
                            if (Menu_InGame_Plunder.iProvinceID >= 0) {
                                int tempCurrArmy = CFG.menuManager.getInGame_Plunder().getMenuElement(1).getCurrent();
                                CFG.glyphLayout.setText(CFG.fontArmy, "" + tempCurrArmy);
                                Game.this.drawProvinceArmyWithFlag_Plunder(oSB, (int) (((float) (Game.this.getProvince(Menu_InGame_Plunder.iProvinceID).getCenterX() + Game.this.getProvince(Menu_InGame_Plunder.iProvinceID).getShiftX() + Game.this.getProvince(Menu_InGame_Plunder.iProvinceID).getTranslateProvincePosX())) * nScale), CFG.ARMY_BG_EXTRA_HEIGHT + Game.this.getDrawProvinceArmy_EndPosY(Menu_InGame_Plunder.iProvinceID, nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), tempCurrArmy, (int) CFG.glyphLayout.width);
                            }
                        } else {
                            for (int i26 = 0; i26 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsPlunderSize(); i26++) {
                                if (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getFromProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Plunder(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getFromProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getFromProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getNumOfUnits(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Plunder(i26).getUnitsWidth());
                                }
                            }
                        }
                        if (Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                            for (int j2 = 0; j2 < Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); j2++) {
                                if (Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID() != Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)) {
                                    for (int i4 = 0; i4 < Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnitsPlunderSize(); i4++) {
                                        if (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getFromProvinceID()).getDrawProvince()) {
                                            Game.this.drawProvinceArmyWithFlag_Plunder(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getFromProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getFromProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getNumOfUnits(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j2)).getMoveUnits_Plunder(i4).getUnitsWidth());
                                        }
                                    }
                                }
                            }
                        }
                    } catch (IndexOutOfBoundsException e) {
                    }
                    try {
                        if (CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsPlunderSize() > 0) {
                            tempHeigth = CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 4);
                        } else {
                            tempHeigth = 0;
                        }
                        if (CFG.menuManager.getInGame_Genocide().getVisible()) {
                            for (int i27 = 0; i27 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsGenocideSize(); i27++) {
                                if (Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID() != Menu_InGame_Genocide.iProvinceID && Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Genocide(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getFromProvinceID(), nScale) + tempHeigth + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getNumOfUnits(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i27).getUnitsWidth());
                                }
                            }
                            if (Menu_InGame_Genocide.iProvinceID >= 0) {
                                int tempCurrArmy2 = CFG.menuManager.getInGame_Genocide().getMenuElement(CFG.menuManager.getInGame_Genocide().getMenuElementsSize() - 3).getCurrent();
                                CFG.glyphLayout.setText(CFG.fontArmy, "" + tempCurrArmy2);
                                Game.this.drawProvinceArmyWithFlag_Genocide(oSB, (int) (((float) (Game.this.getProvince(Menu_InGame_Genocide.iProvinceID).getCenterX() + Game.this.getProvince(Menu_InGame_Genocide.iProvinceID).getShiftX() + Game.this.getProvince(Menu_InGame_Genocide.iProvinceID).getTranslateProvincePosX())) * nScale), CFG.ARMY_BG_EXTRA_HEIGHT + Game.this.getDrawProvinceArmy_EndPosY(Menu_InGame_Genocide.iProvinceID, nScale) + tempHeigth + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), tempCurrArmy2, (int) CFG.glyphLayout.width);
                            }
                        } else {
                            for (int i28 = 0; i28 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsGenocideSize(); i28++) {
                                if (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getFromProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Genocide(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getFromProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getFromProvinceID(), nScale) + tempHeigth + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getNumOfUnits(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits_Genocide(i28).getUnitsWidth());
                                }
                            }
                        }
                        if (Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                            for (int j3 = 0; j3 < Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); j3++) {
                                if (Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID() != Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)) {
                                    for (int i5 = 0; i5 < Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnitsGenocideSize(); i5++) {
                                        if (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getFromProvinceID()).getDrawProvince()) {
                                            Game.this.drawProvinceArmyWithFlag_Genocide(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getFromProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getFromProvinceID(), nScale) + tempHeigth + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getNumOfUnits(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j3)).getMoveUnits_Genocide(i5).getUnitsWidth());
                                        }
                                    }
                                }
                            }
                        }
                    } catch (IndexOutOfBoundsException e2) {
                    }
                    try {
                        if (CFG.menuManager.getInGame_ProvinceRecruit().getVisible() || CFG.menuManager.getInGame_ProvinceRecruit_Instantly().getVisible()) {
                            for (int i32 = 0; i32 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmySize(); i32++) {
                                if (Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID() != Game.this.getActiveProvinceID() && Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Recruit(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getArmy(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i32).getArmyWidth());
                                }
                            }
                            if (Game.this.getProvince(Game.this.getActiveProvinceID()).getDrawProvince()) {
                                if (CFG.menuManager.getInGame_ProvinceRecruit().getVisible()) {
                                    int tempCurrArmy3 = CFG.menuManager.getInGame_ProvinceRecruit().getMenuElement(2).getCurrent();
                                    CFG.glyphLayout.setText(CFG.fontArmy, "" + tempCurrArmy3);
                                    Game.this.drawProvinceArmyWithFlag_Recruit(oSB, (int) (((float) (Game.this.getProvince(Game.this.getActiveProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getActiveProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getActiveProvinceID()).getTranslateProvincePosX())) * nScale), CFG.ARMY_BG_EXTRA_HEIGHT + Game.this.getDrawProvinceArmy_EndPosY(Game.this.getActiveProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), tempCurrArmy3, (int) CFG.glyphLayout.width);
                                } else if (CFG.menuManager.getInGame_ProvinceRecruit_Instantly().getVisible()) {
                                    int tempCurrArmy4 = CFG.menuManager.getInGame_ProvinceRecruit_Instantly().getMenuElement(2).getCurrent();
                                    CFG.glyphLayout.setText(CFG.fontArmy, "" + tempCurrArmy4);
                                    Game.this.drawProvinceArmyWithFlag_Recruit(oSB, (int) (((float) (Game.this.getProvince(Game.this.getActiveProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getActiveProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getActiveProvinceID()).getTranslateProvincePosX())) * nScale), CFG.ARMY_BG_EXTRA_HEIGHT + Game.this.getDrawProvinceArmy_EndPosY(Game.this.getActiveProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), tempCurrArmy4, (int) CFG.glyphLayout.width);
                                }
                            }
                        } else {
                            for (int i33 = 0; i33 < Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmySize(); i33++) {
                                if (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag_Recruit(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getArmy(), Game.this.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getRecruitArmy(i33).getArmyWidth());
                                }
                            }
                        }
                        if (Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                            for (int j32 = 0; j32 < Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); j32++) {
                                if (Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID() != Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)) {
                                    for (int i6 = 0; i6 < Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmySize(); i6++) {
                                        if (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getProvinceID()).getDrawProvince()) {
                                            Game.this.drawProvinceArmyWithFlag_Recruit(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getProvinceID()).getTranslateProvincePosX())) * nScale), Game.this.getDrawProvinceArmy_EndPosY(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getProvinceID(), nScale) + ((CFG.ARMY_HEIGHT + (CFG.ARMY_BG_EXTRA_HEIGHT * 2)) / 2) + CFG.ARMY_BG_EXTRA_HEIGHT, Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getArmy(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j32)).getRecruitArmy(i6).getArmyWidth());
                                        }
                                    }
                                }
                            }
                        }
                    } catch (IndexOutOfBoundsException e3) {
                    }
                }
            } : CFG.SPECTATOR_MODE ? new DrawMoveUnitsArmy() {
                public void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
                    for (int j = 1; j < Game.this.getCivsSize(); j++) {
                        if (Game.this.getCiv(j).getNumOfProvinces() > 0) {
                            for (int i = 0; i < Game.this.getCiv(j).getMoveUnitsSize(); i++) {
                                if (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getDrawProvince()) {
                                    Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(j).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(j).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), j, Game.this.getCiv(j).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(j).getMoveUnits(i).getUnitsWidth());
                                }
                            }
                        }
                    }
                }
            } : new DrawMoveUnitsArmy() {
                public void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
                    if (Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0) {
                        for (int j = 0; j < Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilizationsSize(); j++) {
                            if (Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j) != Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                                for (int i2 = 0; i2 < Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnitsSize(); i2++) {
                                    if ((Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID() == Game.this.getActiveProvinceID() || Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID() == Game.this.getActiveProvinceID() || Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID() == CFG.chosenProvinceID || Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID() == CFG.chosenProvinceID) && (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getDrawProvince())) {
                                        Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getNumOfUnits(), Game.this.getCiv(Game.this.getAlliance(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID()).getCivilization(j)).getMoveUnits(i2).getUnitsWidth());
                                    }
                                }
                            }
                        }
                    }
                    for (int u = CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.size() - 1; u >= 0; u--) {
                        for (int i22 = 0; i22 < Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnitsSize(); i22++) {
                            if (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getDrawProvince()) {
                                Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage() * ((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getTranslateProvincePosX()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX() + (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getShiftX()))))) / 2.0f)) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getTranslateProvincePosX())) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - ((int) ((Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getMoveUnitsLine().getMovingPercentage() * ((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getShiftY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getToProvinceID()).getCenterY())))) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID, Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).civGameData.lVassals.get(u).iCivID).getMoveUnits(i22).getUnitsWidth());
                            }
                        }
                    }
                    if (CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID() != Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                        for (int i = 0; i < Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnitsSize(); i++) {
                            if (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getDrawProvince()) {
                                Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getToProvinceID()).getShiftY()))) * Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getNumOfUnits(), Game.this.getCiv(CFG.game.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID()).getMoveUnits(i).getUnitsWidth());
                            }
                        }
                    }
                    for (int i3 = 0; i3 < Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsSize(); i3++) {
                        if ((Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID() == Game.this.getActiveProvinceID() || Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID() == Game.this.getActiveProvinceID() || Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID() == CFG.chosenProvinceID || Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID() == CFG.chosenProvinceID) && (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getDrawProvince() || Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getDrawProvince())) {
                            Game.this.drawProvinceArmyWithFlag(oSB, (int) (((float) (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getShiftX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX() + ((int) ((((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getTranslateProvincePosX()) - ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getCenterX() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getShiftX()) + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getTranslateProvincePosX()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage()) / 2.0f)))) * nScale), (int) (((float) (((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - ((int) ((((float) ((Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getFromProvinceID()).getShiftY()) - (Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getCenterY() + Game.this.getProvince(Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getToProvinceID()).getShiftY()))) * Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getMoveUnitsLine().getMovingPercentage()) / 2.0f))) + CFG.map.getMapCoordinates().getPosY())) * nScale), Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getNumOfUnits(), Game.this.getCiv(Game.this.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i3).getUnitsWidth());
                        }
                    }
                }
            };
        }
        this.drawMoveUnitsArmy = r0;
    }

    public final void drawMoveUnitsArmy(SpriteBatch oSB, float nScale) {
        try {
            this.drawMoveUnitsArmy.drawMoveUnitsArmy(oSB, nScale);
        } catch (NullPointerException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            updateDrawMoveUnitsArmy();
        }
    }

    public final void addHighlightedProvince_MoveUnits_Line(int fromProvinceID, int toProvinceID) {
        this.lHighlightedProvinces_MoveUnits_Lines.add(new MoveUnits_Line_Highlighted(fromProvinceID, toProvinceID));
    }

    public final void addHighlightedProvince_MoveUnits_Line_Migrate(int fromProvinceID, int toProvinceID) {
        this.lHighlightedProvinces_MoveUnits_Lines.add(new MoveUnits_Line_MigrateHighlighted(fromProvinceID, toProvinceID));
    }

    public final boolean inViewY(int nProvinceID) {
        return ((float) (-CFG.map.getMapCoordinates().getPosY())) + (((float) CFG.GAME_HEIGHT) / CFG.map.getMapScale().getCurrentScale()) >= ((float) getProvince(nProvinceID).getMinY()) && (-CFG.map.getMapCoordinates().getPosY()) <= getProvince(nProvinceID).getMaxY();
    }

    public final boolean inViewX(int nProvinceID) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) (getProvince(nProvinceID).getMinX() + CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX())) && (-CFG.map.getMapCoordinates().getPosX()) <= getProvince(nProvinceID).getMaxX() + CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX();
    }

    public final boolean inViewX2(int nProvinceID) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) getProvince(nProvinceID).getMinX()) && (-CFG.map.getMapCoordinates().getPosX()) <= getProvince(nProvinceID).getMaxX();
    }

    public final boolean inViewXBelowZero(int nProvinceID) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) (getProvince(nProvinceID).getMinX() + CFG.map.getMapBG().getWidth())) && (-CFG.map.getMapCoordinates().getPosX()) <= getProvince(nProvinceID).getMaxX() + CFG.map.getMapBG().getWidth();
    }

    public final boolean inViewY(int nMinY, int nMaxY) {
        return ((float) (-CFG.map.getMapCoordinates().getPosY())) + (((float) CFG.GAME_HEIGHT) / CFG.map.getMapScale().getCurrentScale()) >= ((float) nMinY) && (-CFG.map.getMapCoordinates().getPosY()) <= nMaxY;
    }

    public final boolean inViewX(int nMinX, int nMaxX) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) (CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + nMinX)) && (-CFG.map.getMapCoordinates().getPosX()) <= CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + nMaxX;
    }

    public final boolean inViewX2(int nMinX, int nMaxX) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) nMinX) && (-CFG.map.getMapCoordinates().getPosX()) <= nMaxX;
    }

    public final boolean inViewXBelowZero(int nMinX, int nMaxX) {
        return ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale()) >= ((float) (CFG.map.getMapBG().getWidth() + nMinX)) && (-CFG.map.getMapCoordinates().getPosX()) <= CFG.map.getMapBG().getWidth() + nMaxX;
    }

    public final boolean inViewY_WholeRegion(int nMinY, int nMaxY) {
        return nMinY >= (-CFG.map.getMapCoordinates().getPosY()) && ((float) nMaxY) <= ((float) (-CFG.map.getMapCoordinates().getPosY())) + (((float) CFG.GAME_HEIGHT) / CFG.map.getMapScale().getCurrentScale());
    }

    public final boolean inViewX_WholeRegion(int nMinX, int nMaxX) {
        return CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + nMinX >= (-CFG.map.getMapCoordinates().getPosX()) && ((float) (CFG.map.getMapCoordinates().getSecondSideOfMap_MoveX() + nMaxX)) <= ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale());
    }

    public final boolean inViewX_WholeRegion2(int nMinX, int nMaxX) {
        return nMinX >= (-CFG.map.getMapCoordinates().getPosX()) && ((float) nMaxX) <= ((float) (-CFG.map.getMapCoordinates().getPosX())) + (((float) CFG.GAME_WIDTH) / CFG.map.getMapScale().getCurrentScale());
    }

    public final void actionMoveUnits() {
    }

    public final int getActiveCivID() {
        if (getActiveProvinceID() >= 0) {
            return getPlayer(CFG.PLAYER_TURNID).getCivID();
        }
        return 0;
    }

    public final void setProvinceID_PPM(int nPosX, int nPosY) {
        int nNewChosenProvinceID = setProvinceID_HoverAProvince((int) (((float) nPosX) / CFG.map.getMapScale().getCurrentScale()), (int) (((float) nPosY) / CFG.map.getMapScale().getCurrentScale()));
        if (!DiplomacyManager.canMoveToNaighbooringProvince(nNewChosenProvinceID, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
            resetRegroupArmyData();
            if (!CFG.menuManager.getVisible_InGame_ProvinceAction()) {
                CFG.game.checkProvinceActionMenu();
                return;
            }
            return;
        }
        if (nNewChosenProvinceID >= 0 && CFG.game.getActiveProvinceID() != nNewChosenProvinceID) {
            if (CFG.chosenProvinceID == nNewChosenProvinceID) {
                CFG.menuManager.getInGame_ProvinceRegroupArmy_ConfirmMove();
                CFG.soundsManager.playSound(SoundsManager.SOUND_MOVE_REGROUP);
                return;
            }
            if (CFG.chooseProvinceMode || !CFG.regroupArmyMode) {
                resetChooseProvinceData();
            }
            CFG.regroupArmyMode = true;
            setCurrentRegroupArmyID(nNewChosenProvinceID);
            this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
            CFG.soundsManager.playSound(SoundsManager.SOUND_CLICK, SoundsManager.PERC_VOLUME_SELECT_PROVINCE);
        }
        try {
            if (this.currentRegroupArmy.getRouteSize() == 0) {
                resetRegroupArmyData();
                if (!CFG.menuManager.getVisible_InGame_ProvinceAction()) {
                    CFG.game.checkProvinceActionMenu();
                }
            } else if (!CFG.menuManager.getVisible_InGame_ProvinceRegroupArmy()) {
                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                CFG.menuManager.setVisible_InGame_ProvinceRegroupArmy(true);
            }
        } catch (NullPointerException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void setProvinceID(int nPosX, int nPosY) {
        if (CFG.chooseProvinceMode) {
            int i = 0;
            while (i < this.iHighlightedProvincesSize) {
                if (!pathContains(this.lHighlightedProvinces.get(i).intValue(), (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                    i++;
                } else {
                    setChosenProvinceID(this.lHighlightedProvinces.get(i).intValue());
                    return;
                }
            }
            if (Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))) + (((float) (CFG.map.getMapBG().getMapScale() * 500)) / CFG.map.getMapScale().getCurrentScale()) > ((float) CFG.map.getMapBG().getWidth())) {
                int i2 = 0;
                while (i2 < this.iHighlightedProvincesSize) {
                    if (!getProvince(this.lHighlightedProvinces.get(i2).intValue()).getBelowZero() || !pathContains(this.lHighlightedProvinces.get(i2).intValue(), ((int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)))) - CFG.map.getMapBG().getWidth(), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                        i2++;
                    } else {
                        setChosenProvinceID(this.lHighlightedProvinces.get(i2).intValue());
                        return;
                    }
                }
            }
            if (getProvince(getActiveProvinceID()).getLevelOfPort() > 0) {
                int i3 = 0;
                while (i3 < getProvince(getActiveProvinceID()).getNeighboringSeaProvincesSize()) {
                    if (!getProvince(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i3)).getBelowZero() || !pathContains(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i3), (int) (Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))) - ((float) CFG.map.getMapBG().getWidth())), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                        i3++;
                    } else {
                        setChosenProvinceID(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i3));
                        return;
                    }
                }
            }
            if (pathContains(getActiveProvinceID(), (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                if (CFG.chosenProvinceID < 0) {
                    setActiveProvinceID(getActiveProvinceID());
                    resetChooseProvinceData();
                    if (!CFG.chooseProvinceMode) {
                        setProvinceID(nPosX, nPosY);
                    }
                    checkProvinceActionMenu();
                }
            } else if (CFG.chosenProvinceID < 0) {
                setActiveProvinceID(getActiveProvinceID());
                resetChooseProvinceData();
                if (!CFG.chooseProvinceMode) {
                    setProvinceID(nPosX, nPosY);
                }
                checkProvinceActionMenu();
            }
        } else if (CFG.regroupArmyMode) {
            int nNewChosenProvinceID = setProvinceID_HoverAProvince(nPosX, nPosY);
            if (nNewChosenProvinceID >= 0) {
                setCurrentRegroupArmyID(nNewChosenProvinceID);
                this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
            }
        } else {
            int i4 = 0;
            while (i4 < this.iProvincesSize) {
                int tPosX = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
                if (getProvince(i4).getMinX() > tPosX || getProvince(i4).getMaxX() < tPosX || getProvince(i4).getMinY() > (-CFG.map.getMapCoordinates().getPosY()) + nPosY || getProvince(i4).getMaxY() < (-CFG.map.getMapCoordinates().getPosY()) + nPosY || !pathContains(i4, tPosX, (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                    i4++;
                } else if (i4 != this.iActiveProvince) {
                    resetLastActiveProvince();
                    setActiveProvinceID(i4);
                    return;
                } else {
                    return;
                }
            }
            if (Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))) + (((float) ((-MAX_BELOW_ZERO_POINT_X) * CFG.map.getMapBG().getMapScale())) / CFG.map.getMapScale().getCurrentScale()) > ((float) CFG.map.getMapBG().getWidth())) {
                for (int i5 = 0; i5 < this.iProvincesSize; i5++) {
                    if (getProvince(i5).getBelowZero()) {
                        int tPosX2 = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
                        if (getProvince(i5).getMinX() <= tPosX2 - CFG.map.getMapBG().getWidth() && getProvince(i5).getMaxX() >= tPosX2 - CFG.map.getMapBG().getWidth() && getProvince(i5).getMinY() <= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && getProvince(i5).getMaxY() >= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && pathContains(i5, tPosX2 - CFG.map.getMapBG().getWidth(), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                            if (i5 != this.iActiveProvince) {
                                resetLastActiveProvince();
                                setActiveProvinceID(i5);
                                return;
                            }
                            return;
                        }
                    }
                }
            }
            resetActiveProvincesINFO();
        }
    }

    public final int setProvinceID_HoverAProvince(int nPosX, int nPosY) {
        for (int i = 0; i < this.iProvincesSize; i++) {
            int tPosX = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
            if (getProvince(i).getMinX() <= tPosX && getProvince(i).getMaxX() >= tPosX && getProvince(i).getMinY() <= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && getProvince(i).getMaxY() >= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && pathContains(i, tPosX, (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                return i;
            }
        }
        if (Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))) + (((float) ((-MAX_BELOW_ZERO_POINT_X) * CFG.map.getMapBG().getMapScale())) / CFG.map.getMapScale().getCurrentScale()) > ((float) CFG.map.getMapBG().getWidth())) {
            for (int i2 = 0; i2 < this.iProvincesSize; i2++) {
                if (getProvince(i2).getBelowZero()) {
                    int tPosX2 = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
                    if (getProvince(i2).getMinX() <= tPosX2 - CFG.map.getMapBG().getWidth() && getProvince(i2).getMaxX() >= tPosX2 - CFG.map.getMapBG().getWidth() && getProvince(i2).getMinY() <= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && getProvince(i2).getMaxY() >= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && pathContains(i2, tPosX2 - CFG.map.getMapBG().getWidth(), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                        return i2;
                    }
                }
            }
        }
        return -1;
    }

    public final boolean setProvinceID_IsMouseOverAProvinceID(int nPosX, int nPosY, int nProvinceID) {
        int tPosX = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
        if (getProvince(nProvinceID).getMinX() <= tPosX && getProvince(nProvinceID).getMaxX() >= tPosX && getProvince(nProvinceID).getMinY() <= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && getProvince(nProvinceID).getMaxY() >= (-CFG.map.getMapCoordinates().getPosY()) + nPosY && pathContains(nProvinceID, tPosX, (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
            return true;
        }
        if (Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX))) + (((float) ((-MAX_BELOW_ZERO_POINT_X) * CFG.map.getMapBG().getMapScale())) / CFG.map.getMapScale().getCurrentScale()) > ((float) CFG.map.getMapBG().getWidth()) && getProvince(nProvinceID).getBelowZero()) {
            int tPosX2 = (int) Math.abs(checkPosOfClickX((float) (CFG.map.getMapCoordinates().getPosX() - nPosX)));
            if (getProvince(nProvinceID).getMinX() > tPosX2 - CFG.map.getMapBG().getWidth() || getProvince(nProvinceID).getMaxX() < tPosX2 - CFG.map.getMapBG().getWidth() || getProvince(nProvinceID).getMinY() > (-CFG.map.getMapCoordinates().getPosY()) + nPosY || getProvince(nProvinceID).getMaxY() < (-CFG.map.getMapCoordinates().getPosY()) + nPosY || !pathContains(nProvinceID, tPosX2 - CFG.map.getMapBG().getWidth(), (-CFG.map.getMapCoordinates().getPosY()) + nPosY)) {
                return false;
            }
            return true;
        }
        return false;
    }

    public final int setProvinceID_Point(int nPosX, int nPosY) {
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (getProvince(i).getMinX() <= nPosX && getProvince(i).getMaxX() >= nPosX && getProvince(i).getMinY() <= nPosY && getProvince(i).getMaxY() >= nPosY && pathContains(i, nPosX, nPosY)) {
                return i;
            }
        }
        if (Math.abs(checkPosOfClickX((float) nPosX)) + (((float) ((-MAX_BELOW_ZERO_POINT_X) * CFG.map.getMapBG().getMapScale())) / CFG.map.getMapScale().getCurrentScale()) > ((float) CFG.map.getMapBG().getWidth())) {
            for (int i2 = 0; i2 < this.iProvincesSize; i2++) {
                if (getProvince(i2).getBelowZero()) {
                    int tPosX = (int) Math.abs(checkPosOfClickX((float) nPosX));
                    if (getProvince(i2).getMinX() <= tPosX - CFG.map.getMapBG().getWidth() && getProvince(i2).getMaxX() >= tPosX - CFG.map.getMapBG().getWidth() && getProvince(i2).getMinY() <= nPosY && getProvince(i2).getMaxY() >= nPosY && pathContains(i2, tPosX - CFG.map.getMapBG().getWidth(), nPosY)) {
                        return i2;
                    }
                }
            }
        }
        return -1;
    }

    public final boolean pathContains(int nProvinceID, int nPosX, int nPosY) {
        boolean z;
        boolean output = false;
        int iSize = getProvince(nProvinceID).getPointsSize();
        int j = iSize - 1;
        for (int i = 0; i < iSize; i++) {
            if (getProvince(nProvinceID).getPointsY(i) > nPosY) {
                z = true;
            } else {
                z = false;
            }
            if (z != (getProvince(nProvinceID).getPointsY(j) > nPosY) && nPosX < (((getProvince(nProvinceID).getPointsX(j) - getProvince(nProvinceID).getPointsX(i)) * (nPosY - getProvince(nProvinceID).getPointsY(i))) / (getProvince(nProvinceID).getPointsY(j) - getProvince(nProvinceID).getPointsY(i))) + getProvince(nProvinceID).getPointsX(i)) {
                if (!output) {
                    output = true;
                } else {
                    output = false;
                }
            }
            j = i;
        }
        return output;
    }

    public final float checkPosOfClickX(float nPosX) {
        if ((-nPosX) > ((float) CFG.map.getMapBG().getWidth())) {
            while ((-nPosX) > ((float) CFG.map.getMapBG().getWidth())) {
                nPosX += (float) CFG.map.getMapBG().getWidth();
            }
        } else if (nPosX > CFG.DEFAULT_RESEARACH_LEVEL) {
            while (nPosX > CFG.DEFAULT_RESEARACH_LEVEL) {
                nPosX -= (float) CFG.map.getMapBG().getWidth();
            }
        }
        return nPosX;
    }

    public final void resetRegroupArmyData() {
        resetActiveProvincesINFO();
        CFG.menuManager.setVisible_InGame_ActionInfo(false);
        CFG.menuManager.setVisible_InGame_ProvinceRegroupArmy(false);
        this.currentRegroupArmy = null;
    }

    public final void checkProvinceActionMenu() {
        boolean z;
        boolean z2;
        boolean z3 = false;
        if (CFG.SPECTATOR_MODE) {
            CFG.menuManager.setVisible_InGame_ProvinceAction(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_ThrowNuclearWarhead(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
        } else if (getActiveProvinceID() < 0) {
            CFG.menuManager.setVisible_InGame_ProvinceAction(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
        } else if (CFG.gameAction.getActiveTurnState() != Game_Action.TurnStates.INPUT_ORDERS || CFG.menuManager.getVisible_InGame_FlagAction()) {
            CFG.menuManager.setVisible_InGame_ProvinceAction(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
            CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
        } else if (!CFG.menuManager.getInGame_ProvinceRecruit_Visible() && !CFG.menuManager.getInGame_ProvinceDisband_Visible()) {
            if (CFG.game.getProvince(CFG.game.getActiveProvinceID()).getWasteland() < 0) {
                if (CFG.game.getProvince(CFG.game.getActiveProvinceID()).getCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || CFG.gameAction.controlsArmyInProvince(CFG.game.getActiveProvinceID()) || CFG.gameAction.isMovingArmyFromProvince(CFG.game.getActiveProvinceID())) {
                    CFG.menuManager.setVisible_InGame_ProvinceAction(true);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_ThrowNuclearWarhead(false);
                } else if (CFG.game.getProvince(CFG.game.getActiveProvinceID()).getCivID() != CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() && CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getNuclearWeapons() > 0) {
                    CFG.menuManager.setVisible_InGame_ProvinceAction_ThrowNuclearWarhead(true);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                } else if (CFG.game.getProvince(CFG.game.getActiveProvinceID()).getSeaProvince() || CFG.game.getProvince(CFG.game.getActiveProvinceID()).getCivID() != 0 || !Game_Calendar.ENABLE_COLONIZATION_NEUTRAL_PROVINCES) {
                    CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                } else if (CFG.gameAction.canColonizieNeutral_Tech(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                    CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_ThrowNuclearWarhead(false);
                    if (CFG.gameAction.canColonizieWasteland_BorderOrArmy(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                        MenuManager menuManager = CFG.menuManager;
                        if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                            z3 = true;
                        }
                        menuManager.setVisible_InGame_ProvinceAction_Colonize(z3);
                        return;
                    }
                    MenuManager menuManager2 = CFG.menuManager;
                    if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                        z3 = true;
                    }
                    menuManager2.setVisible_InGame_ProvinceAction_Colonize_BorderOrArmy(z3);
                } else {
                    CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                    CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                    if (CFG.gameAction.canColonizieWasteland_BorderOrArmy(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                        MenuManager menuManager3 = CFG.menuManager;
                        if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        menuManager3.setVisible_InGame_ProvinceAction_Colonize_TechRequired(z2);
                        MenuManager menuManager4 = CFG.menuManager;
                        if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                            z3 = true;
                        }
                        menuManager4.setVisible_InGame_ProvinceAction_Colonize(z3);
                        return;
                    }
                    MenuManager menuManager5 = CFG.menuManager;
                    if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                        z3 = true;
                    }
                    menuManager5.setVisible_InGame_ProvinceAction_Colonize_BorderOrArmy(z3);
                }
            } else if (!Game_Calendar.getColonizationOfWastelandIsEnabled()) {
                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
            } else if (CFG.gameAction.canColonizieWasteland_Tech(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                if (CFG.gameAction.canColonizieWasteland_BorderOrArmy(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                    MenuManager menuManager6 = CFG.menuManager;
                    if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                        z3 = true;
                    }
                    menuManager6.setVisible_InGame_ProvinceAction_Colonize(z3);
                    return;
                }
                MenuManager menuManager7 = CFG.menuManager;
                if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                    z3 = true;
                }
                menuManager7.setVisible_InGame_ProvinceAction_Colonize_BorderOrArmy(z3);
            } else {
                CFG.menuManager.setVisible_InGame_ProvinceAction(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize(false);
                CFG.menuManager.setVisible_InGame_ProvinceAction_Colonize_TechRequired(false);
                if (CFG.gameAction.canColonizieWasteland_BorderOrArmy(CFG.game.getActiveProvinceID(), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                    MenuManager menuManager8 = CFG.menuManager;
                    if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                        z = true;
                    } else {
                        z = false;
                    }
                    menuManager8.setVisible_InGame_ProvinceAction_Colonize(z);
                    MenuManager menuManager9 = CFG.menuManager;
                    if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                        z3 = true;
                    }
                    menuManager9.setVisible_InGame_ProvinceAction_Colonize_TechRequired(z3);
                    return;
                }
                MenuManager menuManager10 = CFG.menuManager;
                if (CFG.FOG_OF_WAR < 2 || CFG.game.getPlayer(CFG.PLAYER_TURNID).getMetProvince(CFG.game.getActiveProvinceID())) {
                    z3 = true;
                }
                menuManager10.setVisible_InGame_ProvinceAction_Colonize_BorderOrArmy(z3);
            }
        }
    }

    public final void resetChooseProvinceData() {
        resetActiveProvincesINFO();
        CFG.menuManager.setVisible_InGame_ActionInfo(false);
        CFG.menuManager.setVisible_InGame_ProvinceMoveUnits(false);
        enableHighlightedProvinces_Percentage();
        this.highlightedProvinceBorder_BackAnimation = true;
        this.lDashedLineTime_Percentage_HighlitedProvinceBorder = System.currentTimeMillis();
        this.highlightedProvinceBorder_Update = true;
        this.HIGHLIGHTED_CITIES_DISABLE_ANIMATION = true;
        this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
    }

    public final void resetChooseProvinceData_Immediately() {
        disableHighlightedProvinces();
        this.lHighlightedProvinces.clear();
        this.iHighlightedProvincesSize = 0;
        CFG.menuManager.setVisible_InGame_ActionInfo(false);
        CFG.menuManager.setVisible_InGame_ProvinceMoveUnits(false);
        this.highlightedProvinceBorder_Update = false;
        CFG.gameAction.updateInGame_ProvinceInfo();
    }

    public final void setChosenProvinceID(int nProvinceID) {
        if (CFG.migrateMode) {
            CFG.gameAction.hideAllViews();
            CFG.menuManager.rebuildInGame_Migrate(CFG.game.getActiveProvinceID(), nProvinceID);
            resetChooseProvinceData_Immediately();
            CFG.game.setActiveProvinceID(nProvinceID);
            return;
        }
        if (CFG.chosenProvinceID < 0) {
            CFG.gameAction.hideAllViews();
            CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setMax(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
            CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setCurrent(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
            CFG.menuManager.setVisible_InGame_ProvinceMoveUnits(true);
        } else if (CFG.chosenProvinceID == nProvinceID && CFG.menuManager.getInGame_ProvinceMoveUnits_Visible()) {
            CFG.menuManager.getInGame_ProvinceMoveUnits_Confrim();
            CFG.soundsManager.playSound(SoundsManager.SOUND_MOVE_ARMY);
            CFG.map.getMapTouchManager().setActionDownTime(0);
            return;
        }
        CFG.chosenProvinceID = nProvinceID;
        updateProvinceNameWidth(CFG.chosenProvinceID);
        boolean tFound = false;
        int i = 0;
        while (true) {
            if (i < getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnitsSize()) {
                if (getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i).getFromProvinceID() == getActiveProvinceID() && getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i).getToProvinceID() == CFG.chosenProvinceID) {
                    CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setMax(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) + getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i).getNumOfUnits());
                    CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setCurrent(getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMoveUnits(i).getNumOfUnits());
                    tFound = true;
                    break;
                }
                i++;
            } else {
                break;
            }
        }
        if (!tFound) {
            CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setMax(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
            CFG.menuManager.getInGame_ProvinceMoveUnits_Slider().setCurrent(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
        }
        this.currentMoveUnitsLine = new MoveUnits_Line_Current(getActiveProvinceID(), nProvinceID);
        CFG.gameAction.updateInGame_ProvinceInfo();
        CFG.menuManager.setVisible_InGame_ActionInfo_Move();
    }

    public final void setCurrentRegroupArmyID(int nToProvinceID) {
        if (CFG.chosenProvinceID < 0) {
            CFG.gameAction.hideAllViews();
            CFG.menuManager.getInGame_RegroupArmy_Slider().setMax(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
            CFG.menuManager.getInGame_RegroupArmy_Slider().setCurrent(getProvince(getActiveProvinceID()).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()));
            CFG.menuManager.setVisible_InGame_ProvinceRegroupArmy(true);
        }
        this.currentRegroupArmy = null;
        if (!DiplomacyManager.canMoveToNaighbooringProvince(nToProvinceID, CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
            CFG.gameAction.hideAllViews();
            this.lCurrentRegroupArmyLine.clear();
            CFG.chosenProvinceID = -1;
            CFG.menuManager.setVisible_InGame_ActionInfo_RegroupArmy();
            return;
        }
        this.currentRegroupArmy = new RegroupArmy_Data(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), getActiveProvinceID(), nToProvinceID);
        if (this.currentRegroupArmy.getRouteSize() > 0) {
            CFG.chosenProvinceID = nToProvinceID;
            this.lCurrentRegroupArmyLine.clear();
            this.lCurrentRegroupArmyLine = new ArrayList();
            this.lCurrentRegroupArmyLine.add(new MoveUnits_Line_Current(this.currentRegroupArmy.getFromProvinceID(), this.currentRegroupArmy.getRoute(0)));
            for (int i = 0; i < this.currentRegroupArmy.getRouteSize() - 1; i++) {
                this.lCurrentRegroupArmyLine.add(new MoveUnits_Line_Highlighted(this.currentRegroupArmy.getRoute(i), this.currentRegroupArmy.getRoute(i + 1)));
            }
            updateProvinceNameWidth(CFG.chosenProvinceID);
            CFG.gameAction.updateInGame_ProvinceInfo();
            CFG.menuManager.setVisible_InGame_ActionInfo_RegroupArmy_Move();
            return;
        }
        CFG.gameAction.hideAllViews();
        this.lCurrentRegroupArmyLine.clear();
        CFG.chosenProvinceID = -1;
        CFG.menuManager.setVisible_InGame_ActionInfo_RegroupArmy();
    }

    public final void autoBuildChooseProvinceMode(boolean force) {
        if (CFG.gameAction.getActiveTurnState() == Game_Action.TurnStates.INPUT_ORDERS && !CFG.chooseProvinceMode && CFG.map.getMapScale().getCurrentScale() >= 1.0f) {
            if ((CFG.activeProvince_BEFORE != getActiveProvinceID() && !CFG.menuManager.getInGame_ProvinceBuild_Visible()) || force) {
                if ((CFG.viewsManager.getActiveViewID() < 0 || CFG.viewsManager.getActiveView().canMoveArmy) && !getProvince(getActiveProvinceID()).getSeaProvince() && getProvince(getActiveProvinceID()).getWasteland() < 0 && CFG.gameAction.controlsArmyInProvince(getActiveProvinceID())) {
                    autoChooseProvinceMode(getActiveProvinceID());
                }
            }
        }
    }

    public final void autoChooseProvinceMode(int nProvinceID) {
        if (!CFG.regroupArmyMode && !CFG.menuManager.getVisible_InGame_FlagAction()) {
            this.currentMoveUnitsLine = null;
            if (getActiveProvinceID() >= 0) {
                CFG.activeCivilizationArmyID = 0;
                if (!CFG.SPECTATOR_MODE && CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() != CFG.game.getProvince(getActiveProvinceID()).getCivID()) {
                    int i = 1;
                    while (true) {
                        if (i < CFG.game.getProvince(getActiveProvinceID()).getCivsSize()) {
                            if (CFG.game.getProvince(getActiveProvinceID()).getCivID(i) == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                                CFG.activeCivilizationArmyID = i;
                                break;
                            }
                            i++;
                        } else {
                            break;
                        }
                    }
                }
                this.highlightedProvinceBorder_BackAnimation = false;
                CFG.chooseProvinceMode = true;
                CFG.chosenProvinceID = -1;
                updateHighlight_MoveUnitsProvinces(nProvinceID);
            }
        }
    }

    public final void chooseProvinceMode() {
        if (CFG.regroupArmyMode) {
            resetRegroupArmyData();
        }
        autoChooseProvinceMode(getActiveProvinceID());
        if (getActiveProvinceID() >= 0) {
            CFG.menuManager.setVisible_InGame_ActionInfo_ChooseProvince();
            this.HIGHLIGHTED_CITIES_DISABLE_ANIMATION = false;
            this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
        }
    }

    public final void regroupArmyMode() {
        CFG.regroupArmyMode = true;
        CFG.chosenProvinceID = -1;
        CFG.menuManager.setVisible_InGame_ActionInfo_RegroupArmy();
    }

    public final void resetActiveProvincesINFO() {
        this.lHighlightedProvinces_MoveUnits_Lines.clear();
        this.lCurrentRegroupArmyLine.clear();
        this.currentMoveUnitsLine = null;
        if (CFG.chooseProvinceMode) {
            CFG.chooseProvinceMode = false;
        }
        if (CFG.regroupArmyMode) {
            CFG.regroupArmyMode = false;
        }
        CFG.migrateMode = false;
        CFG.chosenProvinceID = -1;
    }

    public final void resetLastActiveProvince() {
        if (this.iHighlightedProvincesSize > 0) {
            disableHighlightedProvinces();
            this.lHighlightedProvinces.clear();
            this.iHighlightedProvincesSize = 0;
        }
        this.lHighlightedProvinces_MoveUnits_Lines.clear();
        this.lCurrentRegroupArmyLine.clear();
        this.currentMoveUnitsLine = null;
    }

    public final void addHighlightProvince_SelectProvinceMode(int nProvinceID) {
        this.lHighlightedProvinces.add(Integer.valueOf(nProvinceID));
        this.iHighlightedProvincesSize = this.lHighlightedProvinces.size();
        Gdx.app.log("AoC", "" + this.lHighlightedProvinces.size());
        this.fDashedLine_Percentage_HighlitedProvinceBorder = 5.0f;
        this.lDashedLineTime_Percentage_HighlitedProvinceBorder = System.currentTimeMillis();
        this.highlightedProvinceBorder_Update = true;
        this.highlightedProvince_AnimationData.resetData();
        enableHighlightedProvinces_Percentage();
    }

    public final void updateHighlight_MoveUnitsProvinces(int nProvinceID) {
        if (this.iHighlightedProvincesSize > 0) {
            disableHighlightedProvinces();
            this.lHighlightedProvinces.clear();
            this.iHighlightedProvincesSize = 0;
        }
        this.lHighlightedProvinces_MoveUnits_Lines.clear();
        if (CFG.game.getProvince(nProvinceID).getSeaProvince()) {
            for (int i = 0; i < getProvince(nProvinceID).getNeighboringProvincesSize(); i++) {
                if ((CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getSeaProvince() || (CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getWasteland() < 0 && ((CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() == 0 || CFG.game.getCiv(CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID()).getPuppetOfCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID() == CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID() || ((CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0 && CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() == CFG.game.getCiv(CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID()).getAllianceID()) || CFG.game.getMilitaryAccess(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID()) > 0 || ((int) CFG.game.getCivRelation_OfCivB(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getCivID())) == -100)) && (CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMovePoints() >= CFG.gameAction.costOfMoveArmy(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) || CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i)))))) && ((CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMovePoints() >= CFG.gameAction.costOfMoveArmy(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) || CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i))) && DiplomacyManager.canMoveToNaighbooringProvince(getProvince(nProvinceID).getNeighboringProvinces(i), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()))) {
                    this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i)));
                    addHighlightedProvince_MoveUnits_Line(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i));
                }
            }
        } else if (CFG.migrateMode) {
            for (int i2 = 0; i2 < getProvince(nProvinceID).getNeighboringProvincesSize(); i2++) {
                if (uncivilizedCanMigrate(getProvince(nProvinceID).getNeighboringProvinces(i2), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())) {
                    this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i2)));
                    addHighlightedProvince_MoveUnits_Line_Migrate(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i2));
                }
            }
        } else if (CFG.game.getProvince(nProvinceID).getArmyCivID(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) > 0) {
            for (int i3 = 0; i3 < getProvince(nProvinceID).getNeighboringProvincesSize(); i3++) {
                if (CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getWasteland() < 0 && ((CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID() == 0 || CFG.game.getCiv(CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID()).getPuppetOfCivID() == CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID() || CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getPuppetOfCivID() == CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID() || ((CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() > 0 && CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getAllianceID() == CFG.game.getCiv(CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID()).getAllianceID()) || CFG.game.getMilitaryAccess(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID()) > 0 || ((int) CFG.game.getCivRelation_OfCivB(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), CFG.game.getProvince(getProvince(nProvinceID).getNeighboringProvinces(i3)).getCivID())) == -100)) && ((CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMovePoints() >= CFG.gameAction.costOfMoveArmy(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i3), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) || CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i3))) && DiplomacyManager.canMoveToNaighbooringProvince(getProvince(nProvinceID).getNeighboringProvinces(i3), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID())))) {
                    this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i3)));
                    addHighlightedProvince_MoveUnits_Line(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i3));
                }
            }
            if (getProvince(nProvinceID).getLevelOfPort() > 0) {
                for (int i4 = 0; i4 < getProvince(nProvinceID).getNeighboringSeaProvincesSize(); i4++) {
                    if (CFG.game.getCiv(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()).getMovePoints() >= CFG.gameAction.costOfMoveArmy(nProvinceID, getProvince(nProvinceID).getNeighboringSeaProvinces(i4), CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) || CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringSeaProvinces(i4))) {
                        this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringSeaProvinces(i4)));
                        addHighlightedProvince_MoveUnits_Line(nProvinceID, getProvince(nProvinceID).getNeighboringSeaProvinces(i4));
                    }
                }
            }
        } else {
            for (int i5 = 0; i5 < getProvince(nProvinceID).getNeighboringProvincesSize(); i5++) {
                if (CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i5))) {
                    this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i5)));
                    addHighlightedProvince_MoveUnits_Line(nProvinceID, getProvince(nProvinceID).getNeighboringProvinces(i5));
                }
            }
            if (getProvince(nProvinceID).getLevelOfPort() > 0) {
                for (int i6 = 0; i6 < getProvince(nProvinceID).getNeighboringSeaProvincesSize(); i6++) {
                    if (CFG.gameAction.getIsFreeMove(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nProvinceID, getProvince(nProvinceID).getNeighboringSeaProvinces(i6))) {
                        this.lHighlightedProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringSeaProvinces(i6)));
                        addHighlightedProvince_MoveUnits_Line(nProvinceID, getProvince(nProvinceID).getNeighboringSeaProvinces(i6));
                    }
                }
            }
        }
        this.iHighlightedProvincesSize = this.lHighlightedProvinces.size();
        this.fDashedLine_Percentage_HighlitedProvinceBorder = 5.0f;
        this.lDashedLineTime_Percentage_HighlitedProvinceBorder = System.currentTimeMillis();
        this.highlightedProvinceBorder_Update = true;
        this.highlightedProvince_AnimationData.resetData();
        enableHighlightedProvinces_Percentage();
        this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
        this.HIGHLIGHTED_CITIES_DISABLE_ANIMATION = false;
    }

    public final void disableHighlightedProvinces() {
        for (int i = 0; i < this.iHighlightedProvincesSize; i++) {
            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getSeaProvince()) {
                for (int j = 0; j < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j++) {
                    boolean updatePB = true;
                    int k = 0;
                    while (true) {
                        if (k < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) == this.lHighlightedProvinces.get(k).intValue()) {
                                updatePB = false;
                                break;
                            }
                            k++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) != getActiveProvinceID() && updatePB) {
                        if (getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getSeaProvince()) {
                            if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                                getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersSeaBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).updateDrawProvinceBorderSeaBySea();
                            } else {
                                getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersSeaBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorderSeaBySea();
                            }
                        } else if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                            removeDrawProvinceBorder_LandBySea(this.lHighlightedProvinces.get(i).intValue(), getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea_ID(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)));
                        } else {
                            removeDrawProvinceBorder_LandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j), getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersLandBySea_ID(this.lHighlightedProvinces.get(i).intValue()));
                        }
                    }
                }
            } else {
                for (int j2 = 0; j2 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j2++) {
                    boolean updatePB2 = true;
                    int k2 = 0;
                    while (true) {
                        if (k2 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) == this.lHighlightedProvinces.get(k2).intValue()) {
                                updatePB2 = false;
                                break;
                            }
                            k2++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) != getActiveProvinceID() && updatePB2) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)) {
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandByLand(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).updateDrawProvinceBorder(this.lHighlightedProvinces.get(i).intValue());
                        } else {
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).getProvinceBordersLandByLand(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2));
                        }
                    }
                }
                for (int j3 = 0; j3 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvincesSize(); j3++) {
                    boolean updatePB3 = true;
                    int k3 = 0;
                    while (true) {
                        if (k3 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) == this.lHighlightedProvinces.get(k3).intValue()) {
                                updatePB3 = false;
                                break;
                            }
                            k3++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) != getActiveProvinceID() && updatePB3) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)) {
                            removeDrawProvinceBorder_LandBySea(this.lHighlightedProvinces.get(i).intValue(), getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea_ID(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)));
                        } else {
                            removeDrawProvinceBorder_LandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3), getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).getProvinceBordersLandBySea_ID(this.lHighlightedProvinces.get(i).intValue()));
                        }
                    }
                }
            }
        }
        this.lTIME_HIGHLIGHTED_CITIES = System.currentTimeMillis();
        this.HIGHLIGHTED_CITIES_DISABLE_ANIMATION = true;
        if (this.iActiveProvince >= 0) {
            if (getProvince(this.iActiveProvince).getLevelOfPort() == 0) {
                for (int i2 = 0; i2 < getProvince(this.iActiveProvince).getNeighboringSeaProvincesSize(); i2++) {
                    if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)) {
                        removeDrawProvinceBorder_LandBySea(this.iActiveProvince, getProvince(this.iActiveProvince).getProvinceBordersLandBySea_ID(getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)));
                    } else {
                        removeDrawProvinceBorder_LandBySea(getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2), getProvince(getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)).getProvinceBordersLandBySea_ID(this.iActiveProvince));
                    }
                }
            }
            if (getProvince(this.iActiveProvince).getSeaProvince()) {
                for (int i3 = 0; i3 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i3++) {
                    if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i3)) {
                        if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                            getProvince(this.iActiveProvince).getProvinceBordersSeaBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).updateDrawProvinceBorder_ActiveSea();
                        }
                    } else if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                        getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getProvinceBordersSeaBySea(this.iActiveProvince).updateDrawProvinceBorder_ActiveSea();
                    }
                }
                return;
            }
            for (int i4 = 0; i4 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i4++) {
                boolean found = false;
                int j4 = 0;
                while (true) {
                    if (j4 < this.iHighlightedProvincesSize) {
                        if (getProvince(this.iActiveProvince).getNeighboringProvinces(i4) == this.lHighlightedProvinces.get(j4).intValue()) {
                            found = true;
                            break;
                        }
                        j4++;
                    } else {
                        break;
                    }
                }
                if (found) {
                    if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i4)) {
                        getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).updateDrawProvinceBorder_Active();
                    } else {
                        getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getProvinceBordersLandByLand(this.iActiveProvince).updateDrawProvinceBorder_Active();
                    }
                }
            }
        }
    }

    public final void enableHighlightedProvinces_Percentage() {
        for (int i = 0; i < this.iHighlightedProvincesSize; i++) {
            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getSeaProvince()) {
                for (int j = 0; j < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j++) {
                    boolean updatePB = true;
                    int k = 0;
                    while (true) {
                        if (k < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) == this.lHighlightedProvinces.get(k).intValue()) {
                                updatePB = false;
                                break;
                            }
                            k++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) != getActiveProvinceID() && updatePB) {
                        if (getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getSeaProvince()) {
                            if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                                getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersSeaBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).updateDrawProvinceBorder_MoveUnits_Percentage_Sea();
                            } else {
                                getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersSeaBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Percentage_Sea();
                            }
                        } else if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                            addDrawProvinceBorder_LandBySea(this.lHighlightedProvinces.get(i).intValue(), getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea_ID(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)));
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                        } else {
                            addDrawProvinceBorder_LandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j), getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersLandBySea_ID(this.lHighlightedProvinces.get(i).intValue()));
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersLandBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                        }
                    }
                }
            } else {
                for (int j2 = 0; j2 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j2++) {
                    boolean updatePB2 = true;
                    int k2 = 0;
                    while (true) {
                        if (k2 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) == this.lHighlightedProvinces.get(k2).intValue()) {
                                updatePB2 = false;
                                break;
                            }
                            k2++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) != getActiveProvinceID() && updatePB2) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)) {
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandByLand(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).updateDrawProvinceBorder_MoveUnits_Percentage();
                        } else {
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).getProvinceBordersLandByLand(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Percentage();
                        }
                    }
                }
                for (int j3 = 0; j3 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvincesSize(); j3++) {
                    boolean updatePB3 = true;
                    int k3 = 0;
                    while (true) {
                        if (k3 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) == this.lHighlightedProvinces.get(k3).intValue()) {
                                updatePB3 = false;
                                break;
                            }
                            k3++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) != getActiveProvinceID() && updatePB3) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)) {
                            addDrawProvinceBorder_LandBySea(this.lHighlightedProvinces.get(i).intValue(), getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea_ID(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)));
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                        } else {
                            addDrawProvinceBorder_LandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3), getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).getProvinceBordersLandBySea_ID(this.lHighlightedProvinces.get(i).intValue()));
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).getProvinceBordersLandBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                        }
                    }
                }
            }
        }
        try {
            if (getProvince(getActiveProvinceID()).getLevelOfPort() == 0) {
                for (int i2 = 0; i2 < getProvince(getActiveProvinceID()).getNeighboringSeaProvincesSize(); i2++) {
                    if (getActiveProvinceID() < getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2)) {
                        addDrawProvinceBorder_LandBySea(getActiveProvinceID(), getProvince(getActiveProvinceID()).getProvinceBordersLandBySea_ID(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2)));
                        getProvince(getActiveProvinceID()).getProvinceBordersLandBySea(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2)).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                    } else {
                        addDrawProvinceBorder_LandBySea(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2), getProvince(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2)).getProvinceBordersLandBySea_ID(getActiveProvinceID()));
                        getProvince(getProvince(getActiveProvinceID()).getNeighboringSeaProvinces(i2)).getProvinceBordersLandBySea(getActiveProvinceID()).updateDrawProvinceBorder_MoveUnits_Percentage_LandBySea();
                    }
                }
            }
            if (getProvince(getActiveProvinceID()).getSeaProvince()) {
                for (int i3 = 0; i3 < getProvince(getActiveProvinceID()).getNeighboringProvincesSize(); i3++) {
                    if (getActiveProvinceID() < getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)) {
                        if (getProvince(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).getSeaProvince()) {
                            getProvince(getActiveProvinceID()).getProvinceBordersSeaBySea(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).updateDrawProvinceBorder_ActiveSeaBySea_Percentage();
                        } else {
                            boolean canMoveTo = false;
                            int o = this.lHighlightedProvinces.size() - 1;
                            while (true) {
                                if (o >= 0) {
                                    if (this.lHighlightedProvinces.get(o).equals(Integer.valueOf(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)))) {
                                        canMoveTo = true;
                                        break;
                                    }
                                    o--;
                                } else {
                                    break;
                                }
                            }
                            if (canMoveTo) {
                                getProvince(getActiveProvinceID()).getProvinceBordersLandBySea(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).updateDrawProvinceBorder_ActiveLandBySea_Percentage();
                            }
                        }
                    } else if (getProvince(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).getSeaProvince()) {
                        getProvince(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).getProvinceBordersSeaBySea(getActiveProvinceID()).updateDrawProvinceBorder_ActiveSeaBySea_Percentage();
                    } else {
                        boolean canMoveTo2 = false;
                        int o2 = this.lHighlightedProvinces.size() - 1;
                        while (true) {
                            if (o2 >= 0) {
                                if (this.lHighlightedProvinces.get(o2).equals(Integer.valueOf(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)))) {
                                    canMoveTo2 = true;
                                    break;
                                }
                                o2--;
                            } else {
                                break;
                            }
                        }
                        if (canMoveTo2) {
                            getProvince(getProvince(getActiveProvinceID()).getNeighboringProvinces(i3)).getProvinceBordersLandBySea(getActiveProvinceID()).updateDrawProvinceBorder_ActiveLandBySea_Percentage();
                        }
                    }
                }
                return;
            }
            int jSize = this.iHighlightedProvincesSize;
            for (int i4 = 0; i4 < getProvince(getActiveProvinceID()).getNeighboringProvincesSize(); i4++) {
                boolean found = false;
                int j4 = 0;
                while (true) {
                    if (j4 < jSize) {
                        if (getProvince(getActiveProvinceID()).getNeighboringProvinces(i4) == this.lHighlightedProvinces.get(j4).intValue()) {
                            found = true;
                            break;
                        }
                        j4++;
                    } else {
                        break;
                    }
                }
                if (found) {
                    if (getActiveProvinceID() < getProvince(getActiveProvinceID()).getNeighboringProvinces(i4)) {
                        getProvince(getActiveProvinceID()).getProvinceBordersLandByLand(getProvince(getActiveProvinceID()).getNeighboringProvinces(i4)).updateDrawProvinceBorder_Active_Percentage();
                    } else {
                        getProvince(getProvince(getActiveProvinceID()).getNeighboringProvinces(i4)).getProvinceBordersLandByLand(getActiveProvinceID()).updateDrawProvinceBorder_Active_Percentage();
                    }
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void enableHighlightedProvinces_Classic() {
        for (int i = 0; i < this.iHighlightedProvincesSize; i++) {
            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getSeaProvince()) {
                for (int j = 0; j < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j++) {
                    boolean updatePB = true;
                    int k = 0;
                    while (true) {
                        if (k < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) == this.lHighlightedProvinces.get(k).intValue()) {
                                updatePB = false;
                                break;
                            }
                            k++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j) != getActiveProvinceID() && updatePB) {
                        if (getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getSeaProvince()) {
                            if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                                getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersSeaBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).updateDrawProvinceBorder_MoveUnits_Sea();
                            } else {
                                getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersSeaBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Sea();
                            }
                        } else if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)) {
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).updateDrawProvinceBorder_MoveUnits_Sea();
                        } else {
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j)).getProvinceBordersLandBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Sea();
                        }
                    }
                }
            } else {
                for (int j2 = 0; j2 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvincesSize(); j2++) {
                    boolean updatePB2 = true;
                    int k2 = 0;
                    while (true) {
                        if (k2 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) == this.lHighlightedProvinces.get(k2).intValue()) {
                                updatePB2 = false;
                                break;
                            }
                            k2++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2) != getActiveProvinceID() && updatePB2) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)) {
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandByLand(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).updateDrawProvinceBorder_MoveUnits();
                        } else {
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringProvinces(j2)).getProvinceBordersLandByLand(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits();
                        }
                    }
                }
                for (int j3 = 0; j3 < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvincesSize(); j3++) {
                    boolean updatePB3 = true;
                    int k3 = 0;
                    while (true) {
                        if (k3 < this.iHighlightedProvincesSize) {
                            if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) == this.lHighlightedProvinces.get(k3).intValue()) {
                                updatePB3 = false;
                                break;
                            }
                            k3++;
                        } else {
                            break;
                        }
                    }
                    if (getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3) != getActiveProvinceID() && updatePB3) {
                        if (this.lHighlightedProvinces.get(i).intValue() < getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)) {
                            getProvince(this.lHighlightedProvinces.get(i).intValue()).getProvinceBordersLandBySea(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).updateDrawProvinceBorder_MoveUnits_Sea();
                        } else {
                            getProvince(getProvince(this.lHighlightedProvinces.get(i).intValue()).getNeighboringSeaProvinces(j3)).getProvinceBordersLandBySea(this.lHighlightedProvinces.get(i).intValue()).updateDrawProvinceBorder_MoveUnits_Sea();
                        }
                    }
                }
            }
        }
        if (getProvince(this.iActiveProvince).getLevelOfPort() == 0) {
            for (int i2 = 0; i2 < getProvince(this.iActiveProvince).getNeighboringSeaProvincesSize(); i2++) {
                if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)) {
                    getProvince(this.iActiveProvince).getProvinceBordersLandBySea(getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)).updateDrawProvinceBorder_MoveUnits_Sea();
                } else {
                    getProvince(getProvince(this.iActiveProvince).getNeighboringSeaProvinces(i2)).getProvinceBordersLandBySea(this.iActiveProvince).updateDrawProvinceBorder_MoveUnits_Sea();
                }
            }
        }
        if (getProvince(this.iActiveProvince).getSeaProvince()) {
            for (int i3 = 0; i3 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i3++) {
                if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i3)) {
                    if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                        getProvince(this.iActiveProvince).getProvinceBordersSeaBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).updateDrawProvinceBorderSeaBySea();
                    }
                } else if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                    getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getProvinceBordersSeaBySea(this.iActiveProvince).updateDrawProvinceBorderSeaBySea();
                }
            }
            return;
        }
        int jSize = this.iHighlightedProvincesSize;
        for (int i4 = 0; i4 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i4++) {
            boolean found = false;
            int j4 = 0;
            while (true) {
                if (j4 < jSize) {
                    if (getProvince(this.iActiveProvince).getNeighboringProvinces(i4) == this.lHighlightedProvinces.get(j4).intValue()) {
                        found = true;
                        break;
                    }
                    j4++;
                } else {
                    break;
                }
            }
            if (found) {
                if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i4)) {
                    getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).updateDrawProvinceBorder(this.iActiveProvince);
                } else {
                    getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getProvinceBordersLandByLand(this.iActiveProvince).updateDrawProvinceBorder(getProvince(this.iActiveProvince).getNeighboringProvinces(i4));
                }
            }
        }
    }

    public final void buildWars() {
        this.lWars = new ArrayList();
        this.iWarsSize = 0;
        this.lPeaceTreaties = new ArrayList();
    }

    public War_GameData getWar(int i) {
        return this.lWars.get(i);
    }

    public final void removeWarData(int nWarID) {
        this.lWars.remove(nWarID);
        this.iWarsSize = this.lWars.size();
    }

    public final void addWarData(int nAggressor, int nDefender) {
        if (nAggressor != 0 && nDefender != 0) {
            for (int i = 0; i < getWarsSize(); i++) {
                for (int j = 0; j < this.lWars.get(i).getAggressorsSize(); j++) {
                    if (this.lWars.get(i).getAggressorID(j).getCivID() == nAggressor) {
                        int k = 0;
                        while (k < this.lWars.get(i).getDefendersSize()) {
                            if (this.lWars.get(i).getDefenderID(k).getCivID() != nDefender) {
                                k++;
                            } else {
                                return;
                            }
                        }
                        continue;
                    } else if (this.lWars.get(i).getAggressorID(j).getCivID() != nDefender) {
                        continue;
                    } else {
                        int k2 = 0;
                        while (k2 < this.lWars.get(i).getDefendersSize()) {
                            if (this.lWars.get(i).getDefenderID(k2).getCivID() != nAggressor) {
                                k2++;
                            } else {
                                return;
                            }
                        }
                        continue;
                    }
                }
                for (int j2 = 0; j2 < this.lWars.get(i).getDefendersSize(); j2++) {
                    if (this.lWars.get(i).getDefenderID(j2).getCivID() == nAggressor) {
                        int k3 = 0;
                        while (k3 < this.lWars.get(i).getAggressorsSize()) {
                            if (this.lWars.get(i).getAggressorID(k3).getCivID() != nDefender) {
                                k3++;
                            } else {
                                return;
                            }
                        }
                        continue;
                    } else if (this.lWars.get(i).getDefenderID(j2).getCivID() != nDefender) {
                        continue;
                    } else {
                        int k4 = 0;
                        while (k4 < this.lWars.get(i).getAggressorsSize()) {
                            if (this.lWars.get(i).getAggressorID(k4).getCivID() != nAggressor) {
                                k4++;
                            } else {
                                return;
                            }
                        }
                        continue;
                    }
                }
            }
            if (getCiv(nAggressor).getAllianceID() > 0) {
                for (int i2 = 0; i2 < getAlliance(getCiv(nAggressor).getAllianceID()).getCivilizationsSize(); i2++) {
                    if (getAlliance(getCiv(nAggressor).getAllianceID()).getCivilization(i2) != nAggressor) {
                        for (int j3 = 0; j3 < getWarsSize(); j3++) {
                            if (this.lWars.get(j3).getIsAggressor(getAlliance(getCiv(nAggressor).getAllianceID()).getCivilization(i2))) {
                                if (this.lWars.get(j3).getIsDefender(nDefender)) {
                                    this.lWars.get(j3).addAggressor(nAggressor);
                                    return;
                                }
                            } else if (this.lWars.get(j3).getIsDefender(getAlliance(getCiv(nAggressor).getAllianceID()).getCivilization(i2)) && this.lWars.get(j3).getIsAggressor(nDefender)) {
                                this.lWars.get(j3).addDefender(nAggressor);
                                return;
                            }
                        }
                        continue;
                    }
                }
            }
            if (getCiv(nDefender).getAllianceID() > 0) {
                for (int i3 = 0; i3 < getAlliance(getCiv(nDefender).getAllianceID()).getCivilizationsSize(); i3++) {
                    if (getAlliance(getCiv(nDefender).getAllianceID()).getCivilization(i3) != nDefender) {
                        for (int j4 = 0; j4 < getWarsSize(); j4++) {
                            if (this.lWars.get(j4).getIsAggressor(getAlliance(getCiv(nDefender).getAllianceID()).getCivilization(i3))) {
                                if (this.lWars.get(j4).getIsDefender(nAggressor)) {
                                    this.lWars.get(j4).addAggressor(nDefender);
                                    return;
                                }
                            } else if (this.lWars.get(j4).getIsDefender(getAlliance(getCiv(nDefender).getAllianceID()).getCivilization(i3)) && this.lWars.get(j4).getIsAggressor(nAggressor)) {
                                this.lWars.get(j4).addDefender(nDefender);
                                return;
                            }
                        }
                        continue;
                    }
                }
            }
            this.lWars.add(new War_GameData(nAggressor, nDefender));
            this.iWarsSize = this.lWars.size();
        }
    }

    public final int getWarsSize() {
        return this.iWarsSize;
    }

    public final void updateWarStatistics(int iWarID, int iCivA, int iCivB, int iCivilianDeaths, int iEconomicLosses, int iDefPoint, int iAttackPoint) {
        if (iCivA != 0 && iCivB != 0) {
            if (iWarID < 0) {
                addWarData(iCivA, iCivB);
                iWarID = getWarID(iCivA, iCivB);
            }
            getWar(iWarID).addCivilianEconomicLosses(iCivB, iCivilianDeaths, iEconomicLosses);
            CFG.game.getCiv(iCivA).setMilitaryPoints(CFG.game.getCiv(iCivA).getMilitaryPoints() + iAttackPoint);
            CFG.game.getCiv(iCivB).setMilitaryPoints(CFG.game.getCiv(iCivB).getMilitaryPoints() + iDefPoint);
        }
    }

    public final void updateWarStatistics_Casualties(int iWarID, int iCivA, int iCivB, int iCasualties) {
        if (iCivA != 0 && iCivB != 0) {
            if (iWarID < 0) {
                addWarData(iCivA, iCivB);
                iWarID = getWarID(iCivA, iCivB);
            }
            getWar(iWarID).addCasualties(iCivB, iCasualties);
        }
    }

    public final void updateWarStatistics_ConqueredProvinces(int iWarID, int iCivA, int iCivB) {
        if (iCivA != 0 && iCivB != 0) {
            if (iWarID < 0) {
                addWarData(iCivA, iCivB);
                iWarID = getWarID(iCivA, iCivB);
            }
            getWar(iWarID).addConqueredProvinces(iCivA);
        }
    }

    public final int getWarID(int iCivA, int iCivB) {
        if (iCivA == 0 || iCivB == 0) {
            return -1;
        }
        for (int i = 0; i < getWarsSize(); i++) {
            for (int j = 0; j < getWar(i).getAggressorsSize(); j++) {
                if (getWar(i).getAggressorID(j).getCivID() == iCivA) {
                    for (int k = 0; k < getWar(i).getDefendersSize(); k++) {
                        if (getWar(i).getDefenderID(k).getCivID() == iCivB) {
                            return i;
                        }
                    }
                    continue;
                } else if (getWar(i).getAggressorID(j).getCivID() != iCivB) {
                    continue;
                } else {
                    for (int k2 = 0; k2 < getWar(i).getDefendersSize(); k2++) {
                        if (getWar(i).getDefenderID(k2).getCivID() == iCivA) {
                            return i;
                        }
                    }
                    continue;
                }
            }
        }
        return -1;
    }

    public final void buildAlliances() {
        this.lAlliances = new ArrayList();
        this.lAlliances.add(new Alliance(""));
        this.iAlliancesSize = this.lAlliances.size();
    }

    public final void buildAlliances(List<Alliance> nAlliances) {
        this.lAlliances = new ArrayList();
        for (int i = 0; i < nAlliances.size(); i++) {
            this.lAlliances.add(nAlliances.get(i));
        }
        this.iAlliancesSize = this.lAlliances.size();
    }

    public final Alliance getAlliance(int iID) {
        return this.lAlliances.get(iID);
    }

    public final int countAlliance_Provinces(int iID) {
        int out = 0;
        for (int i = 0; i < getAlliance(iID).getCivilizationsSize(); i++) {
            out += getCiv(getAlliance(iID).getCivilization(i)).getNumOfProvinces();
        }
        return out;
    }

    public final int countAlliance_Population(int iID) {
        int out = 0;
        for (int i = 0; i < getAlliance(iID).getCivilizationsSize(); i++) {
            out = (int) (((long) out) + getCiv(getAlliance(iID).getCivilization(i)).countPopulation());
        }
        return out;
    }

    public final int countAlliance_Economy(int iID) {
        int out = 0;
        for (int i = 0; i < getAlliance(iID).getCivilizationsSize(); i++) {
            out += getCiv(getAlliance(iID).getCivilization(i)).countEconomy();
        }
        return out;
    }

    public final void addAlliance(String sAllianceName) {
        List<Alliance> list = this.lAlliances;
        if (sAllianceName.equals("")) {
            sAllianceName = CFG.getRandomAllianceName(0);
        }
        list.add(new Alliance(sAllianceName));
        this.iAlliancesSize = this.lAlliances.size();
    }

    public final void checkAlliances() {
        for (int i = this.lAlliances.size() - 1; i > 0; i--) {
            if (this.lAlliances.get(i).getCivilizationsSize() == 0) {
                this.lAlliances.remove(i);
                for (int j = 1; j < this.iCivsSize; j++) {
                    if (getCiv(j).getAllianceID() >= i) {
                        getCiv(j).setAllianceID(getCiv(j).getAllianceID() - 1);
                    }
                }
            }
        }
        this.iAlliancesSize = this.lAlliances.size();
    }

    public final int getAlliancesSize() {
        return this.iAlliancesSize;
    }

    public final int countWorld_Population() {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (getProvince(i).getWasteland() < 0 && !getProvince(i).getSeaProvince()) {
                out += getProvince(i).getPopulationData().getPopulation();
            }
        }
        return out;
    }

    public final boolean checkClosedSea(int nProvinceID) {
        for (int i = 0; i < getProvince(nProvinceID).getNeighboringSeaProvincesSize(); i++) {
            if (getProvince(getProvince(nProvinceID).getNeighboringSeaProvinces(i)).getLevelOfPort() == -2) {
                return true;
            }
        }
        return false;
    }

    public final void setWasteland(int nProvinceID, boolean wasteland) {
        boolean z = true;
        if (wasteland) {
            if (getProvince(nProvinceID).getWasteland() < 0) {
                z = false;
            }
            if (z != wasteland) {
                CFG.addUndoWastelandProvince(nProvinceID);
            }
            getProvince(nProvinceID).setWasteland(0);
            for (int i = 0; i < getProvince(nProvinceID).getNeighboringProvincesSize(); i++) {
                if (getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getWasteland() < 0 && (getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getNeighboringSeaProvincesSize() <= 0 || !checkClosedSea(nProvinceID))) {
                    ArrayList<Integer> nWastelandProvinces = new ArrayList<>();
                    nWastelandProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i)));
                    getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).setWasteland(0);
                    this.breakWasteland = false;
                    checkWastelandProvince(getProvince(nProvinceID).getNeighboringProvinces(i), nWastelandProvinces);
                }
            }
        } else if (getProvince(nProvinceID).getNeighboringSeaProvincesSize() <= 0 || !checkClosedSea(nProvinceID)) {
            int i2 = 0;
            while (i2 < getProvince(nProvinceID).getNeighboringProvincesSize()) {
                if (getProvince(getProvince(nProvinceID).getNeighboringProvinces(i2)).getWasteland() >= 0) {
                    i2++;
                } else {
                    if (getProvince(nProvinceID).getWasteland() < 0) {
                        z = false;
                    }
                    if (z != wasteland) {
                        CFG.addUndoWastelandProvince(nProvinceID);
                    }
                    getProvince(nProvinceID).setWasteland(-1);
                    return;
                }
            }
        } else {
            if (getProvince(nProvinceID).getWasteland() < 0) {
                z = false;
            }
            if (z != wasteland) {
                CFG.addUndoWastelandProvince(nProvinceID);
            }
            getProvince(nProvinceID).setWasteland(-1);
        }
    }

    public final void checkWastelandProvince(int nProvinceID, List<Integer> nWastelandProvinces) {
        if (this.breakWasteland) {
            for (int a = nWastelandProvinces.size() - 1; a >= 0; a--) {
                getProvince(nWastelandProvinces.get(a).intValue()).setWasteland(-1);
            }
            return;
        }
        for (int i = 0; i < getProvince(nProvinceID).getNeighboringProvincesSize(); i++) {
            if (getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getWasteland() < 0) {
                if (getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).getNeighboringSeaProvincesSize() <= 0 || !checkClosedSea(nProvinceID)) {
                    getProvince(getProvince(nProvinceID).getNeighboringProvinces(i)).setWasteland(0);
                    nWastelandProvinces.add(Integer.valueOf(getProvince(nProvinceID).getNeighboringProvinces(i)));
                    checkWastelandProvince(getProvince(nProvinceID).getNeighboringProvinces(i), nWastelandProvinces);
                } else {
                    for (int a2 = nWastelandProvinces.size() - 1; a2 >= 0; a2--) {
                        getProvince(nWastelandProvinces.get(a2).intValue()).setWasteland(-1);
                    }
                    this.breakWasteland = true;
                }
            }
        }
    }

    public final void checkProvinceConnections() {
        for (int i = 0; i < getProvincesSize(); i++) {
            for (int j = 0; j < getProvince(i).getNeighboringProvincesSize(); j++) {
                boolean found = false;
                int k = 0;
                while (true) {
                    if (k < getProvince(getProvince(i).getNeighboringProvinces(j)).getNeighboringProvincesSize()) {
                        if (i == getProvince(getProvince(i).getNeighboringProvinces(j)).getNeighboringProvinces(k)) {
                            found = true;
                            break;
                        }
                        k++;
                    } else {
                        break;
                    }
                }
                int k2 = 0;
                while (true) {
                    if (k2 < getProvince(getProvince(i).getNeighboringProvinces(j)).getNeighboringSeaProvincesSize()) {
                        if (i == getProvince(getProvince(i).getNeighboringProvinces(j)).getNeighboringSeaProvinces(k2)) {
                            found = true;
                            break;
                        }
                        k2++;
                    } else {
                        break;
                    }
                }
                if (!found) {
                    Gdx.app.log("AoC", "checkProvinceConnections: " + i + " - " + getProvince(i).getNeighboringProvinces(j));
                }
            }
        }
    }

    public final void checkProvince_UselessPoints() {
        int uselessPoints = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            int j = 1;
            while (j < getProvince(i).getPointsSize() - 1) {
                if (getProvince(i).getPointsY(j - 1) == getProvince(i).getPointsY(j + 1) && getProvince(i).getPointsY(j - 1) == getProvince(i).getPointsY(j)) {
                    uselessPoints++;
                    ArrayList<Short> tempPointsX = new ArrayList<>();
                    ArrayList<Short> tempPointsY = new ArrayList<>();
                    for (int a = 0; a < getProvince(i).getPointsSize(); a++) {
                        if (a != j) {
                            tempPointsX.add(Short.valueOf((short) (((short) getProvince(i).getPointsX(a)) / CFG.map.getMapBG().getMapScale())));
                            tempPointsY.add(Short.valueOf((short) (((short) getProvince(i).getPointsY(a)) / CFG.map.getMapBG().getMapScale())));
                        }
                    }
                    getProvince(i).setPoints(tempPointsX, tempPointsY);
                    j--;
                    buildGameProvinceData(i);
                } else if (getProvince(i).getPointsX(j - 1) == getProvince(i).getPointsX(j + 1) && getProvince(i).getPointsX(j - 1) == getProvince(i).getPointsX(j)) {
                    uselessPoints++;
                    ArrayList<Short> tempPointsX2 = new ArrayList<>();
                    ArrayList<Short> tempPointsY2 = new ArrayList<>();
                    for (int a2 = 0; a2 < getProvince(i).getPointsSize(); a2++) {
                        if (a2 != j) {
                            tempPointsX2.add(Short.valueOf((short) (((short) getProvince(i).getPointsX(a2)) / CFG.map.getMapBG().getMapScale())));
                            tempPointsY2.add(Short.valueOf((short) (((short) getProvince(i).getPointsY(a2)) / CFG.map.getMapBG().getMapScale())));
                        }
                    }
                    getProvince(i).setPoints(tempPointsX2, tempPointsY2);
                    j--;
                    buildGameProvinceData(i);
                } else if (Math.max(getProvince(i).getPointsX(j - 1), getProvince(i).getPointsX(j + 1)) - Math.min(getProvince(i).getPointsX(j - 1), getProvince(i).getPointsX(j + 1)) == Math.max(getProvince(i).getPointsY(j - 1), getProvince(i).getPointsY(j + 1)) - Math.min(getProvince(i).getPointsY(j - 1), getProvince(i).getPointsY(j + 1)) && Math.max(getProvince(i).getPointsX(j - 1), getProvince(i).getPointsX(j)) - Math.min(getProvince(i).getPointsX(j - 1), getProvince(i).getPointsX(j)) == Math.max(getProvince(i).getPointsY(j - 1), getProvince(i).getPointsY(j)) - Math.min(getProvince(i).getPointsY(j - 1), getProvince(i).getPointsY(j))) {
                    uselessPoints++;
                    ArrayList<Short> tempPointsX3 = new ArrayList<>();
                    ArrayList<Short> tempPointsY3 = new ArrayList<>();
                    for (int a3 = 0; a3 < getProvince(i).getPointsSize(); a3++) {
                        if (a3 != j) {
                            tempPointsX3.add(Short.valueOf((short) (((short) getProvince(i).getPointsX(a3)) / CFG.map.getMapBG().getMapScale())));
                            tempPointsY3.add(Short.valueOf((short) (((short) getProvince(i).getPointsY(a3)) / CFG.map.getMapBG().getMapScale())));
                        }
                    }
                    getProvince(i).setPoints(tempPointsX3, tempPointsY3);
                    j--;
                    buildGameProvinceData(i);
                }
                j++;
            }
        }
        Gdx.app.log("AoC", "uselessPoints2: " + uselessPoints);
    }

    public final void deleteSeaPaths() {
        List<String> tempL = CFG.getFileNames(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/sea_routes/");
        for (int i = 0; i < tempL.size(); i++) {
            Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/sea_routes/" + tempL.get(i)).delete();
        }
    }

    public final void buildSeaPaths() {
        ArrayList<Boolean> was = new ArrayList<>();
        for (int j = 0; j < this.iProvincesSize; j++) {
            was.add(false);
        }
        for (int i = 0; i < this.iProvincesSize; i++) {
            if (getProvince(i).getSeaProvince()) {
                boolean seaFounds = false;
                boolean landFound = false;
                for (int j2 = 0; j2 < getProvince(i).getNeighboringProvincesSize(); j2++) {
                    if (getProvince(getProvince(i).getNeighboringProvinces(j2)).getNeighboringSeaProvincesSize() > 0) {
                        landFound = true;
                    } else {
                        seaFounds = true;
                    }
                    if (landFound && seaFounds) {
                        break;
                    }
                }
                if (landFound && seaFounds) {
                    for (int j3 = i + 1; j3 < this.iProvincesSize; j3++) {
                        boolean seaFounds2 = false;
                        boolean landFound2 = false;
                        for (int k = 0; k < getProvince(j3).getNeighboringProvincesSize(); k++) {
                            if (getProvince(getProvince(j3).getNeighboringProvinces(k)).getSeaProvince()) {
                                seaFounds2 = true;
                            }
                            if (getProvince(getProvince(j3).getNeighboringProvinces(k)).getNeighboringSeaProvincesSize() > 0) {
                                landFound2 = true;
                            }
                            if (landFound2 && seaFounds2) {
                                break;
                            }
                        }
                        if (seaFounds2 && landFound2) {
                            for (int k2 = 0; k2 < this.iProvincesSize; k2++) {
                                was.set(k2, false);
                            }
                            was.set(i, true);
                            ArrayList<Integer> in = new ArrayList<>();
                            ArrayList<List<Integer>> inPath = new ArrayList<>();
                            for (int k22 = 0; k22 < getProvince(i).getNeighboringProvincesSize(); k22++) {
                                if (getProvince(getProvince(i).getNeighboringProvinces(k22)).getSeaProvince()) {
                                    in.add(Integer.valueOf(getProvince(getProvince(i).getNeighboringProvinces(k22)).getProvinceID()));
                                    ArrayList<Integer> tP = new ArrayList<>();
                                    tP.add(Integer.valueOf(getProvince(getProvince(i).getNeighboringProvinces(k22)).getProvinceID()));
                                    inPath.add(tP);
                                    was.set(getProvince(getProvince(i).getNeighboringProvinces(k22)).getProvinceID(), true);
                                }
                            }
                            buildSeaPath(was, in, inPath, i, j3);
                        }
                    }
                }
            }
        }
    }

    public final boolean buildSeaPath(List<Boolean> was, List<Integer> in, List<List<Integer>> inPath, int from, int lookingFor) {
        ArrayList<Integer> nIN = new ArrayList<>();
        ArrayList<List<Integer>> nINPath = new ArrayList<>();
        for (int i = 0; i < in.size(); i++) {
            if (getProvince(in.get(i).intValue()).getProvinceID() == lookingFor) {
                return true;
            }
        }
        for (int i2 = 0; i2 < in.size(); i2++) {
            for (int j = 0; j < getProvince(in.get(i2).intValue()).getNeighboringProvincesSize(); j++) {
                if (!was.get(getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID()).booleanValue() && getProvince(getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID()).getSeaProvince()) {
                    if (getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID() == lookingFor) {
                        showPath(from, lookingFor, inPath.get(i2));
                        return true;
                    }
                    nIN.add(Integer.valueOf(getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID()));
                    ArrayList<Integer> tPL = new ArrayList<>();
                    for (int u = 0; u < inPath.get(i2).size(); u++) {
                        tPL.add(inPath.get(i2).get(u));
                    }
                    tPL.add(Integer.valueOf(getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID()));
                    nINPath.add(tPL);
                    was.set(getProvince(getProvince(in.get(i2).intValue()).getNeighboringProvinces(j)).getProvinceID(), true);
                }
            }
        }
        try {
            return buildSeaPath(was, nIN, nINPath, from, lookingFor);
        } catch (StackOverflowError ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final void showPath(int p1, int p2, List<Integer> lPath) {
        String pr = "";
        int i = 0;
        while (i < lPath.size()) {
            pr = pr + "" + lPath.get(i) + (lPath.size() + -1 == i ? "" : ",");
            i++;
        }
        Gdx.app.log("AoC", "*" + p1 + "|" + p2 + "~" + pr + "@");
        Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/sea_routes/" + p1 + "_" + p2).writeString(pr, false);
    }

    public final void buildGameProvinceData(int i) {
        int levelOfPort;
        ArrayList<Short> tempPointsX = new ArrayList<>();
        ArrayList<Short> tempPointsY = new ArrayList<>();
        for (int j3 = 0; j3 < getProvince(i).getPointsSize(); j3++) {
            tempPointsX.add(Short.valueOf((short) (getProvince(i).getPointsX(j3) / CFG.map.getMapBG().getMapScale())));
            tempPointsY.add(Short.valueOf((short) (getProvince(i).getPointsY(j3) / CFG.map.getMapBG().getMapScale())));
        }
        ArrayList<Province_Border_GameData> tempProvinceBorder = new ArrayList<>();
        for (int j2 = 0; j2 < getProvince(i).getProvinceBordersLandByLandSize(); j2++) {
            ArrayList<Short> tempX = new ArrayList<>();
            ArrayList<Short> tempY = new ArrayList<>();
            for (int k = 0; k < getProvince(i).getProvinceBordersLandByLand().get(j2).lPointsX.size(); k++) {
                tempX.add(Short.valueOf((short) (getProvince(i).getProvinceBordersLandByLand().get(j2).lPointsX.get(k).shortValue() * 1)));
                tempY.add(Short.valueOf((short) (getProvince(i).getProvinceBordersLandByLand().get(j2).lPointsY.get(k).shortValue() * 1)));
            }
            tempProvinceBorder.add(new Province_Border_GameData(getProvince(i).getProvinceBordersLandByLand().get(j2).getWithProvinceID(), tempX, tempY));
        }
        for (int j22 = 0; j22 < getProvince(i).getProvinceBordersLandBySeaSize(); j22++) {
            ArrayList<Short> tempX2 = new ArrayList<>();
            ArrayList<Short> tempY2 = new ArrayList<>();
            for (int k2 = 0; k2 < getProvince(i).getProvinceBordersLandBySea().get(j22).lPointsX.size(); k2++) {
                tempX2.add(Short.valueOf((short) (getProvince(i).getProvinceBordersLandBySea().get(j22).lPointsX.get(k2).shortValue() * 1)));
                tempY2.add(Short.valueOf((short) (getProvince(i).getProvinceBordersLandBySea().get(j22).lPointsY.get(k2).shortValue() * 1)));
            }
            tempProvinceBorder.add(new Province_Border_GameData(getProvince(i).getProvinceBordersLandBySea().get(j22).getWithProvinceID(), tempX2, tempY2));
        }
        for (int j23 = 0; j23 < getProvince(i).getProvinceBordersSeaBySeaSize(); j23++) {
            ArrayList<Short> tempX3 = new ArrayList<>();
            ArrayList<Short> tempY3 = new ArrayList<>();
            for (int k3 = 0; k3 < getProvince(i).getProvinceBordersSeaBySea().get(j23).lPointsX.size(); k3++) {
                tempX3.add(Short.valueOf((short) (getProvince(i).getProvinceBordersSeaBySea().get(j23).lPointsX.get(k3).shortValue() * 1)));
                tempY3.add(Short.valueOf((short) (getProvince(i).getProvinceBordersSeaBySea().get(j23).lPointsY.get(k3).shortValue() * 1)));
            }
            tempProvinceBorder.add(new Province_Border_GameData(getProvince(i).getProvinceBordersSeaBySea().get(j23).getWithProvinceID(), tempX3, tempY3));
        }
        if (tempProvinceBorder.size() == 0) {
            tempProvinceBorder = null;
        }
        ArrayList<Short> tempNeighboringProvinces = new ArrayList<>();
        ArrayList<Short> tempNeighboringSeaProvinces = new ArrayList<>();
        for (int j = 0; j < getProvince(i).getNeighboringProvincesSize(); j++) {
            tempNeighboringProvinces.add(Short.valueOf((short) getProvince(i).getNeighboringProvinces(j)));
        }
        for (int j4 = 0; j4 < getProvince(i).getNeighboringSeaProvincesSize(); j4++) {
            tempNeighboringSeaProvinces.add(Short.valueOf((short) getProvince(i).getNeighboringSeaProvinces(j4)));
        }
        if (getProvince(i).getLevelOfPort() > 0) {
            levelOfPort = 0;
        } else {
            levelOfPort = getProvince(i).getNeighboringSeaProvincesSize() > 0 ? 0 : getProvince(i).getLevelOfPort();
        }
        Province_GameData2 provinceData = new Province_GameData2(levelOfPort, tempPointsX, tempPointsY, tempProvinceBorder, tempNeighboringProvinces, tempNeighboringSeaProvinces);
        provinceData.provinceInfo.iContinentID = 1;
        provinceData.provinceInfo.fGrowthRate = 1.0f;
        OutputStream osProvince = null;
        try {
            Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).writeBytes(CFG.serialize(provinceData), false);
            if (osProvince != null) {
                try {
                    osProvince.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (osProvince != null) {
                try {
                    osProvince.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (osProvince != null) {
                try {
                    osProvince.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void convertProvincesArmyPositionToAnotherScale(int nScale) {
        if (nScale != CFG.map.getMapScale(CFG.map.getActiveMapID()) && nScale > 0) {
            for (int i = 0; i < getProvincesSize(); i++) {
                if (getProvince(i).getShiftX() != 0 || getProvince(i).getShiftY() != 0) {
                    int nX = (getProvince(i).getShiftX() * nScale) / CFG.map.getMapScale(CFG.map.getActiveMapID());
                    int nY = (getProvince(i).getShiftY() * nScale) / CFG.map.getMapScale(CFG.map.getActiveMapID());
                    try {
                        Province_GameData2 tData = (Province_GameData2) CFG.deserialize(Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).readBytes());
                        tData.provinceInfo.iShiftX = nX;
                        tData.provinceInfo.iShiftY = nY;
                        OutputStream osProvince = null;
                        try {
                            Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).writeBytes(CFG.serialize(tData), false);
                            if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex);
                                    }
                                }
                            }
                        } catch (IOException ex2) {
                            if (CFG.LOGS) {
                                CFG.exceptionStack(ex2);
                                if (osProvince != null) {
                                    try {
                                        osProvince.close();
                                    } catch (Exception ex3) {
                                        if (CFG.LOGS) {
                                            CFG.exceptionStack(ex3);
                                        }
                                    }
                                }
                            } else if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex4) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex4);
                                    }
                                }
                            }
                        } catch (Throwable th) {
                            if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex5) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex5);
                                    }
                                }
                            }
                            throw th;
                        }
                    } catch (ClassNotFoundException e) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e);
                        }
                    } catch (IOException e2) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e2);
                        }
                    } catch (GdxRuntimeException e3) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e3);
                        }
                    }
                }
            }
            CFG.toast.setInView(CFG.langManager.get("Done"));
        }
    }

    public final void convertProvincesPortPositionToAnotherScale(int nScale) {
        if (nScale != CFG.map.getMapScale(CFG.map.getActiveMapID()) && nScale > 0) {
            for (int i = 0; i < getProvincesSize(); i++) {
                if (getProvince(i).getPortShiftX() != 0 || getProvince(i).getPortShiftY() != 0) {
                    int nX = (getProvince(i).getPortShiftX() * nScale) / CFG.map.getMapScale(CFG.map.getActiveMapID());
                    int nY = (getProvince(i).getPortShiftY() * nScale) / CFG.map.getMapScale(CFG.map.getActiveMapID());
                    try {
                        Province_GameData2 tData = (Province_GameData2) CFG.deserialize(Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).readBytes());
                        tData.iPort_ShiftX = nX;
                        tData.iPort_ShiftY = nY;
                        OutputStream osProvince = null;
                        try {
                            Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/provinces/" + i).writeBytes(CFG.serialize(tData), false);
                            if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex);
                                    }
                                }
                            }
                        } catch (IOException ex2) {
                            if (CFG.LOGS) {
                                CFG.exceptionStack(ex2);
                                if (osProvince != null) {
                                    try {
                                        osProvince.close();
                                    } catch (Exception ex3) {
                                        if (CFG.LOGS) {
                                            CFG.exceptionStack(ex3);
                                        }
                                    }
                                }
                            } else if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex4) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex4);
                                    }
                                }
                            }
                        } catch (Throwable th) {
                            if (osProvince != null) {
                                try {
                                    osProvince.close();
                                } catch (Exception ex5) {
                                    if (CFG.LOGS) {
                                        CFG.exceptionStack(ex5);
                                    }
                                }
                            }
                            throw th;
                        }
                    } catch (ClassNotFoundException e) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e);
                        }
                    } catch (IOException e2) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e2);
                        }
                    } catch (GdxRuntimeException e3) {
                        if (CFG.LOGS) {
                            CFG.exceptionStack(e3);
                        }
                    }
                }
            }
            CFG.toast.setInView(CFG.langManager.get("Done"));
        }
    }

    public final void updateLevelOfPort() {
        for (int i = 0; i < getProvincesSize(); i++) {
            if (!getProvince(i).getSeaProvince()) {
                if (getProvince(i).getNeighboringSeaProvincesSize() > 0) {
                    getProvince(i).setLevelOfPort(1);
                } else {
                    getProvince(i).setLevelOfPort(-1);
                }
                buildGameProvinceData(i);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:23:0x0069  */
    /* JADX WARNING: Removed duplicated region for block: B:349:0x0039 A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void saveScenario() {
        /*
            r31 = this;
            java.lang.String r28 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_NAME
            if (r28 == 0) goto L_0x000c
            java.lang.String r28 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_NAME
            int r28 = r28.length()
            if (r28 != 0) goto L_0x0010
        L_0x000c:
            java.lang.String r28 = "NO NAME"
            age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_NAME = r28
        L_0x0010:
            java.lang.String r28 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_AUTHOR
            if (r28 == 0) goto L_0x001c
            java.lang.String r28 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_AUTHOR
            int r28 = r28.length()
            if (r28 != 0) goto L_0x0020
        L_0x001c:
            java.lang.String r28 = "Anonymous"
            age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_AUTHOR = r28
        L_0x0020:
            r10 = 1
        L_0x0021:
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game
            int r28 = r28.getCivsSize()
            r0 = r28
            if (r10 >= r0) goto L_0x0274
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Civilization r28 = r0.getCiv(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCapitalProvinceID()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            if (r28 < 0) goto L_0x003c
        L_0x0039:
            int r10 = r10 + 1
            goto L_0x0021
        L_0x003c:
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Civilization r28 = r0.getCiv(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getNumOfProvinces()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            if (r28 <= 0) goto L_0x006d
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Civilization r28 = r0.getCiv(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Game r29 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r29
            age.of.civilizations2.jakowski.lukasz.Civilization r29 = r0.getCiv(r10)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r30 = 0
            int r29 = r29.getProvinceID(r30)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28.setCapitalProvinceID(r29)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            goto L_0x0039
        L_0x0064:
            r3 = move-exception
        L_0x0065:
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0039
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0039
        L_0x006d:
            r23 = 1
            r12 = 0
        L_0x0070:
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r28 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData> r0 = r0.lProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r12 >= r0) goto L_0x00db
            r13 = 0
        L_0x0081:
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r28 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData> r0 = r0.lProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData r28 = (age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Civs_GameData> r0 = r0.lCores     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r13 >= r0) goto L_0x00d8
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r28 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData> r0 = r0.lProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData r28 = (age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Civs_GameData> r0 = r0.lCores     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Province_Cores_Civs_GameData r28 = (age.of.civilizations2.jakowski.lukasz.Province_Cores_Civs_GameData) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            int r0 = r0.iCivID     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            if (r0 == r10) goto L_0x00ca
            int r13 = r13 + 1
            goto L_0x0081
        L_0x00ca:
            r23 = 0
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r28 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Province_Cores_Provinces_GameData> r0 = r0.lProvinces     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r12 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
        L_0x00d8:
            int r12 = r12 + 1
            goto L_0x0070
        L_0x00db:
            r12 = 0
        L_0x00dc:
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getEventsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r12 >= r0) goto L_0x00f8
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r0 != r10) goto L_0x0106
            r23 = 0
        L_0x00f8:
            if (r23 == 0) goto L_0x0039
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r11 = r10 + -1
            r0 = r28
            r0.createScenarioRemoveCivilization(r10)     // Catch:{ IndexOutOfBoundsException -> 0x07f1 }
            r10 = r11
            goto L_0x0039
        L_0x0106:
            r13 = 0
        L_0x0107:
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Decision> r0 = r0.lDecisions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r13 >= r0) goto L_0x01bb
            r14 = 0
        L_0x011e:
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Decision> r0 = r0.lDecisions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Decision r28 = (age.of.civilizations2.jakowski.lukasz.Event_Decision) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Outcome> r0 = r0.lOutcomes     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r14 >= r0) goto L_0x01b7
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Decision> r0 = r0.lDecisions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Decision r28 = (age.of.civilizations2.jakowski.lukasz.Event_Decision) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Outcome> r0 = r0.lOutcomes     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Outcome r28 = (age.of.civilizations2.jakowski.lukasz.Event_Outcome) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r0 == r10) goto L_0x019d
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Decision> r0 = r0.lDecisions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Decision r28 = (age.of.civilizations2.jakowski.lukasz.Event_Decision) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Outcome> r0 = r0.lOutcomes     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Outcome r28 = (age.of.civilizations2.jakowski.lukasz.Event_Outcome) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCivID2()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r0 == r10) goto L_0x019d
            int r14 = r14 + 1
            goto L_0x011e
        L_0x019d:
            r23 = 0
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Decision> r0 = r0.lDecisions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r13 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r12 = r28.getEventsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
        L_0x01b7:
            int r13 = r13 + 1
            goto L_0x0107
        L_0x01bb:
            r13 = 0
        L_0x01bc:
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Trigger> r0 = r0.lTriggers     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r13 >= r0) goto L_0x0270
            r14 = 0
        L_0x01d3:
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Trigger> r0 = r0.lTriggers     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Trigger r28 = (age.of.civilizations2.jakowski.lukasz.Event_Trigger) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Conditions> r0 = r0.lConditions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r28 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r14 >= r0) goto L_0x026c
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Trigger> r0 = r0.lTriggers     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Trigger r28 = (age.of.civilizations2.jakowski.lukasz.Event_Trigger) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Conditions> r0 = r0.lConditions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Conditions r28 = (age.of.civilizations2.jakowski.lukasz.Event_Conditions) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCivID()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r0 == r10) goto L_0x0252
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Trigger> r0 = r0.lTriggers     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r13)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Trigger r28 = (age.of.civilizations2.jakowski.lukasz.Event_Trigger) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Conditions> r0 = r0.lConditions     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            r0 = r28
            java.lang.Object r28 = r0.get(r14)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.Event_Conditions r28 = (age.of.civilizations2.jakowski.lukasz.Event_Conditions) r28     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r28 = r28.getCivID2()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            if (r0 == r10) goto L_0x0252
            int r14 = r14 + 1
            goto L_0x01d3
        L_0x0252:
            r23 = 0
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Event_GameData r28 = r0.getEvent(r12)     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r0 = r28
            java.util.List<age.of.civilizations2.jakowski.lukasz.Event_Trigger> r0 = r0.lTriggers     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            r28 = r0
            int r13 = r28.size()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
            int r12 = r28.getEventsSize()     // Catch:{ IndexOutOfBoundsException -> 0x0064 }
        L_0x026c:
            int r13 = r13 + 1
            goto L_0x01bc
        L_0x0270:
            int r12 = r12 + 1
            goto L_0x00dc
        L_0x0274:
            r15 = 0
            age.of.civilizations2.jakowski.lukasz.Scenario_GameData r25 = new age.of.civilizations2.jakowski.lukasz.Scenario_GameData     // Catch:{ IOException -> 0x03fc }
            r25.<init>()     // Catch:{ IOException -> 0x03fc }
            r25.buildData()     // Catch:{ IOException -> 0x03fc }
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x03fc }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x03fc }
            r29.<init>()     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x03fc }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x03fc }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x03fc }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x03fc }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x03fc }
            com.badlogic.gdx.files.FileHandle r4 = r28.local(r29)     // Catch:{ IOException -> 0x03fc }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r25)     // Catch:{ IOException -> 0x03fc }
            r29 = 0
            r0 = r28
            r1 = r29
            r4.writeBytes(r0, r1)     // Catch:{ IOException -> 0x03fc }
            if (r15 == 0) goto L_0x02c6
            r15.close()     // Catch:{ Exception -> 0x03f2 }
        L_0x02c6:
            r20 = 0
            age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Province2 r2 = new age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Province2     // Catch:{ IOException -> 0x042f }
            r2.<init>()     // Catch:{ IOException -> 0x042f }
            r2.buildProvinceOwners()     // Catch:{ IOException -> 0x042f }
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x042f }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x042f }
            r29.<init>()     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x042f }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x042f }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x042f }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r30 = "_PD"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x042f }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x042f }
            com.badlogic.gdx.files.FileHandle r7 = r28.local(r29)     // Catch:{ IOException -> 0x042f }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r2)     // Catch:{ IOException -> 0x042f }
            r29 = 0
            r0 = r28
            r1 = r29
            r7.writeBytes(r0, r1)     // Catch:{ IOException -> 0x042f }
            if (r20 == 0) goto L_0x031f
            r20.close()     // Catch:{ Exception -> 0x0425 }
        L_0x031f:
            r17 = 0
            age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Diplomacy2 r25 = new age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Diplomacy2     // Catch:{ IOException -> 0x0462 }
            r25.<init>()     // Catch:{ IOException -> 0x0462 }
            r25.buildData()     // Catch:{ IOException -> 0x0462 }
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x0462 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x0462 }
            r29.<init>()     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x0462 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0462 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0462 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r30 = "_D"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0462 }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x0462 }
            com.badlogic.gdx.files.FileHandle r4 = r28.local(r29)     // Catch:{ IOException -> 0x0462 }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r25)     // Catch:{ IOException -> 0x0462 }
            r29 = 0
            r0 = r28
            r1 = r29
            r4.writeBytes(r0, r1)     // Catch:{ IOException -> 0x0462 }
            if (r17 == 0) goto L_0x0378
            r17.close()     // Catch:{ Exception -> 0x0458 }
        L_0x0378:
            r19 = 0
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x0495 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x0495 }
            r29.<init>()     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x0495 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0495 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0495 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r30 = "_HRE"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0495 }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x0495 }
            com.badlogic.gdx.files.FileHandle r7 = r28.local(r29)     // Catch:{ IOException -> 0x0495 }
            age.of.civilizations2.jakowski.lukasz.HolyRomanEmpire_Manager r28 = age.of.civilizations2.jakowski.lukasz.CFG.holyRomanEmpire_Manager     // Catch:{ IOException -> 0x0495 }
            age.of.civilizations2.jakowski.lukasz.HolyRomanEmpire_GameData r28 = r28.getHRE()     // Catch:{ IOException -> 0x0495 }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r28)     // Catch:{ IOException -> 0x0495 }
            r29 = 0
            r0 = r28
            r1 = r29
            r7.writeBytes(r0, r1)     // Catch:{ IOException -> 0x0495 }
            if (r20 == 0) goto L_0x03cf
            r19.close()     // Catch:{ Exception -> 0x048b }
        L_0x03cf:
            r21 = 0
            java.util.ArrayList r24 = new java.util.ArrayList     // Catch:{ IOException -> 0x04cb }
            r24.<init>()     // Catch:{ IOException -> 0x04cb }
            r10 = 0
        L_0x03d7:
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IOException -> 0x04cb }
            int r28 = r28.getProvincesSize()     // Catch:{ IOException -> 0x04cb }
            r0 = r28
            if (r10 >= r0) goto L_0x066d
            age.of.civilizations2.jakowski.lukasz.Game r28 = age.of.civilizations2.jakowski.lukasz.CFG.game     // Catch:{ IOException -> 0x04cb }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Province r28 = r0.getProvince(r10)     // Catch:{ IOException -> 0x04cb }
            int r28 = r28.getWasteland()     // Catch:{ IOException -> 0x04cb }
            if (r28 >= 0) goto L_0x04be
        L_0x03ef:
            int r10 = r10 + 1
            goto L_0x03d7
        L_0x03f2:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x02c6
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x02c6
        L_0x03fc:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0415 }
            if (r28 == 0) goto L_0x0404
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x0415 }
        L_0x0404:
            if (r15 == 0) goto L_0x02c6
            r15.close()     // Catch:{ Exception -> 0x040b }
            goto L_0x02c6
        L_0x040b:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x02c6
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x02c6
        L_0x0415:
            r28 = move-exception
            if (r15 == 0) goto L_0x041b
            r15.close()     // Catch:{ Exception -> 0x041c }
        L_0x041b:
            throw r28
        L_0x041c:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x041b
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x041b
        L_0x0425:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x031f
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x031f
        L_0x042f:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0448 }
            if (r28 == 0) goto L_0x0437
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x0448 }
        L_0x0437:
            if (r20 == 0) goto L_0x031f
            r20.close()     // Catch:{ Exception -> 0x043e }
            goto L_0x031f
        L_0x043e:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x031f
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x031f
        L_0x0448:
            r28 = move-exception
            if (r20 == 0) goto L_0x044e
            r20.close()     // Catch:{ Exception -> 0x044f }
        L_0x044e:
            throw r28
        L_0x044f:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x044e
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x044e
        L_0x0458:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0378
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0378
        L_0x0462:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x047b }
            if (r28 == 0) goto L_0x046a
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x047b }
        L_0x046a:
            if (r17 == 0) goto L_0x0378
            r17.close()     // Catch:{ Exception -> 0x0471 }
            goto L_0x0378
        L_0x0471:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0378
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0378
        L_0x047b:
            r28 = move-exception
            if (r17 == 0) goto L_0x0481
            r17.close()     // Catch:{ Exception -> 0x0482 }
        L_0x0481:
            throw r28
        L_0x0482:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x0481
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0481
        L_0x048b:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x03cf
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x03cf
        L_0x0495:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x04ae }
            if (r28 == 0) goto L_0x049d
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x04ae }
        L_0x049d:
            if (r20 == 0) goto L_0x03cf
            r19.close()     // Catch:{ Exception -> 0x04a4 }
            goto L_0x03cf
        L_0x04a4:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x03cf
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x03cf
        L_0x04ae:
            r28 = move-exception
            if (r20 == 0) goto L_0x04b4
            r19.close()     // Catch:{ Exception -> 0x04b5 }
        L_0x04b4:
            throw r28
        L_0x04b5:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x04b4
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x04b4
        L_0x04be:
            java.lang.Integer r28 = java.lang.Integer.valueOf(r10)     // Catch:{ IOException -> 0x04cb }
            r0 = r24
            r1 = r28
            r0.add(r1)     // Catch:{ IOException -> 0x04cb }
            goto L_0x03ef
        L_0x04cb:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x06db }
            if (r28 == 0) goto L_0x04d3
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x06db }
        L_0x04d3:
            if (r21 == 0) goto L_0x04d8
            r21.close()     // Catch:{ Exception -> 0x06d1 }
        L_0x04d8:
            r16 = 0
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x06f5 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x06f5 }
            r29.<init>()     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x06f5 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x06f5 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x06f5 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r30 = "_C"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x06f5 }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x06f5 }
            com.badlogic.gdx.files.FileHandle r5 = r28.local(r29)     // Catch:{ IOException -> 0x06f5 }
            age.of.civilizations2.jakowski.lukasz.Province_Cores_GameData r28 = age.of.civilizations2.jakowski.lukasz.CFG.province_Cores_GameData     // Catch:{ IOException -> 0x06f5 }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r28)     // Catch:{ IOException -> 0x06f5 }
            r29 = 0
            r0 = r28
            r1 = r29
            r5.writeBytes(r0, r1)     // Catch:{ IOException -> 0x06f5 }
            if (r16 == 0) goto L_0x052b
            r16.close()     // Catch:{ Exception -> 0x06eb }
        L_0x052b:
            r18 = 0
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x0728 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x0728 }
            r29.<init>()     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x0728 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0728 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = "/events/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x0728 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r30 = "_E"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x0728 }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x0728 }
            com.badlogic.gdx.files.FileHandle r6 = r28.local(r29)     // Catch:{ IOException -> 0x0728 }
            age.of.civilizations2.jakowski.lukasz.EventsManager r28 = age.of.civilizations2.jakowski.lukasz.CFG.eventsManager     // Catch:{ IOException -> 0x0728 }
            r0 = r28
            age.of.civilizations2.jakowski.lukasz.Events_GameData r0 = r0.eventsGD     // Catch:{ IOException -> 0x0728 }
            r28 = r0
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r28)     // Catch:{ IOException -> 0x0728 }
            r29 = 0
            r0 = r28
            r1 = r29
            r6.writeBytes(r0, r1)     // Catch:{ IOException -> 0x0728 }
            if (r18 == 0) goto L_0x0584
            r18.close()     // Catch:{ Exception -> 0x071e }
        L_0x0584:
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.readLocalFiles()     // Catch:{ GdxRuntimeException -> 0x0778 }
            if (r28 == 0) goto L_0x0751
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0778 }
            r29.<init>()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "scenarios/Age_of_Civilizations"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r29 = r29.toString()     // Catch:{ GdxRuntimeException -> 0x0778 }
            com.badlogic.gdx.files.FileHandle r4 = r28.local(r29)     // Catch:{ GdxRuntimeException -> 0x0778 }
        L_0x05af:
            java.lang.String r27 = r4.readString()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r28 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ GdxRuntimeException -> 0x0778 }
            int r28 = r27.indexOf(r28)     // Catch:{ GdxRuntimeException -> 0x0778 }
            if (r28 >= 0) goto L_0x0606
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0778 }
            r29.<init>()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "scenarios/Age_of_Civilizations"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r29 = r29.toString()     // Catch:{ GdxRuntimeException -> 0x0778 }
            com.badlogic.gdx.files.FileHandle r8 = r28.local(r29)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r28 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0778 }
            r28.<init>()     // Catch:{ GdxRuntimeException -> 0x0778 }
            r0 = r28
            r1 = r27
            java.lang.StringBuilder r28 = r0.append(r1)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r29 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r28 = r28.append(r29)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r29 = ";"
            java.lang.StringBuilder r28 = r28.append(r29)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r28 = r28.toString()     // Catch:{ GdxRuntimeException -> 0x0778 }
            r29 = 0
            r0 = r28
            r1 = r29
            r8.writeString(r0, r1)     // Catch:{ GdxRuntimeException -> 0x0778 }
        L_0x0606:
            r31.checkArmies()     // Catch:{ IOException -> 0x07c8 }
            age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Armies r26 = new age.of.civilizations2.jakowski.lukasz.Scenario_GameData_Armies     // Catch:{ IOException -> 0x07c8 }
            r26.<init>()     // Catch:{ IOException -> 0x07c8 }
            r26.buildData()     // Catch:{ IOException -> 0x07c8 }
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x07c8 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x07c8 }
            r29.<init>()     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x07c8 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x07c8 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x07c8 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r30 = "_A"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x07c8 }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x07c8 }
            com.badlogic.gdx.files.FileHandle r4 = r28.local(r29)     // Catch:{ IOException -> 0x07c8 }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r26)     // Catch:{ IOException -> 0x07c8 }
            r29 = 0
            r0 = r28
            r1 = r29
            r4.writeBytes(r0, r1)     // Catch:{ IOException -> 0x07c8 }
            if (r15 == 0) goto L_0x0660
            r15.close()     // Catch:{ Exception -> 0x07be }
        L_0x0660:
            r31.saveScenario_Info()
            age.of.civilizations2.jakowski.lukasz.Game_Scenarios r28 = r31.getGameScenarios()
            r29 = 0
            r28.loadGame_Scenarios(r29)
            return
        L_0x066d:
            age.of.civilizations2.jakowski.lukasz.Scenario_WastelandProvinces_GameData r22 = new age.of.civilizations2.jakowski.lukasz.Scenario_WastelandProvinces_GameData     // Catch:{ IOException -> 0x04cb }
            r0 = r22
            r1 = r24
            r0.<init>(r1)     // Catch:{ IOException -> 0x04cb }
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ IOException -> 0x04cb }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ IOException -> 0x04cb }
            r29.<init>()     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ IOException -> 0x04cb }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = "scenarios/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x04cb }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = "/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG     // Catch:{ IOException -> 0x04cb }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r30 = "_W"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ IOException -> 0x04cb }
            java.lang.String r29 = r29.toString()     // Catch:{ IOException -> 0x04cb }
            com.badlogic.gdx.files.FileHandle r9 = r28.local(r29)     // Catch:{ IOException -> 0x04cb }
            byte[] r28 = age.of.civilizations2.jakowski.lukasz.CFG.serialize(r22)     // Catch:{ IOException -> 0x04cb }
            r29 = 0
            r0 = r28
            r1 = r29
            r9.writeBytes(r0, r1)     // Catch:{ IOException -> 0x04cb }
            if (r21 == 0) goto L_0x04d8
            r21.close()     // Catch:{ Exception -> 0x06c7 }
            goto L_0x04d8
        L_0x06c7:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x04d8
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x04d8
        L_0x06d1:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x04d8
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x04d8
        L_0x06db:
            r28 = move-exception
            if (r21 == 0) goto L_0x06e1
            r21.close()     // Catch:{ Exception -> 0x06e2 }
        L_0x06e1:
            throw r28
        L_0x06e2:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x06e1
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x06e1
        L_0x06eb:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x052b
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x052b
        L_0x06f5:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x070e }
            if (r28 == 0) goto L_0x06fd
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x070e }
        L_0x06fd:
            if (r16 == 0) goto L_0x052b
            r16.close()     // Catch:{ Exception -> 0x0704 }
            goto L_0x052b
        L_0x0704:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x052b
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x052b
        L_0x070e:
            r28 = move-exception
            if (r16 == 0) goto L_0x0714
            r16.close()     // Catch:{ Exception -> 0x0715 }
        L_0x0714:
            throw r28
        L_0x0715:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x0714
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0714
        L_0x071e:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0584
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0584
        L_0x0728:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x0741 }
            if (r28 == 0) goto L_0x0730
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x0741 }
        L_0x0730:
            if (r18 == 0) goto L_0x0584
            r18.close()     // Catch:{ Exception -> 0x0737 }
            goto L_0x0584
        L_0x0737:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0584
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0584
        L_0x0741:
            r28 = move-exception
            if (r18 == 0) goto L_0x0747
            r18.close()     // Catch:{ Exception -> 0x0748 }
        L_0x0747:
            throw r28
        L_0x0748:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x0747
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0747
        L_0x0751:
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = new java.lang.StringBuilder     // Catch:{ GdxRuntimeException -> 0x0778 }
            r29.<init>()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = r30.getFile_ActiveMap_Path()     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r30 = "scenarios/Age_of_Civilizations"
            java.lang.StringBuilder r29 = r29.append(r30)     // Catch:{ GdxRuntimeException -> 0x0778 }
            java.lang.String r29 = r29.toString()     // Catch:{ GdxRuntimeException -> 0x0778 }
            com.badlogic.gdx.files.FileHandle r4 = r28.internal(r29)     // Catch:{ GdxRuntimeException -> 0x0778 }
            goto L_0x05af
        L_0x0778:
            r3 = move-exception
            com.badlogic.gdx.Files r28 = com.badlogic.gdx.Gdx.files
            java.lang.StringBuilder r29 = new java.lang.StringBuilder
            r29.<init>()
            java.lang.String r30 = "map/"
            java.lang.StringBuilder r29 = r29.append(r30)
            age.of.civilizations2.jakowski.lukasz.Map r30 = age.of.civilizations2.jakowski.lukasz.CFG.map
            java.lang.String r30 = r30.getFile_ActiveMap_Path()
            java.lang.StringBuilder r29 = r29.append(r30)
            java.lang.String r30 = "scenarios/Age_of_Civilizations"
            java.lang.StringBuilder r29 = r29.append(r30)
            java.lang.String r29 = r29.toString()
            com.badlogic.gdx.files.FileHandle r8 = r28.local(r29)
            java.lang.StringBuilder r28 = new java.lang.StringBuilder
            r28.<init>()
            java.lang.String r29 = age.of.civilizations2.jakowski.lukasz.CFG.CREATE_SCENARIO_GAME_DATA_TAG
            java.lang.StringBuilder r28 = r28.append(r29)
            java.lang.String r29 = ";"
            java.lang.StringBuilder r28 = r28.append(r29)
            java.lang.String r28 = r28.toString()
            r29 = 0
            r0 = r28
            r1 = r29
            r8.writeString(r0, r1)
            goto L_0x0606
        L_0x07be:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0660
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0660
        L_0x07c8:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS     // Catch:{ all -> 0x07e1 }
            if (r28 == 0) goto L_0x07d0
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)     // Catch:{ all -> 0x07e1 }
        L_0x07d0:
            if (r15 == 0) goto L_0x0660
            r15.close()     // Catch:{ Exception -> 0x07d7 }
            goto L_0x0660
        L_0x07d7:
            r3 = move-exception
            boolean r28 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r28 == 0) goto L_0x0660
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x0660
        L_0x07e1:
            r28 = move-exception
            if (r15 == 0) goto L_0x07e7
            r15.close()     // Catch:{ Exception -> 0x07e8 }
        L_0x07e7:
            throw r28
        L_0x07e8:
            r3 = move-exception
            boolean r29 = age.of.civilizations2.jakowski.lukasz.CFG.LOGS
            if (r29 == 0) goto L_0x07e7
            age.of.civilizations2.jakowski.lukasz.CFG.exceptionStack(r3)
            goto L_0x07e7
        L_0x07f1:
            r3 = move-exception
            r10 = r11
            goto L_0x0065
        */
        throw new UnsupportedOperationException("Method not decompiled: age.of.civilizations2.jakowski.lukasz.Game.saveScenario():void");
    }

    public final void saveScenario_Info() {
        CFG.ConfigScenarioInfo configData = new CFG.ConfigScenarioInfo();
        configData.Age_of_Civilizations = "Data";
        new ArrayList();
        ArrayList<CFG.Data_Scenario_Info> dataList = new ArrayList<>();
        int tNumOfCivs = 0;
        for (int i = 1; i < CFG.game.getCivsSize(); i++) {
            if (CFG.game.getCiv(i).getNumOfProvinces() > 0) {
                tNumOfCivs++;
            }
        }
        CFG.Data_Scenario_Info nDataTag = new CFG.Data_Scenario_Info();
        nDataTag.Name = CFG.CREATE_SCENARIO_NAME;
        nDataTag.Civs = tNumOfCivs;
        nDataTag.Author = CFG.CREATE_SCENARIO_AUTHOR;
        nDataTag.Wiki = CFG.CREATE_SCENARIO_WIKI;
        nDataTag.Age = CFG.gameAges.getAgeOfYear(Game_Calendar.currentYear);
        nDataTag.Year = Game_Calendar.currentYear;
        nDataTag.Month = Game_Calendar.currentMonth;
        nDataTag.Day = Game_Calendar.currentDay;
        dataList.add(nDataTag);
        configData.Data_Scenario_Info = dataList;
        Json jsonSave = new Json();
        jsonSave.setOutputType(JsonWriter.OutputType.json);
        jsonSave.setElementType(CFG.ConfigScenarioInfo.class, "Data_Scenario_Info", CFG.Data_Scenario_Info.class);
        Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + CFG.FILE_GAME_SCENARIOS_PATH + CFG.CREATE_SCENARIO_GAME_DATA_TAG + "/" + CFG.CREATE_SCENARIO_GAME_DATA_TAG + "_INFO.json").writeString(jsonSave.prettyPrint((Object) configData), false);
    }

    public final void saveAlliancesNamesPackage() {
        OutputStream os = null;
        try {
            Gdx.files.local("game/alliance_names/" + CFG.CREATE_PACKAGE_ALLIANCE_NAMES_GAME_DATA_TAG).writeBytes(CFG.serialize(CFG.editorAlliancesNames_GameData), false);
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
        try {
            String fileContent = Gdx.files.internal("game/alliance_names/Age_of_Civilizations.json").readString();
            Json json = new Json();
            json.setElementType(CFG.ConfigAlliancesData.class, "Data_Random_Alliance_Names", CFG.Data_Random_Alliance_Names.class);
            new CFG.ConfigAlliancesData();
            CFG.ConfigAlliancesData data = (CFG.ConfigAlliancesData) json.fromJson(CFG.ConfigAlliancesData.class, fileContent);
            Iterator it = data.Data_Random_Alliance_Names.iterator();
            while (it.hasNext()) {
                if (((CFG.Data_Random_Alliance_Names) it.next()).Tag.equals(CFG.CREATE_PACKAGE_ALLIANCE_NAMES_GAME_DATA_TAG)) {
                    return;
                }
            }
            CFG.ConfigAlliancesData configData = new CFG.ConfigAlliancesData();
            configData.Age_of_Civilizations = "Data";
            new ArrayList();
            ArrayList dataList = data.Data_Random_Alliance_Names;
            CFG.Data_Random_Alliance_Names nDataTag = new CFG.Data_Random_Alliance_Names();
            nDataTag.Tag = CFG.CREATE_PACKAGE_ALLIANCE_NAMES_GAME_DATA_TAG;
            nDataTag.Enabled = true;
            dataList.add(nDataTag);
            configData.Data_Random_Alliance_Names = dataList;
            Json jsonSave = new Json();
            jsonSave.setOutputType(JsonWriter.OutputType.json);
            jsonSave.setElementType(CFG.ConfigAlliancesData.class, "Data_Random_Alliance_Names", CFG.Data_Random_Alliance_Names.class);
            Gdx.files.local("game/alliance_names/Age_of_Civilizations.json").writeString(jsonSave.prettyPrint((Object) configData), false);
        } catch (GdxRuntimeException e) {
            CFG.ConfigAlliancesData configData2 = new CFG.ConfigAlliancesData();
            configData2.Age_of_Civilizations = "Data";
            new ArrayList();
            ArrayList<CFG.Data_Random_Alliance_Names> dataList2 = new ArrayList<>();
            CFG.Data_Random_Alliance_Names nDataTag2 = new CFG.Data_Random_Alliance_Names();
            nDataTag2.Tag = CFG.CREATE_PACKAGE_ALLIANCE_NAMES_GAME_DATA_TAG;
            nDataTag2.Enabled = true;
            dataList2.add(nDataTag2);
            configData2.Data_Random_Alliance_Names = dataList2;
            Json jsonSave2 = new Json();
            jsonSave2.setOutputType(JsonWriter.OutputType.json);
            jsonSave2.setElementType(CFG.ConfigAlliancesData.class, "Data_Random_Alliance_Names", CFG.Data_Random_Alliance_Names.class);
            Gdx.files.local("game/alliance_names/Age_of_Civilizations.json").writeString(jsonSave2.prettyPrint((Object) configData2), false);
        }
    }

    public final void saveContinentPackage() {
        OutputStream os = null;
        try {
            Gdx.files.local("map/data/continents/packges/" + CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG).writeBytes(CFG.serialize(CFG.editor_Package_ContinentsData), false);
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void saveContinentPackagesData() {
        OutputStream os = null;
        try {
            Gdx.files.local("map/data/continents/packges_data/" + CFG.EDITOR_ACTIVE_GAMEDATA_TAG).writeBytes(CFG.serialize(CFG.editor_Continent_GameData), false);
            try {
                String tempTags = Gdx.files.internal("map/data/continents/packges_data/Age_of_Civilizations").readString();
                if (tempTags.indexOf(CFG.EDITOR_ACTIVE_GAMEDATA_TAG) < 0) {
                    Gdx.files.local("map/data/continents/packges_data/Age_of_Civilizations").writeString(tempTags + CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
                }
            } catch (GdxRuntimeException e) {
                Gdx.files.local("map/data/continents/packges_data/Age_of_Civilizations").writeString(CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void saveRegionPackage() {
        OutputStream os = null;
        try {
            Gdx.files.local("map/data/regions/packges/" + CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG).writeBytes(CFG.serialize(CFG.editor_Package_RegionsData), false);
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void saveRegionPackagesData() {
        OutputStream os = null;
        try {
            Gdx.files.local("map/data/regions/packges_data/" + CFG.EDITOR_ACTIVE_GAMEDATA_TAG).writeBytes(CFG.serialize(CFG.editor_Region_GameData), false);
            try {
                String tempTags = Gdx.files.internal("map/data/regions/packges_data/Age_of_Civilizations").readString();
                if (tempTags.indexOf(CFG.EDITOR_ACTIVE_GAMEDATA_TAG) < 0) {
                    Gdx.files.local("map/data/regions/packges_data/Age_of_Civilizations").writeString(tempTags + CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
                }
            } catch (GdxRuntimeException e) {
                Gdx.files.local("map/data/regions/packges_data/Age_of_Civilizations").writeString(CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void saveLinesData() {
        OutputStream os = null;
        try {
            Gdx.files.local("game/lines/" + CFG.editorLine_GameData.getImageName()).writeBytes(CFG.serialize(CFG.editorLine_GameData), false);
            try {
                String tempTags = Gdx.files.internal("game/lines/Age_of_Civilizations").readString();
                if (tempTags.indexOf(CFG.editorLine_GameData.getImageName()) < 0) {
                    Gdx.files.local("game/lines/Age_of_Civilizations").writeString(tempTags + CFG.editorLine_GameData.getImageName() + ";", false);
                }
            } catch (GdxRuntimeException e) {
                Gdx.files.local("game/lines/Age_of_Civilizations").writeString(CFG.editorLine_GameData.getImageName() + ";", false);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final void saveDiplomacyColors() {
        OutputStream os = null;
        try {
            Gdx.files.local("game/diplomacy_colors/packages/" + CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG).writeBytes(CFG.serialize(CFG.diplomacyColors_GameData), false);
            try {
                String tempTags = Gdx.files.internal("game/diplomacy_colors/packages/Age_of_Civilizations").readString();
                if (tempTags.indexOf(CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG) < 0) {
                    Gdx.files.local("game/diplomacy_colors/packages/Age_of_Civilizations").writeString(tempTags + CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG + ";", false);
                }
            } catch (GdxRuntimeException e) {
                Gdx.files.local("game/diplomacy_colors/packages/Age_of_Civilizations").writeString(CFG.CREATE_PACKAGE_CONTINENT_GAME_DATA_TAG + ";", false);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
        CFG.toast.setInView(CFG.langManager.get("Saved"));
    }

    public final void saveCity() {
        OutputStream os = null;
        try {
            FileHandle fileData = Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/" + CFG.EDITOR_ACTIVE_GAMEDATA_TAG);
            CFG.editorCity.setCityLevel(CFG.getEditorCityLevel_Ref(CFG.editorCity.getCityLevel()));
            fileData.writeBytes(CFG.serialize(CFG.editorCity), false);
            try {
                String tempTags = (CFG.readLocalFiles() ? Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/Age_of_Civilizations") : Gdx.files.internal(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/Age_of_Civilizations")).readString();
                if (tempTags.indexOf(CFG.EDITOR_ACTIVE_GAMEDATA_TAG) < 0) {
                    Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/Age_of_Civilizations").writeString(tempTags + CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
                }
            } catch (GdxRuntimeException e) {
                Gdx.files.local(CFG.FILE_MAP_PATH + CFG.map.getFile_ActiveMap_Path() + "data/cities/Age_of_Civilizations").writeString(CFG.EDITOR_ACTIVE_GAMEDATA_TAG + ";", false);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex);
                    }
                }
            }
        } catch (IOException ex2) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex2);
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex3) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex3);
                    }
                }
            }
        } catch (Throwable th) {
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex4) {
                    if (CFG.LOGS) {
                        CFG.exceptionStack(ex4);
                    }
                }
            }
            throw th;
        }
    }

    public final int getProvinceArmy(int nProvinceID) {
        int out = 0;
        for (int i = 0; i < getProvince(nProvinceID).getCivsSize(); i++) {
            out += getProvince(nProvinceID).getArmy(i);
        }
        return out;
    }

    public final int getProvinceValue(int nProvinceID) {
        return 1 + getProvinceValue_Terrain(nProvinceID) + getProvinceValue_Capital(nProvinceID) + getProvinceValue_PopulationGrowthRate(nProvinceID) + getProvinceValue_DevelopmentLevel(nProvinceID);
    }

    public final int getProvinceValue_Terrain(int nProvinceID) {
        return CFG.terrainTypesManager.getBaseProvinceValue(getProvince(nProvinceID).getTerrainTypeID());
    }

    public final int getProvinceValue_Capital(int nProvinceID) {
        return getProvince(nProvinceID).getIsCapital() ? 2 : 0;
    }

    public final int getProvinceValue_PopulationGrowthRate(int nProvinceID) {
        return (int) (getProvince(nProvinceID).getGrowthRate_Population_WithFarm() * 6.0f);
    }

    public final int getProvinceValue_DevelopmentLevel(int nProvinceID) {
        return (int) (getProvince(nProvinceID).getDevelopmentLevel() * 4.0f);
    }

    public final Province getProvince(int ID) {
        return this.lProvinces.get(ID);
    }

    public final int getProvincesSize() {
        return this.iProvincesSize;
    }

    public final int countLandProvinces_NotWasteland() {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (!getProvince(i).getSeaProvince() && getProvince(i).getWasteland() < 0) {
                out++;
            }
        }
        return out;
    }

    public final int countLandProvinces() {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (!getProvince(i).getSeaProvince()) {
                out++;
            }
        }
        return out;
    }

    public final int countSeaProvinces() {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (getProvince(i).getSeaProvince()) {
                out++;
            }
        }
        return out;
    }

    public final String countAvarageGrowthRate() {
        float out = CFG.DEFAULT_RESEARACH_LEVEL;
        int outSize = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (!getProvince(i).getSeaProvince()) {
                out += getProvince(i).getGrowthRate_Population_WithFarm();
                outSize++;
            }
        }
        return "" + ((int) ((100.0f * out) / ((float) outSize)));
    }

    public final String countAvarageGrowthRate(int nCivID) {
        float out = CFG.DEFAULT_RESEARACH_LEVEL;
        int outSize = 0;
        for (int i = 0; i < CFG.game.getCiv(nCivID).getNumOfProvinces(); i++) {
            out += CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i)).getGrowthRate_Population_WithFarm();
            outSize++;
        }
        return "" + ((int) ((100.0f * out) / ((float) outSize)));
    }

    public final int countContinentProvinces(int nContinentID) {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (getProvince(i).getContinent() == nContinentID) {
                out++;
            }
        }
        return out;
    }

    public final int countRegionProvinces(int nRegionID) {
        int out = 0;
        for (int i = 0; i < getProvincesSize(); i++) {
            if (!getProvince(i).getSeaProvince() && getProvince(i).getRegion() == nRegionID) {
                out++;
            }
        }
        return out;
    }

    public final String countAvarageDevelopmentLevel(int nCivID) {
        float out = CFG.DEFAULT_RESEARACH_LEVEL;
        int outSize = 0;
        for (int i = 0; i < getCiv(nCivID).getNumOfProvinces(); i++) {
            out += getProvince(getCiv(nCivID).getProvinceID(i)).getDevelopmentLevel();
            outSize++;
        }
        return CFG.getPercentage(out, (float) outSize, 4);
    }

    public final float countAvarageDevelopmentLevel_Float(int nCivID) {
        float out = CFG.DEFAULT_RESEARACH_LEVEL;
        int outSize = 0;
        for (int i = 0; i < getCiv(nCivID).getNumOfProvinces(); i++) {
            out += getProvince(getCiv(nCivID).getProvinceID(i)).getDevelopmentLevel();
            outSize++;
        }
        CFG.game.getCiv(nCivID).fAverageDevelopment = out / ((float) outSize);
        return CFG.game.getCiv(nCivID).fAverageDevelopment;
    }

    public final MenuElement_Hover_v2 getHover_CapitalCity(int nCivID) {
        ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
        ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
        if ((CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCitiesSize() > 0 ? CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCity(0).getCityName() : CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getName()).length() > 0) {
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCitiesSize() > 0 ? CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCity(0).getCityName() : CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCivID(), CFG.PADDING, CFG.PADDING));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Capital"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
        } else {
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCivID()).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getCivID(), CFG.PADDING, CFG.PADDING));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Capital"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
        }
        nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("ProvincePopulation") + ": "));
        nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + CFG.game.getProvince(CFG.game.getCiv(nCivID).getCapitalProvinceID()).getPopulationData().getPopulation()), CFG.COLOR_TEXT_POPULATION));
        nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, 0));
        nElements.add(new MenuElement_Hover_v2_Element2(nData));
        nData.clear();
        return new MenuElement_Hover_v2(nElements);
    }

    public final MenuElement_Hover_v2 getHover_CapitalCity_ByProvinceID(int nProvinceID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            if ((CFG.game.getProvince(nProvinceID).getCitiesSize() > 0 ? CFG.game.getProvince(nProvinceID).getCity(0).getCityName() : CFG.game.getProvince(nProvinceID).getName()).length() > 0) {
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getProvince(nProvinceID).getCitiesSize() > 0 ? CFG.game.getProvince(nProvinceID).getCity(0).getCityName() : CFG.game.getProvince(nProvinceID).getName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(nProvinceID).getCivID(), CFG.PADDING, CFG.PADDING));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Capital"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
            } else {
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(nProvinceID).getCivID(), CFG.PADDING, CFG.PADDING));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Capital"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
            }
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("ProvincePopulation") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + CFG.game.getProvince(nProvinceID).getPopulationData().getPopulation()), CFG.COLOR_TEXT_POPULATION));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_LargestCity(int nProvinceID) {
        ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
        ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
        if ((CFG.game.getProvince(nProvinceID).getCitiesSize() > 0 ? CFG.game.getProvince(nProvinceID).getCity(0).getCityName() : CFG.game.getProvince(nProvinceID).getName()).length() > 0) {
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getProvince(nProvinceID).getCitiesSize() > 0 ? CFG.game.getProvince(nProvinceID).getCity(0).getCityName() : CFG.game.getProvince(nProvinceID).getName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(nProvinceID).getCivID(), CFG.PADDING, CFG.PADDING));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("LargestCity"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
        } else {
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(CFG.game.getProvince(nProvinceID).getCivID()).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.game.getProvince(nProvinceID).getCivID(), CFG.PADDING, CFG.PADDING));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("LargestCity"), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
        }
        nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("ProvincePopulation") + ": "));
        nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + CFG.game.getProvince(nProvinceID).getPopulationData().getPopulation()), CFG.COLOR_TEXT_POPULATION));
        nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, 0));
        nElements.add(new MenuElement_Hover_v2_Element2(nData));
        nData.clear();
        return new MenuElement_Hover_v2(nElements);
    }

    public final boolean showTurnChangesInformation(int nCivID) {
        if (!CFG.isDesktop()) {
            return false;
        }
        if (CFG.SPECTATOR_MODE || CFG.FOG_OF_WAR == 0) {
            return true;
        }
        return CFG.game.isAlly(CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID(), nCivID);
    }

    public final MenuElement_Hover_v2 getHover_PopulationOfCiv(int nCivID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(nCivID).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            long tempTotalPop = CFG.game.getCiv(nCivID).countPopulation();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Population") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempTotalPop), CFG.COLOR_TEXT_POPULATION));
            if (CFG.game.showTurnChangesInformation(nCivID)) {
                nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, CFG.PADDING));
                int turnPopChange = 0;
                for (int i2 = 0; i2 < CFG.game.getCiv(nCivID).getNumOfProvinces(); i2++) {
                    turnPopChange += CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i2)).saveProvinceData.turnChange_Population;
                }
                if (turnPopChange > 0) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + CFG.getNumberWithSpaces("" + turnPopChange), CFG.COLOR_TEXT_MODIFIER_POSITIVE));
                } else if (turnPopChange < 0) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.getNumberWithSpaces("" + turnPopChange), CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                } else {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + turnPopChange, CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                }
                nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.time, CFG.PADDING, 0));
            } else {
                nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, 0));
            }
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            ArrayList<Integer> tempNat = new ArrayList<>();
            ArrayList<Integer> tempNum = new ArrayList<>();
            for (int i3 = 0; i3 < CFG.game.getCiv(nCivID).getNumOfProvinces(); i3++) {
                for (int j = 0; j < CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i3)).getPopulationData().getNationalitiesSize(); j++) {
                    boolean addNew = true;
                    int k = 0;
                    while (true) {
                        if (k < tempNat.size()) {
                            if (tempNat.get(k).intValue() == CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i3)).getPopulationData().getCivID(j)) {
                                tempNum.set(k, Integer.valueOf(tempNum.get(k).intValue() + CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i3)).getPopulationData().getPopulationID(j)));
                                addNew = false;
                                break;
                            }
                            k++;
                        } else {
                            break;
                        }
                    }
                    if (addNew) {
                        tempNat.add(Integer.valueOf(CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i3)).getPopulationData().getCivID(j)));
                        tempNum.add(Integer.valueOf(CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i3)).getPopulationData().getPopulationID(j)));
                    }
                }
            }
            ArrayList tempSortedNat = new ArrayList();
            ArrayList tempSortedNum = new ArrayList();
            while (tempNat.size() > 0) {
                int nMax = 0;
                for (int i4 = 1; i4 < tempNat.size(); i4++) {
                    if (tempNum.get(nMax).intValue() < tempNum.get(i4).intValue()) {
                        nMax = i4;
                    }
                }
                tempSortedNat.add(tempNat.get(nMax));
                tempSortedNum.add(tempNum.get(nMax));
                tempNat.remove(nMax);
                tempNum.remove(nMax);
            }
            if (!CFG.menuManager.getInGameView() || CFG.FOG_OF_WAR != 2) {
                for (int i = 0; i < tempSortedNat.size(); i++) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Flag(((Integer) tempSortedNat.get(i)).intValue()));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempSortedNum.get(i)), CFG.COLOR_TEXT_POPULATION));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, CFG.PADDING));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("[" + CFG.getPercentage((float) ((Integer) tempSortedNum.get(i)).intValue(), (float) tempTotalPop, 5) + "%]", CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(" " + CFG.game.getCiv(((Integer) tempSortedNat.get(i)).intValue()).getCivName(), CFG.COLOR_TEXT_RANK_HOVER));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            } else {
                for (int i5 = 0; i5 < tempSortedNat.size(); i5++) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.getMetCiv(((Integer) tempSortedNat.get(i5)).intValue()) ? ((Integer) tempSortedNat.get(i5)).intValue() : -1));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempSortedNum.get(i5)), CFG.COLOR_TEXT_POPULATION));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, CFG.PADDING));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("[" + CFG.getPercentage((float) ((Integer) tempSortedNum.get(i5)).intValue(), (float) tempTotalPop, 5) + "%]", CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(" " + (CFG.getMetCiv(((Integer) tempSortedNat.get(i5)).intValue()) ? CFG.game.getCiv(((Integer) tempSortedNat.get(i5)).intValue()).getCivName() : CFG.langManager.get("Undiscovered")), CFG.COLOR_TEXT_RANK_HOVER));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            }
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_PopulationOfCiv_CreateAVassal() {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            long tempTotalPop = 0;
            for (int i2 = 0; i2 < getSelectedProvinces().getProvincesSize(); i2++) {
                tempTotalPop += (long) getProvince(getSelectedProvinces().getProvince(i2)).getPopulationData().getPopulation();
            }
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Population") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempTotalPop), CFG.COLOR_TEXT_POPULATION));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            ArrayList<Integer> tempNat = new ArrayList<>();
            ArrayList<Integer> tempNum = new ArrayList<>();
            for (int i3 = 0; i3 < getSelectedProvinces().getProvincesSize(); i3++) {
                for (int j = 0; j < CFG.game.getProvince(getSelectedProvinces().getProvince(i3)).getPopulationData().getNationalitiesSize(); j++) {
                    boolean addNew = true;
                    int k = 0;
                    while (true) {
                        if (k < tempNat.size()) {
                            if (tempNat.get(k).intValue() == CFG.game.getProvince(getSelectedProvinces().getProvince(i3)).getPopulationData().getCivID(j)) {
                                tempNum.set(k, Integer.valueOf(tempNum.get(k).intValue() + CFG.game.getProvince(getSelectedProvinces().getProvince(i3)).getPopulationData().getPopulationID(j)));
                                addNew = false;
                                break;
                            }
                            k++;
                        } else {
                            break;
                        }
                    }
                    if (addNew) {
                        tempNat.add(Integer.valueOf(CFG.game.getProvince(getSelectedProvinces().getProvince(i3)).getPopulationData().getCivID(j)));
                        tempNum.add(Integer.valueOf(CFG.game.getProvince(getSelectedProvinces().getProvince(i3)).getPopulationData().getPopulationID(j)));
                    }
                }
            }
            ArrayList tempSortedNat = new ArrayList();
            ArrayList tempSortedNum = new ArrayList();
            while (tempNat.size() > 0) {
                int nMax = 0;
                for (int i4 = 1; i4 < tempNat.size(); i4++) {
                    if (tempNum.get(nMax).intValue() < tempNum.get(i4).intValue()) {
                        nMax = i4;
                    }
                }
                tempSortedNat.add(tempNat.get(nMax));
                tempSortedNum.add(tempNum.get(nMax));
                tempNat.remove(nMax);
                tempNum.remove(nMax);
            }
            if (!CFG.menuManager.getInGameView() || CFG.FOG_OF_WAR != 2) {
                for (int i = 0; i < tempSortedNat.size(); i++) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Flag(((Integer) tempSortedNat.get(i)).intValue()));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempSortedNum.get(i)), CFG.COLOR_TEXT_POPULATION));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, CFG.PADDING));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("[" + CFG.getPercentage((float) ((Integer) tempSortedNum.get(i)).intValue(), (float) tempTotalPop, 5) + "%]", CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(" " + CFG.game.getCiv(((Integer) tempSortedNat.get(i)).intValue()).getCivName(), CFG.COLOR_TEXT_RANK_HOVER));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            } else {
                for (int i5 = 0; i5 < tempSortedNat.size(); i5++) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Flag(CFG.getMetCiv(((Integer) tempSortedNat.get(i5)).intValue()) ? ((Integer) tempSortedNat.get(i5)).intValue() : -1));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempSortedNum.get(i5)), CFG.COLOR_TEXT_POPULATION));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population, CFG.PADDING, CFG.PADDING));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("[" + CFG.getPercentage((float) ((Integer) tempSortedNum.get(i5)).intValue(), (float) tempTotalPop, 5) + "%]", CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(" " + (CFG.getMetCiv(((Integer) tempSortedNat.get(i5)).intValue()) ? CFG.game.getCiv(((Integer) tempSortedNat.get(i5)).intValue()).getCivName() : CFG.langManager.get("Undiscovered")), CFG.COLOR_TEXT_RANK_HOVER));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            }
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_TerrainTypeInfo(int nTerrainID, int nProvinceID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            nData.add(new MenuElement_Hover_v2_Element_Type_Color(CFG.terrainTypesManager.getColor(nTerrainID), 0, 0));
            nData.add(new MenuElement_Hover_v2_Element_Type_Terrain(nTerrainID, 0, CFG.PADDING));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.terrainTypesManager.getName(nTerrainID), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            if (!CFG.game.getProvince(CFG.ACTIVE_PROVINCE_INFO).getSeaProvince()) {
                if (!(CFG.terrainTypesManager.getDefense(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL && CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL && CFG.terrainTypesManager.getMovementCost(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL && CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL && CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL && CFG.terrainTypesManager.getBuildCost(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL)) {
                }
                if (CFG.terrainTypesManager.getDefense(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("DefenseModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getDefense(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getDefense(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getDefense(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getDefense(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("MilitaryUpkeep") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getMilitaryUpkeep(nTerrainID) < CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.terrainTypesManager.getMovementCost(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("MovementCostModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getMovementCost(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getMovementCost(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getMovementCost(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getMovementCost(nTerrainID) < CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("PopulationGrowthModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getPopulationGrowth(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("EconomyGrowthModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getEconomyGrowth(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.terrainTypesManager.getBuildCost(nTerrainID) != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("BuildCostModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + (CFG.terrainTypesManager.getBuildCost(nTerrainID) > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.terrainTypesManager.getBuildCost(nTerrainID) * 100.0f)) + "%", CFG.terrainTypesManager.getBuildCost(nTerrainID) == CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_NEUTRAL : CFG.terrainTypesManager.getBuildCost(nTerrainID) < CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            }
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_ProvincesOfCiv(int nCivID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(nCivID).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            int nTotalProvinces = CFG.game.countLandProvinces_NotWasteland();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("NumberOfProvinces") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.getCiv(nCivID).getNumOfProvinces(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("/" + nTotalProvinces, CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(" [" + CFG.getPercentage(CFG.game.getCiv(nCivID).getNumOfProvinces(), nTotalProvinces, 4) + "%]", CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            ArrayList<Integer> tempCont = new ArrayList<>();
            ArrayList<Integer> tempNum = new ArrayList<>();
            for (int i = 0; i < CFG.game.getCiv(nCivID).getNumOfProvinces(); i++) {
                boolean addNew = true;
                int j = 0;
                while (true) {
                    if (j < tempCont.size()) {
                        if (tempCont.get(j).intValue() == CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i)).getContinent()) {
                            tempNum.set(j, Integer.valueOf(tempNum.get(j).intValue() + 1));
                            addNew = false;
                            break;
                        }
                        j++;
                    } else {
                        break;
                    }
                }
                if (addNew) {
                    tempCont.add(Integer.valueOf(CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i)).getContinent()));
                    tempNum.add(1);
                }
            }
            int i2 = 0;
            while (i2 < tempCont.size() && i2 < 10) {
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.map.getMapContinents().getName(tempCont.get(i2).intValue()), CFG.map.getMapContinents().getColor(tempCont.get(i2).intValue())));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(": "));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.getNumberWithSpaces("" + tempNum.get(i2)), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.provinces, CFG.PADDING, 0));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
                i2++;
            }
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_LeaderOfCiv(int nCivID) {
        Color color;
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            if (CFG.game.getCiv(nCivID).civGameData.leaderData != null) {
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(nCivID).civGameData.leaderData.getName(), CFG.COLOR_TEXT_NUM_OF_PROVINCES));
                nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID, CFG.PADDING, 0));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Born") + ": "));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.getCiv(nCivID).civGameData.leaderData.getDay() + " " + Game_Calendar.getMonthName(CFG.game.getCiv(nCivID).civGameData.leaderData.getMonth()) + " " + CFG.gameAges.getYear(CFG.game.getCiv(nCivID).civGameData.leaderData.getYear()), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(" - " + CFG.gameAges.getAge(CFG.gameAges.getAgeOfYear(CFG.game.getCiv(nCivID).civGameData.leaderData.getYear())).getName(), CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
                nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.time, CFG.PADDING, 0));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_AttackBonus != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("AttackBonus") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_AttackBonus > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_AttackBonus * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_AttackBonus > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.diplo_rivals, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_DefenseBonus != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("DefenseBonus") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_DefenseBonus > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_DefenseBonus * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_DefenseBonus > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.diplo_rivals, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_PopGrowth != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("PopulationGrowthModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_PopGrowth > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_PopGrowth * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_PopGrowth > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population_growth, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_EconomyGrowth != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("EconomyGrowthModifier") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_EconomyGrowth > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_EconomyGrowth * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_EconomyGrowth > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.economy, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeTaxation != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("IncomeTaxation") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeTaxation > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeTaxation * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeTaxation > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.top_gold, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeProduction != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("IncomeProduction") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeProduction > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeProduction * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_IncomeProduction > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.development, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Administration != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Administration") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Administration > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Administration * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Administration < CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.top_gold2, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MilitaryUpkeep != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("MilitaryUpkeep") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MilitaryUpkeep > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MilitaryUpkeep * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MilitaryUpkeep < CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.diplo_army, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Research != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Research") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text((CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Research > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Research * 100.0f)) + "%", CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_Research > CFG.DEFAULT_RESEARACH_LEVEL ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEGATIVE2));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.research, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MovementPoints != CFG.DEFAULT_RESEARACH_LEVEL) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("MovementPoints") + ": "));
                    String str = (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MovementPoints > CFG.DEFAULT_RESEARACH_LEVEL ? "+" : "") + ((int) (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MovementPoints * 100.0f)) + "%";
                    if (CFG.game.getCiv(nCivID).civGameData.leaderData.fModifier_MovementPoints > CFG.DEFAULT_RESEARACH_LEVEL) {
                        color = CFG.COLOR_TEXT_MODIFIER_POSITIVE;
                    } else {
                        color = CFG.COLOR_TEXT_MODIFIER_NEGATIVE2;
                    }
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(str, color));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.top_movement_points, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
                if (CFG.game.getCiv(nCivID).civGameData.leaderData.getWiki().length() > 0) {
                    nData.add(new MenuElement_Hover_v2_Element_Type_Space());
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                    nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Wiki") + ": "));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.getCiv(nCivID).civGameData.leaderData.getWiki(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                    nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.wikipedia, CFG.PADDING, 0));
                    nElements.add(new MenuElement_Hover_v2_Element2(nData));
                    nData.clear();
                }
            } else {
                nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
                nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.game.getCiv(nCivID).getCivName(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
                nElements.add(new MenuElement_Hover_v2_Element2(nData));
                nData.clear();
            }
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        } catch (NullPointerException e2) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_RankOfCiv(int nCivID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("CivRank") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.getCiv(nCivID).getRankPosition() + "/" + CFG.game.getCivsSize(), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.rank, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final MenuElement_Hover_v2 getHover_TechnologyLevel(int nCivID) {
        try {
            ArrayList<MenuElement_Hover_v2_Element2> nElements = new ArrayList<>();
            ArrayList<MenuElement_Hover_v2_Element_Type> nData = new ArrayList<>();
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Technology") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.getCiv(nCivID).getTechnologyLevel(), CFG.COLOR_TEXT_NUM_OF_PROVINCES));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("/2.0", CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.technology, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("AverageDevelopment") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("" + CFG.game.countAvarageDevelopmentLevel(nCivID), CFG.COLOR_BUTTON_GAME_TEXT_ACTIVE));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.development, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Space());
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Flag(nCivID));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("TechnologyPoints"), CFG.COLOR_TEXT_NUM_OF_PROVINCES));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.technology, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("PopulationGrowthModifier") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_POP_GROWTH) * 0.75f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_POP_GROWTH > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.population_growth, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("EconomyGrowthModifier") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_ECONOMY_GROWTH) * 0.75f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_ECONOMY_GROWTH > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.economy, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("IncomeTaxation") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_INCOME_TAXATION) * 0.2f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_INCOME_TAXATION > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.top_gold, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("IncomeProduction") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_INCOME_PRODUCTION) * 0.25f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_INCOME_PRODUCTION > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.development, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Administration") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("-" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_ADMINISTRATION) * 0.3f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_ADMINISTRATION > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.top_gold2, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("MilitaryUpkeep") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("-" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_MILITARY_UPKEEP) * 0.35f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_MILITARY_UPKEEP > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.diplo_army, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("Research") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("+" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_RESEARCH) * 0.75f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_RESEARCH > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.research, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            nData.add(new MenuElement_Hover_v2_Element_Type_Text(CFG.langManager.get("ColonizationCost") + ": "));
            nData.add(new MenuElement_Hover_v2_Element_Type_Text("-" + String.format("%.1f", new Object[]{Float.valueOf(((float) CFG.game.getCiv(nCivID).civGameData.skills.POINTS_COLONIZATION) * 1.0f)}).replace(',', '.') + "%", CFG.game.getCiv(nCivID).civGameData.skills.POINTS_COLONIZATION > 0 ? CFG.COLOR_TEXT_MODIFIER_POSITIVE : CFG.COLOR_TEXT_MODIFIER_NEUTRAL));
            nData.add(new MenuElement_Hover_v2_Element_Type_Image(Images.provinces, CFG.PADDING, 0));
            nElements.add(new MenuElement_Hover_v2_Element2(nData));
            nData.clear();
            return new MenuElement_Hover_v2(nElements);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }

    public final int getScenarioID() {
        return this.scenarioID;
    }

    public final void setScenarioID(int scenarioID2) {
        this.scenarioID = scenarioID2;
        try {
            this.gameScenarios.sActiveScenarioTag = this.gameScenarios.getScenarioTag(getScenarioID());
        } catch (IndexOutOfBoundsException ex) {
            this.gameScenarios.sActiveScenarioTag = "";
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void updateDaultScenarioID_ForMap() {
        for (int i = 0; i < Game_Scenarios.SCENARIOS_SIZE; i++) {
            if (this.gameScenarios.getScenarioTag(i).equals(CFG.map.getMapDefaultScenario(CFG.map.getActiveMapID()))) {
                this.scenarioID = i;
                this.gameScenarios.sActiveScenarioTag = this.gameScenarios.getScenarioTag(getScenarioID());
                return;
            }
        }
    }

    public final void whitePeace(int iCivA, int iCivB) {
        setCivRelation_OfCivB(iCivA, iCivB, CFG.DEFAULT_RESEARACH_LEVEL);
        setCivRelation_OfCivB(iCivB, iCivA, CFG.DEFAULT_RESEARACH_LEVEL);
    }

    public final void whitePeace_ReturnProvincesToRightfulOwners(int nCivA, int nCivB) {
        for (int i = CFG.game.getCiv(nCivA).getNumOfProvinces() - 1; i >= 0; i--) {
            if (CFG.game.getProvince(CFG.game.getCiv(nCivA).getProvinceID(i)).getTrueOwnerOfProvince() == nCivB) {
                int nProvinceID = CFG.game.getCiv(nCivA).getProvinceID(i);
                int nArmy0 = CFG.game.getProvince(nProvinceID).getArmyCivID(nCivA);
                CFG.game.getProvince(nProvinceID).updateArmy(nCivA, 0);
                CFG.game.getProvince(nProvinceID).setCivID(nCivB, false, true);
                CFG.game.getProvince(nProvinceID).updateArmy(nCivA, nArmy0);
                CFG.gameAction.accessLost_MoveArmyToClosetsProvince(nCivA, nProvinceID);
            }
        }
        for (int i2 = CFG.game.getCiv(nCivB).getNumOfProvinces() - 1; i2 >= 0; i2--) {
            if (CFG.game.getProvince(CFG.game.getCiv(nCivB).getProvinceID(i2)).getTrueOwnerOfProvince() == nCivA) {
                int nProvinceID2 = CFG.game.getCiv(nCivB).getProvinceID(i2);
                int nArmy02 = CFG.game.getProvince(nProvinceID2).getArmyCivID(nCivB);
                CFG.game.getProvince(nProvinceID2).updateArmy(nCivB, 0);
                CFG.game.getProvince(nProvinceID2).setCivID(nCivA, false, true);
                CFG.game.getProvince(nProvinceID2).updateArmy(nCivB, nArmy02);
                CFG.gameAction.accessLost_MoveArmyToClosetsProvince(nCivB, nProvinceID2);
            }
        }
    }

    public final void acceptPeaceOffer(int iCivA, int iCivB, int nTruceNumOfTurns) {
        setCivRelation_OfCivB(iCivA, iCivB, Math.max(getCivRelation_OfCivB(iCivA, iCivB), CFG.DEFAULT_RESEARACH_LEVEL));
        setCivRelation_OfCivB(iCivB, iCivA, Math.max(getCivRelation_OfCivB(iCivB, iCivA), CFG.DEFAULT_RESEARACH_LEVEL));
        CFG.game.getCiv(iCivA).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_Truce(iCivB));
        CFG.game.getCiv(iCivB).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_Truce(iCivA));
        CFG.game.getCiv(iCivA).getCivilization_Diplomacy_GameData().messageBox.removeMessage_TypeFrom(iCivB, Message_Type.WE_CAN_SIGN_PEACE);
        CFG.game.getCiv(iCivA).getCivilization_Diplomacy_GameData().messageBox.removeMessage_TypeFrom(iCivB, Message_Type.WE_CAN_SIGN_PEACE_STATUS_QUO);
        CFG.game.getCiv(iCivB).getCivilization_Diplomacy_GameData().messageBox.removeMessage_TypeFrom(iCivB, Message_Type.WE_CAN_SIGN_PEACE);
        CFG.game.getCiv(iCivB).getCivilization_Diplomacy_GameData().messageBox.removeMessage_TypeFrom(iCivA, Message_Type.WE_CAN_SIGN_PEACE_STATUS_QUO);
        CFG.historyManager.addHistoryLog(new HistoryLog_Peace(iCivA, iCivB));
        setCivTruce(iCivA, iCivB, nTruceNumOfTurns);
    }

    public final boolean canDeclareWar_TribalColonize_NeedsToBorder(int iAgressorCivID, int iCivB) {
        if (CFG.ideologiesManager.getIdeology(CFG.game.getCiv(iCivB).getIdeologyID()).CAN_BECOME_CIVILIZED < 0 || CFG.ideologiesManager.getIdeology(CFG.game.getCiv(iAgressorCivID).getIdeologyID()).CAN_BECOME_CIVILIZED >= 0) {
            return true;
        }
        for (int i = 0; i < getCiv(iCivB).getNumOfProvinces(); i++) {
            for (int j = 0; j < getProvince(getCiv(iCivB).getProvinceID(i)).getNeighboringProvincesSize(); j++) {
                if (getProvince(getProvince(getCiv(iCivB).getProvinceID(i)).getNeighboringProvinces(j)).getCivID() == iAgressorCivID) {
                    return true;
                }
            }
        }
        return false;
    }

    public final void declareWar(int iAgressorCivID, int iCivB, boolean forceWar) {
        if (iAgressorCivID != 0 && iCivB != 0 && iAgressorCivID != iCivB && !CFG.game.getCivsAtWar(iAgressorCivID, iCivB) && CFG.game.getCivTruce(iAgressorCivID, iCivB) <= 0 && CFG.game.getCivRelation_OfCivB(iAgressorCivID, iCivB) <= 50.0f && CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() == iAgressorCivID) {
            if (forceWar || canDeclareWar_TribalColonize_NeedsToBorder(iAgressorCivID, iCivB)) {
                CFG.game.getCiv(iAgressorCivID).civGameData.civAggresionLevel += 0.02f + (((((((float) CFG.game.getCiv(iAgressorCivID).getNumOfProvinces()) / 80.0f) * ((float) CFG.game.getCiv(iCivB).getNumOfProvinces())) / ((float) CFG.oAI.PLAYABLE_PROVINCES)) / 5.0f) * 5.0f);
                Game_Calendar.TURNS_SINCE_LAST_WAR = 0;
                if (iAgressorCivID == CFG.game.getCiv(iCivB).getPuppetOfCivID()) {
                    for (int i = 1; i < CFG.game.getCivsSize(); i++) {
                        if (!(i == iAgressorCivID || i == iCivB || CFG.game.getCiv(i).getPuppetOfCivID() != iAgressorCivID)) {
                            CFG.game.setCivRelation_OfCivB(i, iAgressorCivID, (CFG.game.getCivRelation_OfCivB(i, iAgressorCivID) - 45.0f) - ((float) CFG.oR.nextInt(22)));
                        }
                    }
                }
                war_CheckDiplomacy(iAgressorCivID, iCivB);
                if (CFG.game.getCiv(iCivB).getPuppetOfCivID() == iCivB || getWarID(iAgressorCivID, CFG.game.getCiv(iCivB).getPuppetOfCivID()) < 0) {
                    int i2 = 0;
                    while (i2 < CFG.game.getCiv(iCivB).civGameData.iVassalsSize) {
                        if (getWarID(iAgressorCivID, CFG.game.getCiv(iCivB).civGameData.lVassals.get(i2).iCivID) < 0) {
                            i2++;
                        } else {
                            joinWar(iCivB, iAgressorCivID, getWarID(iAgressorCivID, CFG.game.getCiv(iCivB).civGameData.lVassals.get(i2).iCivID));
                            return;
                        }
                    }
                    if (CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() == iAgressorCivID || getWarID(iCivB, CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID()) < 0) {
                        int i3 = 0;
                        while (i3 < CFG.game.getCiv(iAgressorCivID).civGameData.iVassalsSize) {
                            if (getWarID(iCivB, CFG.game.getCiv(iAgressorCivID).civGameData.lVassals.get(i3).iCivID) < 0) {
                                i3++;
                            } else {
                                joinWar(iAgressorCivID, iCivB, getWarID(iCivB, CFG.game.getCiv(iAgressorCivID).civGameData.lVassals.get(i3).iCivID));
                                return;
                            }
                        }
                        setCivRelation_OfCivB(iAgressorCivID, iCivB, -100.0f);
                        setCivRelation_OfCivB(iCivB, iAgressorCivID, -100.0f);
                        addWarData(iAgressorCivID, iCivB);
                        for (int i4 = CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.iWarPreparationsSize - 1; i4 >= 0; i4--) {
                            if (CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.warPreparations.get(i4).onCivID == iCivB) {
                                CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.warPreparations.remove(i4);
                                CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.iWarPreparationsSize = CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.warPreparations.size();
                            }
                        }
                        for (int i5 = CFG.game.getCiv(iCivB).civGameData.civPlans.iWarPreparationsSize - 1; i5 >= 0; i5--) {
                            if (CFG.game.getCiv(iCivB).civGameData.civPlans.warPreparations.get(i5).onCivID == iAgressorCivID) {
                                CFG.game.getCiv(iCivB).civGameData.civPlans.warPreparations.remove(i5);
                                CFG.game.getCiv(iCivB).civGameData.civPlans.iWarPreparationsSize = CFG.game.getCiv(iCivB).civGameData.civPlans.warPreparations.size();
                            }
                        }
                        for (int i6 = CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.iCasusBelliSize - 1; i6 >= 0; i6--) {
                            if (CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.casusBelli.get(i6).onCivID == iCivB) {
                                CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.casusBelli.remove(i6);
                                CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.iCasusBelliSize = CFG.game.getCiv(iAgressorCivID).civGameData.civPlans.casusBelli.size();
                            }
                        }
                        for (int i7 = CFG.game.getCiv(iCivB).civGameData.civPlans.iCasusBelliSize - 1; i7 >= 0; i7--) {
                            if (CFG.game.getCiv(iCivB).civGameData.civPlans.casusBelli.get(i7).onCivID == iAgressorCivID) {
                                CFG.game.getCiv(iCivB).civGameData.civPlans.casusBelli.remove(i7);
                                CFG.game.getCiv(iCivB).civGameData.civPlans.iCasusBelliSize = CFG.game.getCiv(iCivB).civGameData.civPlans.casusBelli.size();
                            }
                        }
                        for (int i8 = 1; i8 < CFG.game.getCivsSize(); i8++) {
                            if (!(i8 == iCivB || i8 == iAgressorCivID || CFG.game.getCiv(i8).getNumOfProvinces() <= 0)) {
                                if (getDefensivePact(i8, iCivB) > 0) {
                                    joinWar(i8, iAgressorCivID, getWarID(iAgressorCivID, iCivB));
                                } else if (getGuarantee(i8, iCivB) > 0) {
                                    joinWar(i8, iAgressorCivID, getWarID(iAgressorCivID, iCivB));
                                }
                            }
                        }
                        CFG.game.getCiv(iCivB).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War(iAgressorCivID, iCivB));
                        if (!(iAgressorCivID == CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() || CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() == iCivB)) {
                            CFG.game.getCiv(CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War_CivIsAtWar(iAgressorCivID, iCivB));
                        }
                        if (!(iCivB == CFG.game.getCiv(iCivB).getPuppetOfCivID() || CFG.game.getCiv(iCivB).getPuppetOfCivID() == iAgressorCivID)) {
                            CFG.game.getCiv(CFG.game.getCiv(iCivB).getPuppetOfCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War_CivIsAtWar(iCivB, iAgressorCivID));
                        }
                        DiplomacyManager.worldRecations(50, iAgressorCivID, iCivB);
                        CFG.historyManager.addHistoryLog(new HistoryLog_WarDeclaration(iAgressorCivID, iCivB));
                        if (!CFG.SPECTATOR_MODE) {
                            try {
                                if (CFG.game.getCiv(iAgressorCivID).getAllianceID() > 0) {
                                    for (int i9 = 0; i9 < CFG.game.getAlliance(CFG.game.getCiv(iAgressorCivID).getAllianceID()).getCivilizationsSize(); i9++) {
                                        if (CFG.game.getCiv(CFG.game.getAlliance(CFG.game.getCiv(iAgressorCivID).getAllianceID()).getCivilization(i9)).getNumOfProvinces() > 0 && CFG.game.getAlliance(CFG.game.getCiv(iAgressorCivID).getAllianceID()).getCivilization(i9) != iAgressorCivID) {
                                            for (int j2 = 0; j2 < CFG.game.getPlayersSize(); j2++) {
                                                if (CFG.game.getCiv(CFG.game.getPlayer(j2).getCivID()).getNumOfProvinces() > 0 && CFG.game.getCiv(iAgressorCivID).getAllianceID() == CFG.game.getCiv(CFG.game.getPlayer(j2).getCivID()).getAllianceID() && iAgressorCivID != CFG.game.getPlayer(j2).getCivID() && CFG.game.getAlliance(CFG.game.getCiv(iAgressorCivID).getAllianceID()).getCivilization(i9) != CFG.game.getPlayer(j2).getCivID()) {
                                                    CFG.game.getCiv(CFG.game.getPlayer(j2).getCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_JoinedAWar(iAgressorCivID, iCivB));
                                                }
                                            }
                                        }
                                    }
                                } else if (CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() != CFG.game.getCiv(iAgressorCivID).getCivID()) {
                                    int j = 0;
                                    while (true) {
                                        if (j < CFG.game.getPlayersSize()) {
                                            if (CFG.game.getCivsAtWar(CFG.game.getPlayer(j).getCivID(), iCivB) && CFG.game.getCiv(CFG.game.getPlayer(j).getCivID()).getNumOfProvinces() > 0 && CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() == CFG.game.getPlayer(j).getCivID()) {
                                                CFG.game.getCiv(CFG.game.getPlayer(j).getCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_JoinedAWar(iAgressorCivID, iCivB));
                                                break;
                                            }
                                            j++;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                if (CFG.game.getCiv(iCivB).getAllianceID() > 0) {
                                    for (int i10 = 0; i10 < CFG.game.getAlliance(CFG.game.getCiv(iCivB).getAllianceID()).getCivilizationsSize(); i10++) {
                                        if (CFG.game.getCiv(CFG.game.getAlliance(CFG.game.getCiv(iCivB).getAllianceID()).getCivilization(i10)).getNumOfProvinces() > 0 && CFG.game.getAlliance(CFG.game.getCiv(iCivB).getAllianceID()).getCivilization(i10) != iCivB) {
                                            for (int j22 = 0; j22 < CFG.game.getPlayersSize(); j22++) {
                                                if (CFG.game.getCiv(CFG.game.getPlayer(j22).getCivID()).getNumOfProvinces() > 0 && CFG.game.getCiv(iCivB).getAllianceID() == CFG.game.getCiv(CFG.game.getPlayer(j22).getCivID()).getAllianceID() && iCivB != CFG.game.getPlayer(j22).getCivID() && CFG.game.getAlliance(CFG.game.getCiv(iCivB).getAllianceID()).getCivilization(i10) != CFG.game.getPlayer(j22).getCivID()) {
                                                    CFG.game.getCiv(CFG.game.getPlayer(j22).getCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_JoinedAWar(iCivB, iAgressorCivID));
                                                }
                                            }
                                        }
                                    }
                                } else if (CFG.game.getCiv(iCivB).getPuppetOfCivID() != CFG.game.getCiv(iCivB).getCivID()) {
                                    int j3 = 0;
                                    while (true) {
                                        if (j3 < CFG.game.getPlayersSize()) {
                                            if (CFG.game.getCivsAtWar(CFG.game.getPlayer(j3).getCivID(), iAgressorCivID) && CFG.game.getCiv(CFG.game.getPlayer(j3).getCivID()).getNumOfProvinces() > 0 && CFG.game.getCiv(iCivB).getPuppetOfCivID() == CFG.game.getPlayer(j3).getCivID()) {
                                                CFG.game.getCiv(CFG.game.getPlayer(j3).getCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_JoinedAWar(iCivB, iAgressorCivID));
                                                break;
                                            }
                                            j3++;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                            } catch (IndexOutOfBoundsException e) {
                            }
                        }
                        DiplomacyManager.updateFriendlyCiv(iAgressorCivID, iCivB);
                        return;
                    }
                    joinWar(iAgressorCivID, iCivB, getWarID(iCivB, CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID()));
                    return;
                }
                joinWar(iCivB, iAgressorCivID, getWarID(iAgressorCivID, CFG.game.getCiv(iCivB).getPuppetOfCivID()));
            }
        }
    }

    public final void joinWar(int iCivA, int iWarAgainstCivID, int nWarID) {
        int tempWar;
        if (iCivA != 0 && iWarAgainstCivID != 0 && iCivA != iWarAgainstCivID && !CFG.game.getCivsAtWar(iCivA, iWarAgainstCivID)) {
            war_CheckDiplomacy(iCivA, iWarAgainstCivID);
            if (nWarID >= 0 && nWarID < getWarsSize()) {
                setCivRelation_OfCivB(iCivA, iWarAgainstCivID, -100.0f);
                setCivRelation_OfCivB(iWarAgainstCivID, iCivA, -100.0f);
                for (int i = CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.iWarPreparationsSize - 1; i >= 0; i--) {
                    if (CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.warPreparations.get(i).onCivID == iCivA) {
                        CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.warPreparations.remove(i);
                        CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.iWarPreparationsSize = CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.warPreparations.size();
                    }
                }
                for (int i2 = CFG.game.getCiv(iCivA).civGameData.civPlans.iWarPreparationsSize - 1; i2 >= 0; i2--) {
                    if (CFG.game.getCiv(iCivA).civGameData.civPlans.warPreparations.get(i2).onCivID == iWarAgainstCivID) {
                        CFG.game.getCiv(iCivA).civGameData.civPlans.warPreparations.remove(i2);
                        CFG.game.getCiv(iCivA).civGameData.civPlans.iWarPreparationsSize = CFG.game.getCiv(iCivA).civGameData.civPlans.warPreparations.size();
                    }
                }
                for (int i3 = CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.iCasusBelliSize - 1; i3 >= 0; i3--) {
                    if (CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.casusBelli.get(i3).onCivID == iCivA) {
                        CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.casusBelli.remove(i3);
                        CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.iCasusBelliSize = CFG.game.getCiv(iWarAgainstCivID).civGameData.civPlans.casusBelli.size();
                    }
                }
                for (int i4 = CFG.game.getCiv(iCivA).civGameData.civPlans.iCasusBelliSize - 1; i4 >= 0; i4--) {
                    if (CFG.game.getCiv(iCivA).civGameData.civPlans.casusBelli.get(i4).onCivID == iWarAgainstCivID) {
                        CFG.game.getCiv(iCivA).civGameData.civPlans.casusBelli.remove(i4);
                        CFG.game.getCiv(iCivA).civGameData.civPlans.iCasusBelliSize = CFG.game.getCiv(iCivA).civGameData.civPlans.casusBelli.size();
                    }
                }
                CFG.historyManager.addHistoryLog(new HistoryLog_WarDeclaration(iCivA, iWarAgainstCivID));
                if (CFG.game.getCiv(iCivA).getAllianceID() > 0) {
                    int i5 = 0;
                    while (true) {
                        if (i5 < CFG.game.getAlliance(CFG.game.getCiv(iCivA).getAllianceID()).getCivilizationsSize()) {
                            if (CFG.game.getAlliance(CFG.game.getCiv(iCivA).getAllianceID()).getCivilization(i5) != iCivA && CFG.game.getCiv(CFG.game.getAlliance(CFG.game.getCiv(iCivA).getAllianceID()).getCivilization(i5)).getNumOfProvinces() > 0 && CFG.game.getCivsAtWar(iWarAgainstCivID, CFG.game.getAlliance(CFG.game.getCiv(iCivA).getAllianceID()).getCivilization(i5)) && (tempWar = CFG.game.getWarID(CFG.game.getAlliance(CFG.game.getCiv(iCivA).getAllianceID()).getCivilization(i5), iWarAgainstCivID)) >= 0) {
                                nWarID = tempWar;
                                break;
                            }
                            i5++;
                        } else {
                            break;
                        }
                    }
                }
                if (getWar(nWarID).getIsAggressor(iWarAgainstCivID)) {
                    getWar(nWarID).addDefender(iCivA);
                } else {
                    getWar(nWarID).addAggressor(iCivA);
                }
                CFG.game.getCiv(iCivA).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War(iWarAgainstCivID, iCivA));
                CFG.game.getCiv(iWarAgainstCivID).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War(iCivA, iWarAgainstCivID));
                if (!(iWarAgainstCivID == CFG.game.getCiv(iWarAgainstCivID).getPuppetOfCivID() || CFG.game.getCiv(iWarAgainstCivID).getPuppetOfCivID() == iCivA)) {
                    CFG.game.getCiv(CFG.game.getCiv(iWarAgainstCivID).getPuppetOfCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War_CivIsAtWar(iWarAgainstCivID, iCivA));
                }
                if (!(iCivA == CFG.game.getCiv(iCivA).getPuppetOfCivID() || CFG.game.getCiv(iCivA).getPuppetOfCivID() == iWarAgainstCivID)) {
                    CFG.game.getCiv(CFG.game.getCiv(iCivA).getPuppetOfCivID()).getCivilization_Diplomacy_GameData().messageBox.addMessage(new Message_War_CivIsAtWar(iCivA, iWarAgainstCivID));
                }
            }
            DiplomacyManager.updateFriendlyCiv(iCivA, iWarAgainstCivID);
        }
    }

    public final void war_CheckDiplomacy(int iAgressorCivID, int iCivB) {
        if (getCivNonAggressionPact(iAgressorCivID, iCivB) > 0) {
            setCivNonAggressionPact(iAgressorCivID, iCivB, 0);
        }
        if (getMilitaryAccess(iAgressorCivID, iCivB) > 0) {
            setMilitaryAccess(iAgressorCivID, iCivB, 0);
            CFG.gameAction.accessLost_UpdateArmies(iCivB, iAgressorCivID);
        }
        if (getMilitaryAccess(iCivB, iAgressorCivID) > 0) {
            setMilitaryAccess(iCivB, iAgressorCivID, 0);
            CFG.gameAction.accessLost_UpdateArmies(iAgressorCivID, iCivB);
        }
        if (getDefensivePact(iAgressorCivID, iCivB) > 0) {
            setDefensivePact(iAgressorCivID, iCivB, 0);
        }
        if (getGuarantee(iAgressorCivID, iCivB) > 0) {
            setGuarantee(iAgressorCivID, iCivB, 0);
        }
        if (getGuarantee(iCivB, iAgressorCivID) > 0) {
            setGuarantee(iCivB, iAgressorCivID, 0);
        }
        if (CFG.game.getCiv(iAgressorCivID).getPuppetOfCivID() == iCivB) {
            CFG.game.getCiv(iAgressorCivID).setPuppetOfCivID(iAgressorCivID);
            CFG.gameAction.accessLost_UpdateArmies(iCivB, iAgressorCivID);
            CFG.gameAction.accessLost_UpdateArmies(iAgressorCivID, iCivB);
            if (CFG.game.getCiv(iCivB).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iCivB, iAgressorCivID);
            }
            if (CFG.game.getCiv(iAgressorCivID).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iAgressorCivID, iCivB);
            }
        }
        if (CFG.game.getCiv(iCivB).getPuppetOfCivID() == iAgressorCivID) {
            CFG.game.getCiv(iCivB).setPuppetOfCivID(iCivB);
            CFG.gameAction.accessLost_UpdateArmies(iCivB, iAgressorCivID);
            CFG.gameAction.accessLost_UpdateArmies(iAgressorCivID, iCivB);
            if (CFG.game.getCiv(iCivB).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iCivB, iAgressorCivID);
            }
            if (CFG.game.getCiv(iAgressorCivID).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iAgressorCivID, iCivB);
            }
        }
        if (CFG.game.getCiv(iAgressorCivID).getAllianceID() > 0 && CFG.game.getCiv(iAgressorCivID).getAllianceID() == CFG.game.getCiv(iCivB).getAllianceID()) {
            int tAllianceID = CFG.game.getCiv(iAgressorCivID).getAllianceID();
            CFG.game.getAlliance(CFG.game.getCiv(iCivB).getAllianceID()).removeCivilization(iCivB);
            CFG.game.getCiv(iCivB).setAllianceID(0);
            CFG.game.getAlliance(CFG.game.getCiv(iAgressorCivID).getAllianceID()).removeCivilization(iAgressorCivID);
            CFG.game.getCiv(iAgressorCivID).setAllianceID(0);
            CFG.gameAction.accessLost_UpdateArmies(iCivB, iAgressorCivID);
            CFG.gameAction.accessLost_UpdateArmies(iAgressorCivID, iCivB);
            if (CFG.game.getCiv(iCivB).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iCivB, iAgressorCivID);
            }
            if (CFG.game.getCiv(iAgressorCivID).getControlledByPlayer()) {
                war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iAgressorCivID, iCivB);
            }
            for (int i = 0; i < CFG.game.getAlliance(tAllianceID).getCivilizationsSize(); i++) {
                CFG.gameAction.accessLost_UpdateArmies(iCivB, CFG.game.getAlliance(tAllianceID).getCivilization(i));
                CFG.gameAction.accessLost_UpdateArmies(CFG.game.getAlliance(tAllianceID).getCivilization(i), iCivB);
                CFG.gameAction.accessLost_UpdateArmies(iAgressorCivID, CFG.game.getAlliance(tAllianceID).getCivilization(i));
                CFG.gameAction.accessLost_UpdateArmies(CFG.game.getAlliance(tAllianceID).getCivilization(i), iAgressorCivID);
                if (CFG.game.getCiv(iCivB).getControlledByPlayer()) {
                    war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iCivB, CFG.game.getAlliance(tAllianceID).getCivilization(i));
                }
                if (CFG.game.getCiv(iAgressorCivID).getControlledByPlayer()) {
                    war_CheckDiplomacy_AccessLost_UpdateFogOfWar(iAgressorCivID, CFG.game.getAlliance(tAllianceID).getCivilization(i));
                }
                if (CFG.game.getCiv(CFG.game.getAlliance(tAllianceID).getCivilization(i)).getControlledByPlayer()) {
                    war_CheckDiplomacy_AccessLost_UpdateFogOfWar(CFG.game.getAlliance(tAllianceID).getCivilization(i), iAgressorCivID);
                    war_CheckDiplomacy_AccessLost_UpdateFogOfWar(CFG.game.getAlliance(tAllianceID).getCivilization(i), iCivB);
                }
            }
            checkAlliances();
        }
    }

    public final void war_CheckDiplomacy_AccessLost_UpdateFogOfWar(int nPlayerCivID, int inCivID) {
        int nPlayerID;
        try {
            if (CFG.FOG_OF_WAR > 0 && (nPlayerID = CFG.game.getPlayerID_ByCivID(nPlayerCivID)) >= 0) {
                for (int i = 0; i < CFG.game.getCiv(inCivID).getNumOfProvinces(); i++) {
                    CFG.game.getProvince(CFG.game.getCiv(inCivID).getProvinceID(i)).updateFogOfWar(nPlayerID);
                    CFG.game.getProvince(CFG.game.getCiv(inCivID).getProvinceID(i)).updateDrawArmy();
                }
                for (int i2 = 0; i2 < CFG.game.getCiv(inCivID).getArmyInAnotherProvinceSize(); i2++) {
                    CFG.game.getProvince(CFG.game.getCiv(inCivID).getArmyInAnotherProvince(i2)).updateFogOfWar(nPlayerID);
                    CFG.game.getProvince(CFG.game.getCiv(inCivID).getArmyInAnotherProvince(i2)).updateDrawArmy();
                }
            }
        } catch (IndexOutOfBoundsException ex) {
            CFG.exceptionStack(ex);
        }
    }

    public final void ressetVassal_CivID(int iCivID) {
        getCiv(iCivID).setPuppetOfCivID(iCivID);
    }

    public final void setVassal_OfCiv(int iCivID_Lord, int iCivID_Vassal) {
        if (getCiv(iCivID_Lord).getPuppetOfCivID() == iCivID_Vassal) {
            getCiv(iCivID_Lord).setPuppetOfCivID(iCivID_Lord);
        }
        getCiv(iCivID_Vassal).setPuppetOfCivID(iCivID_Lord);
    }

    public final float getCivRelation_OfCivB(int iCivA, int iCivB) {
        try {
            return getCiv(iCivA).getRelation(iCivB - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return CFG.DEFAULT_RESEARACH_LEVEL;
        }
    }

    public final void setCivRelation_OfCivB(int iCivA, int iCivB, float nOpinion) {
        try {
            getCiv(iCivA).setRelation(iCivB - 1, nOpinion);
            if (((int) nOpinion) == -100) {
                getCiv(iCivB).setRelation(iCivA - 1, nOpinion);
            }
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final int getGuarantee(int iCivA, int iCivB) {
        try {
            return getCiv(iCivA).getGuarantee(iCivB - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final boolean setGuarantee(int iCivA, int iCivB, int nTurns) {
        try {
            return getCiv(iCivA).setGuarantee(iCivB - 1, nTurns);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final int getMilitaryAccess(int iCivA, int iCivB) {
        try {
            return getCiv(iCivA).getMilitaryAccess(iCivB - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final boolean setMilitaryAccess(int iCivA, int iCivB, int nTurns) {
        try {
            return getCiv(iCivA).setMilitaryAccess(iCivB - 1, nTurns);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final int getCivNonAggressionPact(int iCivA, int iCivB) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).getNonAggressionPact((iCivA - iCivB) - 1);
        }
        try {
            return getCiv(iCivA).getNonAggressionPact((iCivB - iCivA) - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final int getCivTruce(int iCivA, int iCivB) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).getTruce((iCivA - iCivB) - 1);
        }
        try {
            return getCiv(iCivA).getTruce((iCivB - iCivA) - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final boolean setCivTruce(int iCivA, int iCivB, int iNumOfTurns) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).setTruce((iCivA - iCivB) - 1, iNumOfTurns);
        }
        try {
            return getCiv(iCivA).setTruce((iCivB - iCivA) - 1, iNumOfTurns);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final boolean setCivNonAggressionPact(int iCivA, int iCivB, int iNumOfTurns) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).setNonAggressionPact((iCivA - iCivB) - 1, iNumOfTurns);
        }
        try {
            return getCiv(iCivA).setNonAggressionPact((iCivB - iCivA) - 1, iNumOfTurns);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final int getDefensivePact(int iCivA, int iCivB) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).getDefensivePact((iCivA - iCivB) - 1);
        }
        try {
            return getCiv(iCivA).getDefensivePact((iCivB - iCivA) - 1);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final boolean setDefensivePact(int iCivA, int iCivB, int iNumOfTurns) {
        if (iCivA >= iCivB) {
            return getCiv(iCivB).setDefensivePact((iCivA - iCivB) - 1, iNumOfTurns);
        }
        try {
            return getCiv(iCivA).setDefensivePact((iCivB - iCivA) - 1, iNumOfTurns);
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return false;
        }
    }

    public final boolean getCivsAtWar(int iCivA, int iCivB) {
        try {
            return ((int) getCivRelation_OfCivB(iCivA, iCivB)) <= -100;
        } catch (IndexOutOfBoundsException ex) {
            if (!CFG.LOGS) {
                return false;
            }
            CFG.exceptionStack(ex);
            return false;
        }
    }

    public final boolean getCivsAreAllied(int iCivA, int iCivB) {
        try {
            return getCiv(iCivA).getAllianceID() > 0 && getCiv(iCivA).getAllianceID() == getCiv(iCivB).getAllianceID();
        } catch (IndexOutOfBoundsException ex) {
            if (!CFG.LOGS) {
                return false;
            }
            CFG.exceptionStack(ex);
            return false;
        }
    }

    public boolean isAlly(int iCivA, int nCivID) {
        return iCivA == nCivID || CFG.game.getCivsAreAllied(nCivID, iCivA) || CFG.game.getCiv(iCivA).getPuppetOfCivID() == nCivID || CFG.game.getCiv(nCivID).getPuppetOfCivID() == iCivA;
    }

    public final boolean getSeaProvinceAttack(int iCivA, int nProvinceID) {
        for (int i = 1; i < getProvince(nProvinceID).getCivsSize(); i++) {
            if (getCivsAtWar(iCivA, getProvince(nProvinceID).getCivID(i))) {
                return true;
            }
        }
        return false;
    }

    public final boolean getCivsInAlliance(int iCivA, int iCivB) {
        try {
            return getCiv(iCivA).getAllianceID() > 0 && getCiv(iCivA).getAllianceID() == getCiv(iCivB).getAllianceID();
        } catch (IndexOutOfBoundsException ex) {
            if (!CFG.LOGS) {
                return false;
            }
            CFG.exceptionStack(ex);
            return false;
        }
    }

    public final boolean isAtPeace(int nCivID) {
        for (int i = nCivID + 1; i < getCivsSize(); i++) {
            if (getCiv(i).getNumOfProvinces() > 0 && ((int) getCivRelation_OfCivB(nCivID, i)) == -100) {
                return false;
            }
        }
        for (int i2 = nCivID - 1; i2 > 0; i2--) {
            if (getCiv(i2).getNumOfProvinces() > 0 && ((int) getCivRelation_OfCivB(nCivID, i2)) == -100) {
                return false;
            }
        }
        return true;
    }

    public final void moveCapitalToTheLargestCity(int nCivID) {
        if (CFG.game.getCiv(nCivID).getNumOfProvinces() > 0) {
            int nLargestCity = CFG.game.getCiv(nCivID).getProvinceID(0);
            for (int i = 1; i < CFG.game.getCiv(nCivID).getNumOfProvinces(); i++) {
                if (CFG.game.getProvince(CFG.game.getCiv(nCivID).getProvinceID(i)).getPopulationData().getPopulation() > CFG.game.getProvince(nLargestCity).getPopulationData().getPopulation()) {
                    nLargestCity = CFG.game.getCiv(nCivID).getProvinceID(i);
                }
            }
            CFG.game.getCiv(nCivID).setCapitalProvinceID(nLargestCity);
        }
    }

    public final boolean haveArmy_FogOfWarCheck(int nProvinceID, int nCivID) {
        for (int i = 0; i < getProvince(nProvinceID).getCivsSize(); i++) {
            if (getProvince(nProvinceID).getCivID(i) == nCivID || getCiv(getProvince(nProvinceID).getCivID(i)).getPuppetOfCivID() == nCivID || getCiv(nCivID).getPuppetOfCivID() == getProvince(nProvinceID).getCivID(i) || (getCiv(nCivID).getAllianceID() > 0 && getCiv(nCivID).getAllianceID() == getCiv(getProvince(nProvinceID).getCivID(i)).getAllianceID())) {
                return true;
            }
        }
        return false;
    }

    public final boolean isPlayerAlly_FogOfWarCheck(int nPlayerCivID, int nCivID) {
        return nPlayerCivID == nCivID || getCiv(nCivID).getPuppetOfCivID() == nPlayerCivID || getCiv(nPlayerCivID).getPuppetOfCivID() == nCivID || getCivsAreAllied(nPlayerCivID, nCivID);
    }

    public final Civilization getCiv(int i) {
        try {
            return this.lCivs.get(i);
        } catch (IndexOutOfBoundsException e) {
            return this.lCivs.get(0);
        }
    }

    public final int getCivsSize() {
        return this.iCivsSize;
    }

    public final Player getPlayer(int i) {
        return this.lPlayers.get(i);
    }

    public final int getPlayerID_ByCivID(int nCivID) {
        for (int i = 0; i < getPlayersSize(); i++) {
            if (getPlayer(i).getCivID() == nCivID) {
                return i;
            }
        }
        return -1;
    }

    public final void setActiveProvinceID(int nActiveProvinceID) {
        try {
            if (CFG.regionChoosing) {
                if (!getProvince(nActiveProvinceID).getSeaProvince()) {
                    CFG.game.getProvince(CFG.lastAirbaseProvince).getAirbase().setRegion(CFG.game.getProvince(nActiveProvinceID).getRegion());
                    CFG.menuManager.rebuildInGame_Airbase(CFG.lastAirbaseProvince);
                    CFG.regionChoosing = false;
                } else {
                    return;
                }
            }
            this.setActiveProvince_ExtraAction.extraAction(nActiveProvinceID);
            if (this.iActiveProvince >= 0) {
                if (getProvince(this.iActiveProvince).getSeaProvince()) {
                    for (int i = 0; i < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i++) {
                        if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i)) {
                            if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).getSeaProvince()) {
                                getProvince(this.iActiveProvince).getProvinceBordersSeaBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).updateDrawProvinceBorderSeaBySea();
                            } else {
                                removeDrawProvinceBorder_LandBySea(this.iActiveProvince, getProvince(this.iActiveProvince).getProvinceBordersLandBySea_ID(getProvince(this.iActiveProvince).getNeighboringProvinces(i)));
                                getProvince(this.iActiveProvince).getProvinceBordersLandBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).updateDrawProvinceBorder(this.iActiveProvince);
                            }
                        } else if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).getSeaProvince()) {
                            getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).getProvinceBordersSeaBySea(this.iActiveProvince).updateDrawProvinceBorderSeaBySea();
                        } else {
                            removeDrawProvinceBorder_LandBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).getProvinceBordersLandBySea_ID(this.iActiveProvince));
                            getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i)).getProvinceBordersLandBySea(this.iActiveProvince).updateDrawProvinceBorder(getProvince(this.iActiveProvince).getNeighboringProvinces(i));
                        }
                    }
                } else {
                    for (int i2 = 0; i2 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i2++) {
                        if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i2)) {
                            if (!getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getIsCivilizationBorder()) {
                                getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).updateDrawProvinceBorder(this.iActiveProvince);
                            } else if (isActiveCivRegion_CivID(getProvince(this.iActiveProvince).getCivID(), getProvince(this.iActiveProvince).getCivRegionID())) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(this.iActiveProvince).getCivID())).getRegionStyleID(getProvince(this.iActiveProvince).getCivRegionID())).updatePB(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i2));
                            } else if (isActiveCivRegion_CivID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivID(), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivRegionID())) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivID())).getRegionStyleID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivRegionID())).updatePB(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i2));
                            } else {
                                getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).updateDrawProvinceBorder(this.iActiveProvince);
                            }
                        } else if (!getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getProvinceBordersLandByLand(this.iActiveProvince).getIsCivilizationBorder()) {
                            getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getProvinceBordersLandByLand(this.iActiveProvince).updateDrawProvinceBorder(getProvince(this.iActiveProvince).getNeighboringProvinces(i2));
                        } else if (isActiveCivRegion_CivID(getProvince(this.iActiveProvince).getCivID(), getProvince(this.iActiveProvince).getCivRegionID())) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(this.iActiveProvince).getCivID())).getRegionStyleID(getProvince(this.iActiveProvince).getCivRegionID())).updatePB(getProvince(this.iActiveProvince).getNeighboringProvinces(i2), this.iActiveProvince);
                        } else if (isActiveCivRegion_CivID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivID(), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivRegionID())) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivID())).getRegionStyleID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getCivRegionID())).updatePB(getProvince(this.iActiveProvince).getNeighboringProvinces(i2), this.iActiveProvince);
                        } else {
                            getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i2)).getProvinceBordersLandByLand(this.iActiveProvince).updateDrawProvinceBorder(getProvince(this.iActiveProvince).getNeighboringProvinces(i2));
                        }
                    }
                }
            }
            int oldActiveProvinceID = this.iActiveProvince;
            this.iActiveProvince = nActiveProvinceID;
            this.activeProvince_Animation_Data.resetAnimationData();
            if (oldActiveProvinceID >= 0) {
                getProvince(oldActiveProvinceID).updateDrawArmy();
            }
            if (this.iActiveProvince >= 0) {
                getProvince(this.iActiveProvince).updateDrawArmy();
                CFG.menuManager.getColorPicker().getColorPickerAction().setActiveProvince_Action();
            }
            if (CFG.menuManager.getInGameView()) {
                if (!CFG.chooseProvinceMode && !CFG.regroupArmyMode) {
                    checkProvinceActionMenu();
                }
                if (CFG.menuManager.getInGame_ProvinceBuild_Visible()) {
                    if (getActiveProvinceID() < 0) {
                        CFG.menuManager.setVisible_InGame_ProvinceBuild(false, false);
                    } else if (getActiveProvinceID() != oldActiveProvinceID) {
                        if (CFG.game.getProvince(getActiveProvinceID()).getCivID() != CFG.game.getPlayer(CFG.PLAYER_TURNID).getCivID()) {
                            CFG.menuManager.setVisible_InGame_ProvinceBuild(false, false);
                        } else {
                            BuildingsManager.iBuildInProvinceID = getActiveProvinceID();
                            CFG.menuManager.setVisible_InGame_ProvinceBuild(true, true);
                        }
                    }
                }
                if (CFG.viewsManager.getActiveViewID() >= 0) {
                    CFG.viewsManager.getActiveView().updateActiveProvinceID_ExtraAction(oldActiveProvinceID, getActiveProvinceID());
                }
                CFG.gameAction.updateInGame_ProvinceInfo();
            }
            if (CFG.isAndroid()) {
                CFG.menuManager.resetHoverActive();
            }
            this.lTIME_ACTIVE_CITIES = System.currentTimeMillis();
            if (this.iActiveProvince >= 0) {
                if (getProvince(this.iActiveProvince).getSeaProvince()) {
                    for (int i3 = 0; i3 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i3++) {
                        if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i3)) {
                            if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                                this.activeProvinceBorder_SeaBySea_Style.update(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i3));
                            } else {
                                addDrawProvinceBorder_LandBySea(this.iActiveProvince, getProvince(this.iActiveProvince).getProvinceBordersLandBySea_ID(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)));
                                this.activeProvinceBorder_LandBySea_Style.update(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i3));
                            }
                        } else if (getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getSeaProvince()) {
                            this.activeProvinceBorder_SeaBySea_Style.update(getProvince(this.iActiveProvince).getNeighboringProvinces(i3), this.iActiveProvince);
                        } else {
                            addDrawProvinceBorder_LandBySea(getProvince(this.iActiveProvince).getNeighboringProvinces(i3), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i3)).getProvinceBordersLandBySea_ID(this.iActiveProvince));
                            this.activeProvinceBorder_LandBySea_Style.update(getProvince(this.iActiveProvince).getNeighboringProvinces(i3), this.iActiveProvince);
                        }
                    }
                } else {
                    for (int i4 = 0; i4 < getProvince(this.iActiveProvince).getNeighboringProvincesSize(); i4++) {
                        if (this.iActiveProvince < getProvince(this.iActiveProvince).getNeighboringProvinces(i4)) {
                            if (!getProvince(this.iActiveProvince).getProvinceBordersLandByLand(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getIsCivilizationBorder()) {
                                this.activeProvinceBorder_LandByLand_Style.update(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i4));
                            } else if (isActiveCivRegion_CivID(getProvince(this.iActiveProvince).getCivID(), getProvince(this.iActiveProvince).getCivRegionID())) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(this.iActiveProvince).getCivID())).getRegionStyleID(getProvince(this.iActiveProvince).getCivRegionID())).updatePB(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i4));
                            } else if (isActiveCivRegion_CivID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivID(), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivRegionID())) {
                                this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivID())).getRegionStyleID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivRegionID())).updatePB(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i4));
                            } else {
                                this.activeProvinceBorder_LandByLand_Style.update(this.iActiveProvince, getProvince(this.iActiveProvince).getNeighboringProvinces(i4));
                            }
                        } else if (!getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getProvinceBordersLandByLand(this.iActiveProvince).getIsCivilizationBorder()) {
                            this.activeProvinceBorder_LandByLand_Style.update(getProvince(this.iActiveProvince).getNeighboringProvinces(i4), this.iActiveProvince);
                        } else if (isActiveCivRegion_CivID(getProvince(this.iActiveProvince).getCivID(), getProvince(this.iActiveProvince).getCivRegionID())) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(this.iActiveProvince).getCivID())).getRegionStyleID(getProvince(this.iActiveProvince).getCivRegionID())).updatePB(getProvince(this.iActiveProvince).getNeighboringProvinces(i4), this.iActiveProvince);
                        } else if (isActiveCivRegion_CivID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivID(), getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivRegionID())) {
                            this.lCivRegion_Styles.get(this.lActive_CivRegion.get(getCivRegionID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivID())).getRegionStyleID(getProvince(getProvince(this.iActiveProvince).getNeighboringProvinces(i4)).getCivRegionID())).updatePB(getProvince(this.iActiveProvince).getNeighboringProvinces(i4), this.iActiveProvince);
                        } else {
                            this.activeProvinceBorder_LandByLand_Style.update(getProvince(this.iActiveProvince).getNeighboringProvinces(i4), this.iActiveProvince);
                        }
                    }
                }
            }
            CFG.setRender_3(true);
        } catch (NullPointerException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
        }
    }

    public final void updateProvinceNameWidth(int nProvinceID) {
        if (nProvinceID >= 0) {
            try {
                CFG.fontMain.getData().setScale(0.8f);
                CFG.glyphLayout.setText(CFG.fontMain, getProvince(nProvinceID).getName());
                CFG.iProvinceNameWidth = (int) CFG.glyphLayout.width;
                CFG.fontMain.getData().setScale(1.0f);
            } catch (NullPointerException e) {
                CFG.iProvinceNameWidth = 0;
            } catch (IllegalArgumentException e2) {
                CFG.iProvinceNameWidth = 0;
            } catch (IndexOutOfBoundsException e3) {
                CFG.iProvinceNameWidth = 0;
            } catch (IllegalStateException e4) {
                CFG.iProvinceNameWidth = 0;
            }
        } else {
            CFG.iProvinceNameWidth = 0;
        }
    }

    public final void updateProvinceNameWidth(String sText) {
        CFG.fontMain.getData().setScale(0.8f);
        CFG.glyphLayout.setText(CFG.fontMain, sText);
        CFG.iProvinceNameWidth = (int) CFG.glyphLayout.width;
        CFG.fontMain.getData().setScale(1.0f);
    }

    public final int getActiveProvinceID() {
        return this.iActiveProvince;
    }

    public final Game_Scenarios getGameScenarios() {
        return this.gameScenarios;
    }

    public final int getPlayersSize() {
        return this.iPlayersSize;
    }

    public final List<Region> getRegions() {
        return this.lRegions;
    }

    public final void updateRegionsSize() {
        this.iRegionsSize = this.lRegions.size();
    }

    public final int getRegionID(int nProvinceID) {
        for (int i = 0; i < this.iRegionsSize; i++) {
            for (int j = 0; j < this.lRegions.get(i).getProvincesSize(); j++) {
                if (this.lRegions.get(i).getProvince(j) == nProvinceID) {
                    return i;
                }
            }
        }
        Gdx.app.log("AoC", "REGION ERROR: " + nProvinceID);
        return 0;
    }

    public final int getProvinceInViewID(int iID) {
        try {
            return this.lProvincesInView.get(iID).intValue();
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final int getSeaProvinceInViewID(int iID) {
        try {
            return this.lSeaProvincesInView.get(iID).intValue();
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final int getWastelandProvinceInViewID(int iID) {
        try {
            return this.lWastelandProvincesInView.get(iID).intValue();
        } catch (IndexOutOfBoundsException ex) {
            if (CFG.LOGS) {
                CFG.exceptionStack(ex);
            }
            return 0;
        }
    }

    public final Province_Animation2 getProvinceAnimation_Active_Data() {
        return this.activeProvince_Animation_Data;
    }

    public final Province_Animation_MoveUnits2 getProvinceAnimation_Highlighted_Data() {
        return this.highlightedProvince_AnimationData;
    }

    public final int getAvailableCivilizations() {
        return this.iAvailableCivilizations;
    }

    public final void setAvailableCivilizations(int iAvailableCivilizations2) {
        this.iAvailableCivilizations = iAvailableCivilizations2;
    }

    public final void setUpdateProvincesInView(boolean updateProvincesInView2) {
        this.updateProvincesInView = updateProvincesInView2;
    }

    public final RandomTurnOrder getRTO() {
        return this.oRTO;
    }

    public final Selected_Provinces getSelectedProvinces() {
        return this.selectedProvinces;
    }

    public int getPeaceTreaty_GameDataID(String sTag) {
        for (int i = this.lPeaceTreaties.size() - 1; i >= 0; i--) {
            if (this.lPeaceTreaties.get(i).PEACE_TREATY_TAG.equals(sTag)) {
                return i;
            }
        }
        return -1;
    }

    public boolean getPeaceTreaty_GameData_AlreadySent(int nCivA, int nCivB) {
        for (int i = this.lPeaceTreaties.size() - 1; i >= 0; i--) {
            for (int j = 0; j < this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Defenders.size(); j++) {
                if (this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Defenders.get(j).iCivID == nCivA) {
                    for (int k = 0; k < this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Aggressors.size(); k++) {
                        if (this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Aggressors.get(k).iCivID == nCivB) {
                            return true;
                        }
                    }
                    continue;
                } else if (this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Defenders.get(j).iCivID != nCivB) {
                    continue;
                } else {
                    for (int k2 = 0; k2 < this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Aggressors.size(); k2++) {
                        if (this.lPeaceTreaties.get(i).peaceTreaty_GameData.lCivsData_Aggressors.get(k2).iCivID == nCivA) {
                            return true;
                        }
                    }
                    continue;
                }
            }
        }
        return false;
    }

    public final void addLoadArmiesWidth_ErrorIDs(int nProvinceID) {
        int i = this.loadArmiesWidth_ErrorIDs.size() - 1;
        while (i >= 0) {
            if (this.loadArmiesWidth_ErrorIDs.get(i).intValue() != nProvinceID) {
                i--;
            } else {
                return;
            }
        }
        this.loadArmiesWidth_ErrorIDs.add(Integer.valueOf(nProvinceID));
    }

    public final void updateLoadArmiesWidth_ErrorIDs(SpriteBatch oSB) {
        for (int i = this.loadArmiesWidth_ErrorIDs.size() - 1; i >= 0; i--) {
            int j = 0;
            while (j < CFG.game.getProvince(this.loadArmiesWidth_ErrorIDs.get(i).intValue()).getCivsSize()) {
                try {
                    CFG.game.getProvince(this.loadArmiesWidth_ErrorIDs.get(i).intValue()).updateArmyWidth(j);
                    j++;
                } catch (IndexOutOfBoundsException e) {
                }
            }
            this.loadArmiesWidth_ErrorIDs.remove(i);
        }
    }

    public class DrawProvinceBorder_LandBySeaIDs {
        int iProvinceID;
        int withProvinceID;

        DrawProvinceBorder_LandBySeaIDs(int iProvinceID2, int withProvinceID2) {
            this.iProvinceID = iProvinceID2;
            this.withProvinceID = withProvinceID2;
        }
    }
}
